{
  "timestamp": 1419471263,
  "status": 200,
  "request": {
    "type": "list"
  },
  "value": {
    "Users": {
      "database=UserDatabase,type=UserDatabase": {
        "desc": "In-memory user and group database",
        "op": {
          "createGroup": {
            "ret": "java.lang.String",
            "desc": "Create new group and return MBean name",
            "args": [
              {
                "desc": "Group name of the new group",
                "name": "groupname",
                "type": "java.lang.String"
              },
              {
                "desc": "Description of the new group",
                "name": "description",
                "type": "java.lang.String"
              }
            ]
          },
          "createUser": {
            "ret": "java.lang.String",
            "desc": "Create new user and return MBean name",
            "args": [
              {
                "desc": "User name of the new user",
                "name": "username",
                "type": "java.lang.String"
              },
              {
                "desc": "Password of the new user",
                "name": "password",
                "type": "java.lang.String"
              },
              {
                "desc": "Full name of the new user",
                "name": "fullName",
                "type": "java.lang.String"
              }
            ]
          },
          "save": {
            "ret": "void",
            "desc": "Save current users and groups to persistent storage",
            "args": []
          },
          "createRole": {
            "ret": "java.lang.String",
            "desc": "Create new role and return MBean name",
            "args": [
              {
                "desc": "Role name of the new role",
                "name": "rolename",
                "type": "java.lang.String"
              },
              {
                "desc": "Description of the new role",
                "name": "description",
                "type": "java.lang.String"
              }
            ]
          },
          "removeRole": {
            "ret": "void",
            "desc": "Remove existing role",
            "args": [
              {
                "desc": "Role name of the role to remove",
                "name": "rolename",
                "type": "java.lang.String"
              }
            ]
          },
          "removeUser": {
            "ret": "void",
            "desc": "Remove existing user (and all group memberships)",
            "args": [
              {
                "desc": "User name of the user to remove",
                "name": "username",
                "type": "java.lang.String"
              }
            ]
          },
          "removeGroup": {
            "ret": "void",
            "desc": "Remove existing group (and all user memberships)",
            "args": [
              {
                "desc": "Group name of the group to remove",
                "name": "groupname",
                "type": "java.lang.String"
              }
            ]
          },
          "findUser": {
            "ret": "java.lang.String",
            "desc": "Return MBean Name of the specified user (if any)",
            "args": [
              {
                "desc": "User name of the requested user",
                "name": "username",
                "type": "java.lang.String"
              }
            ]
          },
          "findRole": {
            "ret": "java.lang.String",
            "desc": "Return MBean Name of the specified role (if any)",
            "args": [
              {
                "desc": "Role name of the requested role",
                "name": "rolename",
                "type": "java.lang.String"
              }
            ]
          },
          "findGroup": {
            "ret": "java.lang.String",
            "desc": "Return MBean Name of the specified group (if any)",
            "args": [
              {
                "desc": "Group name of the requested group",
                "name": "groupname",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "users": {
            "desc": "MBean Names of all defined users",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "roles": {
            "desc": "MBean Names of all defined roles",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "writeable": {
            "desc": "Check if user database is writeable",
            "type": null,
            "rw": false
          },
          "pathname": {
            "desc": "Relative or absolute pathname to database file",
            "type": "java.lang.String",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "readonly": {
            "desc": "No persistant save of the user database",
            "type": "boolean",
            "rw": false
          },
          "groups": {
            "desc": "MBean Names of all defined groups",
            "type": "[Ljava.lang.String;",
            "rw": false
          }
        }
      }
    },
    "JMImplementation": {
      "type=MBeanServerDelegate": {
        "desc": "Represents  the MBean server from the management point of view.",
        "attr": {
          "ImplementationVendor": {
            "desc": "the JMX implementation vendor (the vendor of this product).",
            "type": "java.lang.String",
            "rw": false
          },
          "SpecificationVendor": {
            "desc": "The vendor of the JMX specification implemented by this product.",
            "type": "java.lang.String",
            "rw": false
          },
          "ImplementationVersion": {
            "desc": "The JMX implementation version (the version of this product).",
            "type": "java.lang.String",
            "rw": false
          },
          "MBeanServerId": {
            "desc": "The MBean server agent identification",
            "type": "java.lang.String",
            "rw": false
          },
          "SpecificationVersion": {
            "desc": "The version of the JMX specification implemented by this product.",
            "type": "java.lang.String",
            "rw": false
          },
          "SpecificationName": {
            "desc": "The full name of the JMX specification implemented by this product.",
            "type": "java.lang.String",
            "rw": false
          },
          "ImplementationName": {
            "desc": "The JMX implementation name (the name of this product)",
            "type": "java.lang.String",
            "rw": false
          }
        }
      }
    },
    "jmx4perl": {
      "type=Config": {
        "desc": "Information on the management interface of the MBean",
        "op": {
          "resetHistoryEntries": {
            "ret": "void",
            "desc": "Operation exposed for management",
            "args": []
          },
          "resetDebugInfo": {
            "ret": "void",
            "desc": "Operation exposed for management",
            "args": []
          },
          "setHistoryEntriesForOperation": {
            "ret": "void",
            "desc": "Operation exposed for management",
            "args": [
              {
                "desc": "",
                "name": "p1",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p2",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p3",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p4",
                "type": "int"
              }
            ]
          },
          "debugInfo": {
            "ret": "java.lang.String",
            "desc": "Operation exposed for management",
            "args": []
          },
          "setHistoryEntriesForAttribute": {
            "ret": "void",
            "desc": "Operation exposed for management",
            "args": [
              {
                "desc": "",
                "name": "p1",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p2",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p3",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p4",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p5",
                "type": "int"
              }
            ]
          },
          "setHistoryLimitForOperation": {
            "ret": "void",
            "desc": "Operation exposed for management",
            "args": [
              {
                "desc": "",
                "name": "p1",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p2",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p3",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p4",
                "type": "int"
              },
              {
                "desc": "",
                "name": "p5",
                "type": "long"
              }
            ]
          },
          "setHistoryLimitForAttribute": {
            "ret": "void",
            "desc": "Operation exposed for management",
            "args": [
              {
                "desc": "",
                "name": "p1",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p2",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p3",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p4",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p5",
                "type": "int"
              },
              {
                "desc": "",
                "name": "p6",
                "type": "long"
              }
            ]
          }
        },
        "attr": {
          "HistoryMaxEntries": {
            "desc": "Attribute exposed for management",
            "type": "int",
            "rw": true
          },
          "Debug": {
            "desc": "Attribute exposed for management",
            "type": "boolean",
            "rw": true
          },
          "MaxDebugEntries": {
            "desc": "Attribute exposed for management",
            "type": "int",
            "rw": true
          },
          "HistorySize": {
            "desc": "Attribute exposed for management",
            "type": "int",
            "rw": false
          }
        }
      }
    },
    "com.sun.management": {
      "type=HotSpotDiagnostic": {
        "desc": "Information on the management interface of the MBean",
        "op": {
          "dumpHeap": {
            "ret": "void",
            "desc": "dumpHeap",
            "args": [
              {
                "desc": "p0",
                "name": "p0",
                "type": "java.lang.String"
              },
              {
                "desc": "p1",
                "name": "p1",
                "type": "boolean"
              }
            ]
          },
          "setVMOption": {
            "ret": "void",
            "desc": "setVMOption",
            "args": [
              {
                "desc": "p0",
                "name": "p0",
                "type": "java.lang.String"
              },
              {
                "desc": "p1",
                "name": "p1",
                "type": "java.lang.String"
              }
            ]
          },
          "getVMOption": {
            "ret": "javax.management.openmbean.CompositeData",
            "desc": "getVMOption",
            "args": [
              {
                "desc": "p0",
                "name": "p0",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "DiagnosticOptions": {
            "desc": "DiagnosticOptions",
            "type": "[Ljavax.management.openmbean.CompositeData;",
            "rw": false
          },
          "ObjectName": {
            "desc": "ObjectName",
            "type": "javax.management.ObjectName",
            "rw": false
          }
        }
      }
    },
    "Catalina": {
      "context=/manager,host=localhost,type=WebappClassLoader": {
        "desc": "Classloader implementation which is specialized for handling web applications",
        "attr": {
          "jarPath": {
            "desc": "The jarPath of this loader",
            "type": "java.lang.String",
            "rw": false
          },
          "searchExternalFirst": {
            "desc": "The searchExternalFirst flag for this Loader",
            "type": "boolean",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "URLs": {
            "desc": "The URLs of this loader",
            "type": "[Ljava.net.URL;",
            "rw": true
          },
          "antiJARLocking": {
            "desc": "The antiJARLocking flag for this Loader",
            "type": "boolean",
            "rw": true
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "contextName": {
            "desc": "Name of the webapp context",
            "type": "java.lang.String",
            "rw": false
          },
          "delegate": {
            "desc": "The 'follow standard delegation model' flag that will be used to configure our ClassLoader",
            "type": "boolean",
            "rw": true
          }
        }
      },
      "name=common,type=ServerClassLoader": {
        "desc": "Information on the management interface of the MBean"
      },
      "J2EEApplication=none,J2EEServer=none,WebModule=//localhost/,j2eeType=Servlet,name=default": {
        "desc": "Wrapper that represents an individual servlet definition",
        "op": {
          "findSecurityReference": {
            "ret": "java.lang.String",
            "desc": "Return the security role link for the specified security role reference name.",
            "args": [
              {
                "desc": "Security role reference used within this servle",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "addMapping": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "removeInitParameter": {
            "ret": "void",
            "desc": "Remove the specified initialization parameter from this servlet.",
            "args": [
              {
                "desc": "Name of the initialization parameter to remove",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeSecurityReference": {
            "ret": "void",
            "desc": "Remove any security role reference for the specified role name.",
            "args": [
              {
                "desc": "Security role used within this servlet to be removeds",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "findMappingObject": {
            "ret": "org.apache.catalina.Wrapper",
            "desc": "Return an object which may be utilized for mapping to this component",
            "args": []
          },
          "addValve": {
            "ret": "java.lang.String",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new valve to be added",
                "name": "valveType",
                "type": "java.lang.String"
              }
            ]
          },
          "addLifecycleListener": {
            "ret": "void",
            "desc": "Add a lifecycle listener to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new lifecycle listener to be added",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "removeLifecycleListeners": {
            "ret": "void",
            "desc": "Removes lifecycle listeners of given class type from this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the lifecycle listeners to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "removeValve": {
            "ret": "void",
            "desc": "Remove a valve from this Wrapper",
            "args": [
              {
                "desc": "Objectname of the valve to be removed",
                "name": "valveName",
                "type": "java.lang.String"
              }
            ]
          },
          "addSecurityReference": {
            "ret": "void",
            "desc": "Add a new security role reference record to the set of records for this servlet.",
            "args": [
              {
                "desc": "Role name used within this servlet",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Role name used within the web application",
                "name": "link",
                "type": "java.lang.String"
              }
            ]
          },
          "addInitParameter": {
            "ret": "void",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Name of this initialization parameter to add",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Value of this initialization parameter to add",
                "name": "value",
                "type": "java.lang.String"
              }
            ]
          },
          "findInitParameters": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the names of all defined initialization parameters for this servlet.",
            "args": []
          },
          "removeMapping": {
            "ret": "void",
            "desc": "Remove a mapping associated with the wrapper.",
            "args": [
              {
                "desc": "The pattern to remove",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "findSecurityReferences": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of security role reference names associated with this servlet",
            "args": []
          },
          "findMappings": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the mappings associated with this wrapper",
            "args": []
          },
          "findInitParameter": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "minTime": {
            "desc": "Minimum processing time of a request",
            "type": "long",
            "rw": false
          },
          "runAs": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": true
          },
          "countAllocated": {
            "desc": "The count of allocations that are currently active (even if they  are for the same instance, as will be true on a non-STM servlet).",
            "type": "int",
            "rw": false
          },
          "eventProvider": {
            "desc": "Event provider support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "statisticsProvider": {
            "desc": "Performance statistics support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "objectName": {
            "desc": "Name of the object",
            "type": "java.lang.String",
            "rw": true
          },
          "processingTime": {
            "desc": "Total execution time of the servlet's service method",
            "type": "long",
            "rw": false
          },
          "errorCount": {
            "desc": "Error count",
            "type": "int",
            "rw": false
          },
          "maxTime": {
            "desc": "Maximum processing time of a request",
            "type": "long",
            "rw": false
          },
          "available": {
            "desc": "The date and time at which this servlet will become available (in milliseconds since the epoch), or zero if the servlet is available. If this value equals Long.MAX_VALUE, the unavailability of this servlet is considered permanent.",
            "type": "long",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "asyncSupported": {
            "desc": "Async support",
            "type": "boolean",
            "rw": true
          },
          "backgroundProcessorDelay": {
            "desc": "The processor delay for this component.",
            "type": "int",
            "rw": true
          },
          "loadOnStartup": {
            "desc": "The load-on-startup order value (negative value means load on first call) for this servlet.",
            "type": "int",
            "rw": true
          },
          "maxInstances": {
            "desc": "Maximum number of STM instances.",
            "type": "int",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "loadTime": {
            "desc": "Time taken to load and initialise the Servlet",
            "type": "long",
            "rw": false
          },
          "stateManageable": {
            "desc": "State management support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "servletClass": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": false
          },
          "classLoadTime": {
            "desc": "Time taken to load the Servlet class",
            "type": "int",
            "rw": false
          },
          "requestCount": {
            "desc": "Number of requests processed by this wrapper",
            "type": "int",
            "rw": false
          },
          "singleThreadModel": {
            "desc": "Does this servlet implement the SingleThreadModel interface?",
            "type": "boolean",
            "rw": false
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,WebModule=//localhost/,j2eeType=Servlet,name=jsp": {
        "desc": "Wrapper that represents an individual servlet definition",
        "op": {
          "findSecurityReference": {
            "ret": "java.lang.String",
            "desc": "Return the security role link for the specified security role reference name.",
            "args": [
              {
                "desc": "Security role reference used within this servle",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "addMapping": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "removeInitParameter": {
            "ret": "void",
            "desc": "Remove the specified initialization parameter from this servlet.",
            "args": [
              {
                "desc": "Name of the initialization parameter to remove",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeSecurityReference": {
            "ret": "void",
            "desc": "Remove any security role reference for the specified role name.",
            "args": [
              {
                "desc": "Security role used within this servlet to be removeds",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "findMappingObject": {
            "ret": "org.apache.catalina.Wrapper",
            "desc": "Return an object which may be utilized for mapping to this component",
            "args": []
          },
          "addValve": {
            "ret": "java.lang.String",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new valve to be added",
                "name": "valveType",
                "type": "java.lang.String"
              }
            ]
          },
          "addLifecycleListener": {
            "ret": "void",
            "desc": "Add a lifecycle listener to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new lifecycle listener to be added",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "removeLifecycleListeners": {
            "ret": "void",
            "desc": "Removes lifecycle listeners of given class type from this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the lifecycle listeners to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "removeValve": {
            "ret": "void",
            "desc": "Remove a valve from this Wrapper",
            "args": [
              {
                "desc": "Objectname of the valve to be removed",
                "name": "valveName",
                "type": "java.lang.String"
              }
            ]
          },
          "addSecurityReference": {
            "ret": "void",
            "desc": "Add a new security role reference record to the set of records for this servlet.",
            "args": [
              {
                "desc": "Role name used within this servlet",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Role name used within the web application",
                "name": "link",
                "type": "java.lang.String"
              }
            ]
          },
          "addInitParameter": {
            "ret": "void",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Name of this initialization parameter to add",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Value of this initialization parameter to add",
                "name": "value",
                "type": "java.lang.String"
              }
            ]
          },
          "findInitParameters": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the names of all defined initialization parameters for this servlet.",
            "args": []
          },
          "removeMapping": {
            "ret": "void",
            "desc": "Remove a mapping associated with the wrapper.",
            "args": [
              {
                "desc": "The pattern to remove",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "findSecurityReferences": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of security role reference names associated with this servlet",
            "args": []
          },
          "findMappings": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the mappings associated with this wrapper",
            "args": []
          },
          "findInitParameter": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "minTime": {
            "desc": "Minimum processing time of a request",
            "type": "long",
            "rw": false
          },
          "runAs": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": true
          },
          "countAllocated": {
            "desc": "The count of allocations that are currently active (even if they  are for the same instance, as will be true on a non-STM servlet).",
            "type": "int",
            "rw": false
          },
          "eventProvider": {
            "desc": "Event provider support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "statisticsProvider": {
            "desc": "Performance statistics support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "objectName": {
            "desc": "Name of the object",
            "type": "java.lang.String",
            "rw": true
          },
          "processingTime": {
            "desc": "Total execution time of the servlet's service method",
            "type": "long",
            "rw": false
          },
          "errorCount": {
            "desc": "Error count",
            "type": "int",
            "rw": false
          },
          "maxTime": {
            "desc": "Maximum processing time of a request",
            "type": "long",
            "rw": false
          },
          "available": {
            "desc": "The date and time at which this servlet will become available (in milliseconds since the epoch), or zero if the servlet is available. If this value equals Long.MAX_VALUE, the unavailability of this servlet is considered permanent.",
            "type": "long",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "asyncSupported": {
            "desc": "Async support",
            "type": "boolean",
            "rw": true
          },
          "backgroundProcessorDelay": {
            "desc": "The processor delay for this component.",
            "type": "int",
            "rw": true
          },
          "loadOnStartup": {
            "desc": "The load-on-startup order value (negative value means load on first call) for this servlet.",
            "type": "int",
            "rw": true
          },
          "maxInstances": {
            "desc": "Maximum number of STM instances.",
            "type": "int",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "loadTime": {
            "desc": "Time taken to load and initialise the Servlet",
            "type": "long",
            "rw": false
          },
          "stateManageable": {
            "desc": "State management support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "servletClass": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": false
          },
          "classLoadTime": {
            "desc": "Time taken to load the Servlet class",
            "type": "int",
            "rw": false
          },
          "requestCount": {
            "desc": "Number of requests processed by this wrapper",
            "type": "int",
            "rw": false
          },
          "singleThreadModel": {
            "desc": "Does this servlet implement the SingleThreadModel interface?",
            "type": "boolean",
            "rw": false
          }
        }
      },
      "port=8080,type=ProtocolHandler": {
        "desc": null,
        "op": {
          "destroy": {
            "ret": "void",
            "desc": "Introspected operation destroy",
            "args": []
          },
          "pause": {
            "ret": "void",
            "desc": "Introspected operation pause",
            "args": []
          },
          "stop": {
            "ret": "void",
            "desc": "Introspected operation stop",
            "args": []
          },
          "resume": {
            "ret": "void",
            "desc": "Introspected operation resume",
            "args": []
          },
          "start": {
            "ret": "void",
            "desc": "Introspected operation start",
            "args": []
          },
          "getProperty": {
            "ret": "java.lang.String",
            "desc": "Introspected operation getProperty",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "java.lang.String"
              }
            ]
          },
          "init": {
            "ret": "void",
            "desc": "Introspected operation init",
            "args": []
          },
          "setProperty": {
            "ret": "boolean",
            "desc": "Introspected operation setProperty",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "java.lang.String"
              },
              {
                "desc": "Introspected parameter param1",
                "name": "param1",
                "type": "java.lang.String"
              }
            ]
          },
          "postRegister": {
            "ret": "void",
            "desc": "Introspected operation postRegister",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "java.lang.Boolean"
              }
            ]
          }
        },
        "attr": {
          "minSpareThreads": {
            "desc": "Introspected attribute minSpareThreads",
            "type": "int",
            "rw": true
          },
          "maxThreads": {
            "desc": "Introspected attribute maxThreads",
            "type": "int",
            "rw": true
          },
          "sSLEnabled": {
            "desc": "Introspected attribute sSLEnabled",
            "type": "boolean",
            "rw": true
          },
          "keystorePass": {
            "desc": "Introspected attribute keystorePass",
            "type": "java.lang.String",
            "rw": true
          },
          "compressableMimeType": {
            "desc": "Introspected attribute compressableMimeType",
            "type": "java.lang.String",
            "rw": true
          },
          "maxExtensionSize": {
            "desc": "Introspected attribute maxExtensionSize",
            "type": "int",
            "rw": true
          },
          "localPort": {
            "desc": "Introspected attribute localPort",
            "type": "int",
            "rw": false
          },
          "connectionCount": {
            "desc": "Introspected attribute connectionCount",
            "type": "long",
            "rw": false
          },
          "compression": {
            "desc": "Introspected attribute compression",
            "type": "java.lang.String",
            "rw": true
          },
          "maxSavePostSize": {
            "desc": "Introspected attribute maxSavePostSize",
            "type": "int",
            "rw": true
          },
          "keepAliveTimeout": {
            "desc": "Introspected attribute keepAliveTimeout",
            "type": "int",
            "rw": true
          },
          "threadPriority": {
            "desc": "Introspected attribute threadPriority",
            "type": "int",
            "rw": true
          },
          "keyPass": {
            "desc": "Introspected attribute keyPass",
            "type": "java.lang.String",
            "rw": true
          },
          "disableUploadTimeout": {
            "desc": "Introspected attribute disableUploadTimeout",
            "type": "boolean",
            "rw": true
          },
          "soLinger": {
            "desc": "Introspected attribute soLinger",
            "type": "int",
            "rw": true
          },
          "clientCertProvider": {
            "desc": "Introspected attribute clientCertProvider",
            "type": "java.lang.String",
            "rw": true
          },
          "maxSwallowSize": {
            "desc": "Introspected attribute maxSwallowSize",
            "type": "int",
            "rw": true
          },
          "maxTrailerSize": {
            "desc": "Introspected attribute maxTrailerSize",
            "type": "int",
            "rw": true
          },
          "backlog": {
            "desc": "Introspected attribute backlog",
            "type": "int",
            "rw": true
          },
          "connectionUploadTimeout": {
            "desc": "Introspected attribute connectionUploadTimeout",
            "type": "int",
            "rw": true
          },
          "socketBuffer": {
            "desc": "Introspected attribute socketBuffer",
            "type": "int",
            "rw": true
          },
          "truststoreType": {
            "desc": "Introspected attribute truststoreType",
            "type": "java.lang.String",
            "rw": true
          },
          "sessionCacheSize": {
            "desc": "Introspected attribute sessionCacheSize",
            "type": "java.lang.String",
            "rw": true
          },
          "port": {
            "desc": "Introspected attribute port",
            "type": "int",
            "rw": true
          },
          "truststorePass": {
            "desc": "Introspected attribute truststorePass",
            "type": "java.lang.String",
            "rw": true
          },
          "maxHttpHeaderSize": {
            "desc": "Introspected attribute maxHttpHeaderSize",
            "type": "int",
            "rw": true
          },
          "secure": {
            "desc": "Introspected attribute secure",
            "type": "boolean",
            "rw": true
          },
          "truststoreAlgorithm": {
            "desc": "Introspected attribute truststoreAlgorithm",
            "type": "java.lang.String",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "processorCache": {
            "desc": "Introspected attribute processorCache",
            "type": "int",
            "rw": true
          },
          "ciphers": {
            "desc": "Introspected attribute ciphers",
            "type": "java.lang.String",
            "rw": true
          },
          "algorithm": {
            "desc": "Introspected attribute algorithm",
            "type": "java.lang.String",
            "rw": true
          },
          "noCompressionUserAgents": {
            "desc": "Introspected attribute noCompressionUserAgents",
            "type": "java.lang.String",
            "rw": true
          },
          "compressionMinSize": {
            "desc": "Introspected attribute compressionMinSize",
            "type": "int",
            "rw": true
          },
          "name": {
            "desc": "Introspected attribute name",
            "type": "java.lang.String",
            "rw": false
          },
          "restrictedUserAgents": {
            "desc": "Introspected attribute restrictedUserAgents",
            "type": "java.lang.String",
            "rw": true
          },
          "keystoreProvider": {
            "desc": "Introspected attribute keystoreProvider",
            "type": "java.lang.String",
            "rw": true
          },
          "nameIndex": {
            "desc": "Introspected attribute nameIndex",
            "type": "int",
            "rw": false
          },
          "domain": {
            "desc": "Introspected attribute domain",
            "type": "java.lang.String",
            "rw": false
          },
          "compressableMimeTypes": {
            "desc": "Introspected attribute compressableMimeTypes",
            "type": "java.lang.String",
            "rw": true
          },
          "allowUnsafeLegacyRenegotiation": {
            "desc": "Introspected attribute allowUnsafeLegacyRenegotiation",
            "type": "java.lang.String",
            "rw": true
          },
          "truststoreProvider": {
            "desc": "Introspected attribute truststoreProvider",
            "type": "java.lang.String",
            "rw": true
          },
          "maxHeaderCount": {
            "desc": "Introspected attribute maxHeaderCount",
            "type": "int",
            "rw": true
          },
          "clientAuth": {
            "desc": "Introspected attribute clientAuth",
            "type": "java.lang.String",
            "rw": true
          },
          "disableKeepAlivePercentage": {
            "desc": "Introspected attribute disableKeepAlivePercentage",
            "type": "int",
            "rw": true
          },
          "tcpNoDelay": {
            "desc": "Introspected attribute tcpNoDelay",
            "type": "boolean",
            "rw": true
          },
          "maxConnections": {
            "desc": "Introspected attribute maxConnections",
            "type": "int",
            "rw": true
          },
          "keystoreType": {
            "desc": "Introspected attribute keystoreType",
            "type": "java.lang.String",
            "rw": true
          },
          "maxKeepAliveRequests": {
            "desc": "Introspected attribute maxKeepAliveRequests",
            "type": "int",
            "rw": true
          },
          "crlFile": {
            "desc": "Introspected attribute crlFile",
            "type": "java.lang.String",
            "rw": true
          },
          "objectName": {
            "desc": "Introspected attribute objectName",
            "type": "javax.management.ObjectName",
            "rw": false
          },
          "keystoreFile": {
            "desc": "Introspected attribute keystoreFile",
            "type": "java.lang.String",
            "rw": true
          },
          "trustMaxCertLength": {
            "desc": "Introspected attribute trustMaxCertLength",
            "type": "java.lang.String",
            "rw": true
          },
          "sessionTimeout": {
            "desc": "Introspected attribute sessionTimeout",
            "type": "java.lang.String",
            "rw": true
          },
          "sslProtocol": {
            "desc": "Introspected attribute sslProtocol",
            "type": "java.lang.String",
            "rw": true
          },
          "upgradeAsyncWriteBufferSize": {
            "desc": "Introspected attribute upgradeAsyncWriteBufferSize",
            "type": "int",
            "rw": true
          },
          "connectionTimeout": {
            "desc": "Introspected attribute connectionTimeout",
            "type": "int",
            "rw": true
          },
          "soTimeout": {
            "desc": "Introspected attribute soTimeout",
            "type": "int",
            "rw": true
          },
          "truststoreFile": {
            "desc": "Introspected attribute truststoreFile",
            "type": "java.lang.String",
            "rw": true
          },
          "keyAlias": {
            "desc": "Introspected attribute keyAlias",
            "type": "java.lang.String",
            "rw": true
          },
          "aprRequired": {
            "desc": "Introspected attribute aprRequired",
            "type": "boolean",
            "rw": false
          },
          "server": {
            "desc": "Introspected attribute server",
            "type": "java.lang.String",
            "rw": true
          },
          "sslImplementationName": {
            "desc": "Introspected attribute sslImplementationName",
            "type": "java.lang.String",
            "rw": true
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,WebModule=//localhost/manager,j2eeType=Filter,name=Tomcat WebSocket (JSR356) Filter": {
        "desc": "Wrapper that represents an individual servlet-filter definition",
        "attr": {
          "filterClass": {
            "desc": "Fully qualified class name of the filter object",
            "type": "java.lang.String",
            "rw": false
          },
          "filterInitParameterMap": {
            "desc": "Return the initiaization parameters associated with this filter",
            "type": "java.util.Map",
            "rw": false
          },
          "filterName": {
            "desc": "The name used to reference the filter in web.xml",
            "type": "java.lang.String",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "type=Service": {
        "desc": "Standard Service Component",
        "op": {
          "stop": {
            "ret": "void",
            "desc": "Stop",
            "args": []
          },
          "findConnectors": {
            "ret": "[Ljava.lang.String;",
            "desc": "Find and return the set of Connectors associated with this Service",
            "args": []
          },
          "start": {
            "ret": "void",
            "desc": "Start",
            "args": []
          },
          "getExecutor": {
            "ret": "java.lang.String",
            "desc": "Retrieves executor by name",
            "args": [
              {
                "desc": "Name of the executor to be retrieved",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "addExecutor": {
            "ret": "void",
            "desc": "Adds a named executor to the service",
            "args": [
              {
                "desc": "Classname of the Executor to be added",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "addConnector": {
            "ret": "void",
            "desc": "Add a new connector",
            "args": [
              {
                "desc": "The IP address on which to bind",
                "name": "address",
                "type": "java.lang.String"
              },
              {
                "desc": "TCP port number to listen on",
                "name": "port",
                "type": "int"
              },
              {
                "desc": "Create a AJP/1.3 Connector",
                "name": "isAjp",
                "type": "boolean"
              },
              {
                "desc": "Create a secure Connector",
                "name": "isSSL",
                "type": "boolean"
              }
            ]
          },
          "findExecutors": {
            "ret": "[Ljava.lang.String;",
            "desc": "Retrieves all executors",
            "args": []
          }
        },
        "attr": {
          "managedResource": {
            "desc": "The managed resource this MBean is associated with",
            "type": "java.lang.Object",
            "rw": true
          },
          "connectorNames": {
            "desc": "ObjectNames of the connectors",
            "type": "[Ljavax.management.ObjectName;",
            "rw": false
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "name": {
            "desc": "Unique name of this Service",
            "type": "java.lang.String",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "name=\"ajp-bio-8009\",type=ThreadPool": {
        "desc": null,
        "op": {
          "stop": {
            "ret": "void",
            "desc": "Introspected operation stop",
            "args": []
          },
          "adjustRelativePath": {
            "ret": "java.lang.String",
            "desc": "Introspected operation adjustRelativePath",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "java.lang.String"
              },
              {
                "desc": "Introspected parameter param1",
                "name": "param1",
                "type": "java.lang.String"
              }
            ]
          },
          "unbind": {
            "ret": "void",
            "desc": "Introspected operation unbind",
            "args": []
          },
          "init": {
            "ret": "void",
            "desc": "Introspected operation init",
            "args": []
          },
          "setProperty": {
            "ret": "boolean",
            "desc": "Introspected operation setProperty",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "java.lang.String"
              },
              {
                "desc": "Introspected parameter param1",
                "name": "param1",
                "type": "java.lang.String"
              }
            ]
          },
          "shutdownExecutor": {
            "ret": "void",
            "desc": "Introspected operation shutdownExecutor",
            "args": []
          },
          "getAttribute": {
            "ret": "java.lang.Object",
            "desc": "Introspected operation getAttribute",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "java.lang.String"
              }
            ]
          },
          "pause": {
            "ret": "void",
            "desc": "Introspected operation pause",
            "args": []
          },
          "destroy": {
            "ret": "void",
            "desc": "Introspected operation destroy",
            "args": []
          },
          "resume": {
            "ret": "void",
            "desc": "Introspected operation resume",
            "args": []
          },
          "startInternal": {
            "ret": "void",
            "desc": "Introspected operation startInternal",
            "args": []
          },
          "start": {
            "ret": "void",
            "desc": "Introspected operation start",
            "args": []
          },
          "createExecutor": {
            "ret": "void",
            "desc": "Introspected operation createExecutor",
            "args": []
          },
          "getProperty": {
            "ret": "java.lang.String",
            "desc": "Introspected operation getProperty",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "java.lang.String"
              }
            ]
          },
          "stopInternal": {
            "ret": "void",
            "desc": "Introspected operation stopInternal",
            "args": []
          },
          "bind": {
            "ret": "void",
            "desc": "Introspected operation bind",
            "args": []
          }
        },
        "attr": {
          "useSendfile": {
            "desc": "Introspected attribute useSendfile",
            "type": "boolean",
            "rw": false
          },
          "acceptorThreadPriority": {
            "desc": "Introspected attribute acceptorThreadPriority",
            "type": "int",
            "rw": true
          },
          "minSpareThreads": {
            "desc": "Introspected attribute minSpareThreads",
            "type": "int",
            "rw": true
          },
          "maxThreads": {
            "desc": "Introspected attribute maxThreads",
            "type": "int",
            "rw": true
          },
          "sSLEnabled": {
            "desc": "Introspected attribute sSLEnabled",
            "type": "boolean",
            "rw": true
          },
          "keystorePass": {
            "desc": "Introspected attribute keystorePass",
            "type": "java.lang.String",
            "rw": true
          },
          "localPort": {
            "desc": "Introspected attribute localPort",
            "type": "int",
            "rw": false
          },
          "connectionCount": {
            "desc": "Introspected attribute connectionCount",
            "type": "long",
            "rw": false
          },
          "currentThreadCount": {
            "desc": "Introspected attribute currentThreadCount",
            "type": "int",
            "rw": false
          },
          "keepAliveTimeout": {
            "desc": "Introspected attribute keepAliveTimeout",
            "type": "int",
            "rw": true
          },
          "threadPriority": {
            "desc": "Introspected attribute threadPriority",
            "type": "int",
            "rw": true
          },
          "keyPass": {
            "desc": "Introspected attribute keyPass",
            "type": "java.lang.String",
            "rw": true
          },
          "useComet": {
            "desc": "Introspected attribute useComet",
            "type": "boolean",
            "rw": false
          },
          "soLinger": {
            "desc": "Introspected attribute soLinger",
            "type": "int",
            "rw": true
          },
          "sslEnabledProtocolsArray": {
            "desc": "Introspected attribute sslEnabledProtocolsArray",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "socketProperties": {
            "desc": "Introspected attribute socketProperties",
            "type": "org.apache.tomcat.util.net.SocketProperties",
            "rw": false
          },
          "bindOnInit": {
            "desc": "Introspected attribute bindOnInit",
            "type": "boolean",
            "rw": true
          },
          "backlog": {
            "desc": "Introspected attribute backlog",
            "type": "int",
            "rw": true
          },
          "truststoreType": {
            "desc": "Introspected attribute truststoreType",
            "type": "java.lang.String",
            "rw": true
          },
          "sessionCacheSize": {
            "desc": "Introspected attribute sessionCacheSize",
            "type": "java.lang.String",
            "rw": true
          },
          "port": {
            "desc": "Introspected attribute port",
            "type": "int",
            "rw": true
          },
          "usePolling": {
            "desc": "Introspected attribute usePolling",
            "type": "boolean",
            "rw": false
          },
          "truststorePass": {
            "desc": "Introspected attribute truststorePass",
            "type": "java.lang.String",
            "rw": true
          },
          "deferAccept": {
            "desc": "Introspected attribute deferAccept",
            "type": "boolean",
            "rw": false
          },
          "truststoreAlgorithm": {
            "desc": "Introspected attribute truststoreAlgorithm",
            "type": "java.lang.String",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "running": {
            "desc": "Introspected attribute running",
            "type": "boolean",
            "rw": false
          },
          "ciphers": {
            "desc": "Introspected attribute ciphers",
            "type": "java.lang.String",
            "rw": true
          },
          "algorithm": {
            "desc": "Introspected attribute algorithm",
            "type": "java.lang.String",
            "rw": true
          },
          "executorTerminationTimeoutMillis": {
            "desc": "Introspected attribute executorTerminationTimeoutMillis",
            "type": "long",
            "rw": true
          },
          "sslEnabledProtocols": {
            "desc": "Introspected attribute sslEnabledProtocols",
            "type": "java.lang.String",
            "rw": false
          },
          "useCometTimeout": {
            "desc": "Introspected attribute useCometTimeout",
            "type": "boolean",
            "rw": false
          },
          "name": {
            "desc": "Introspected attribute name",
            "type": "java.lang.String",
            "rw": true
          },
          "keystoreProvider": {
            "desc": "Introspected attribute keystoreProvider",
            "type": "java.lang.String",
            "rw": true
          },
          "truststoreProvider": {
            "desc": "Introspected attribute truststoreProvider",
            "type": "java.lang.String",
            "rw": true
          },
          "allowUnsafeLegacyRenegotiation": {
            "desc": "Introspected attribute allowUnsafeLegacyRenegotiation",
            "type": "java.lang.String",
            "rw": true
          },
          "maxHeaderCount": {
            "desc": "Introspected attribute maxHeaderCount",
            "type": "int",
            "rw": true
          },
          "clientAuth": {
            "desc": "Introspected attribute clientAuth",
            "type": "java.lang.String",
            "rw": true
          },
          "tcpNoDelay": {
            "desc": "Introspected attribute tcpNoDelay",
            "type": "boolean",
            "rw": true
          },
          "maxConnections": {
            "desc": "Introspected attribute maxConnections",
            "type": "int",
            "rw": true
          },
          "keystoreType": {
            "desc": "Introspected attribute keystoreType",
            "type": "java.lang.String",
            "rw": true
          },
          "maxKeepAliveRequests": {
            "desc": "Introspected attribute maxKeepAliveRequests",
            "type": "int",
            "rw": true
          },
          "crlFile": {
            "desc": "Introspected attribute crlFile",
            "type": "java.lang.String",
            "rw": true
          },
          "paused": {
            "desc": "Introspected attribute paused",
            "type": "boolean",
            "rw": false
          },
          "keystoreFile": {
            "desc": "Introspected attribute keystoreFile",
            "type": "java.lang.String",
            "rw": true
          },
          "trustMaxCertLength": {
            "desc": "Introspected attribute trustMaxCertLength",
            "type": "java.lang.String",
            "rw": true
          },
          "sessionTimeout": {
            "desc": "Introspected attribute sessionTimeout",
            "type": "java.lang.String",
            "rw": true
          },
          "sslProtocol": {
            "desc": "Introspected attribute sslProtocol",
            "type": "java.lang.String",
            "rw": true
          },
          "acceptorThreadCount": {
            "desc": "Introspected attribute acceptorThreadCount",
            "type": "int",
            "rw": true
          },
          "soTimeout": {
            "desc": "Introspected attribute soTimeout",
            "type": "int",
            "rw": true
          },
          "currentThreadsBusy": {
            "desc": "Introspected attribute currentThreadsBusy",
            "type": "int",
            "rw": false
          },
          "truststoreFile": {
            "desc": "Introspected attribute truststoreFile",
            "type": "java.lang.String",
            "rw": true
          },
          "keyAlias": {
            "desc": "Introspected attribute keyAlias",
            "type": "java.lang.String",
            "rw": true
          },
          "trustManagerClassName": {
            "desc": "Introspected attribute trustManagerClassName",
            "type": "java.lang.String",
            "rw": true
          },
          "daemon": {
            "desc": "Introspected attribute daemon",
            "type": "boolean",
            "rw": true
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,WebModule=//localhost/,j2eeType=Filter,name=charsetFilter": {
        "desc": "Wrapper that represents an individual servlet-filter definition",
        "attr": {
          "filterClass": {
            "desc": "Fully qualified class name of the filter object",
            "type": "java.lang.String",
            "rw": false
          },
          "filterInitParameterMap": {
            "desc": "Return the initiaization parameters associated with this filter",
            "type": "java.util.Map",
            "rw": false
          },
          "filterName": {
            "desc": "The name used to reference the filter in web.xml",
            "type": "java.lang.String",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,WebModule=//localhost/,j2eeType=Servlet,name=JmxMiniConsoleServlet": {
        "desc": "Wrapper that represents an individual servlet definition",
        "op": {
          "findSecurityReference": {
            "ret": "java.lang.String",
            "desc": "Return the security role link for the specified security role reference name.",
            "args": [
              {
                "desc": "Security role reference used within this servle",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "addMapping": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "removeInitParameter": {
            "ret": "void",
            "desc": "Remove the specified initialization parameter from this servlet.",
            "args": [
              {
                "desc": "Name of the initialization parameter to remove",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeSecurityReference": {
            "ret": "void",
            "desc": "Remove any security role reference for the specified role name.",
            "args": [
              {
                "desc": "Security role used within this servlet to be removeds",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "findMappingObject": {
            "ret": "org.apache.catalina.Wrapper",
            "desc": "Return an object which may be utilized for mapping to this component",
            "args": []
          },
          "addValve": {
            "ret": "java.lang.String",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new valve to be added",
                "name": "valveType",
                "type": "java.lang.String"
              }
            ]
          },
          "addLifecycleListener": {
            "ret": "void",
            "desc": "Add a lifecycle listener to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new lifecycle listener to be added",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "removeLifecycleListeners": {
            "ret": "void",
            "desc": "Removes lifecycle listeners of given class type from this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the lifecycle listeners to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "removeValve": {
            "ret": "void",
            "desc": "Remove a valve from this Wrapper",
            "args": [
              {
                "desc": "Objectname of the valve to be removed",
                "name": "valveName",
                "type": "java.lang.String"
              }
            ]
          },
          "addSecurityReference": {
            "ret": "void",
            "desc": "Add a new security role reference record to the set of records for this servlet.",
            "args": [
              {
                "desc": "Role name used within this servlet",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Role name used within the web application",
                "name": "link",
                "type": "java.lang.String"
              }
            ]
          },
          "addInitParameter": {
            "ret": "void",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Name of this initialization parameter to add",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Value of this initialization parameter to add",
                "name": "value",
                "type": "java.lang.String"
              }
            ]
          },
          "findInitParameters": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the names of all defined initialization parameters for this servlet.",
            "args": []
          },
          "removeMapping": {
            "ret": "void",
            "desc": "Remove a mapping associated with the wrapper.",
            "args": [
              {
                "desc": "The pattern to remove",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "findSecurityReferences": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of security role reference names associated with this servlet",
            "args": []
          },
          "findMappings": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the mappings associated with this wrapper",
            "args": []
          },
          "findInitParameter": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "minTime": {
            "desc": "Minimum processing time of a request",
            "type": "long",
            "rw": false
          },
          "runAs": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": true
          },
          "countAllocated": {
            "desc": "The count of allocations that are currently active (even if they  are for the same instance, as will be true on a non-STM servlet).",
            "type": "int",
            "rw": false
          },
          "eventProvider": {
            "desc": "Event provider support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "statisticsProvider": {
            "desc": "Performance statistics support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "objectName": {
            "desc": "Name of the object",
            "type": "java.lang.String",
            "rw": true
          },
          "processingTime": {
            "desc": "Total execution time of the servlet's service method",
            "type": "long",
            "rw": false
          },
          "errorCount": {
            "desc": "Error count",
            "type": "int",
            "rw": false
          },
          "maxTime": {
            "desc": "Maximum processing time of a request",
            "type": "long",
            "rw": false
          },
          "available": {
            "desc": "The date and time at which this servlet will become available (in milliseconds since the epoch), or zero if the servlet is available. If this value equals Long.MAX_VALUE, the unavailability of this servlet is considered permanent.",
            "type": "long",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "asyncSupported": {
            "desc": "Async support",
            "type": "boolean",
            "rw": true
          },
          "backgroundProcessorDelay": {
            "desc": "The processor delay for this component.",
            "type": "int",
            "rw": true
          },
          "loadOnStartup": {
            "desc": "The load-on-startup order value (negative value means load on first call) for this servlet.",
            "type": "int",
            "rw": true
          },
          "maxInstances": {
            "desc": "Maximum number of STM instances.",
            "type": "int",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "loadTime": {
            "desc": "Time taken to load and initialise the Servlet",
            "type": "long",
            "rw": false
          },
          "stateManageable": {
            "desc": "State management support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "servletClass": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": false
          },
          "classLoadTime": {
            "desc": "Time taken to load the Servlet class",
            "type": "int",
            "rw": false
          },
          "requestCount": {
            "desc": "Number of requests processed by this wrapper",
            "type": "int",
            "rw": false
          },
          "singleThreadModel": {
            "desc": "Does this servlet implement the SingleThreadModel interface?",
            "type": "boolean",
            "rw": false
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,WebModule=//localhost/,j2eeType=Filter,name=Tomcat WebSocket (JSR356) Filter": {
        "desc": "Wrapper that represents an individual servlet-filter definition",
        "attr": {
          "filterClass": {
            "desc": "Fully qualified class name of the filter object",
            "type": "java.lang.String",
            "rw": false
          },
          "filterInitParameterMap": {
            "desc": "Return the initiaization parameters associated with this filter",
            "type": "java.util.Map",
            "rw": false
          },
          "filterName": {
            "desc": "The name used to reference the filter in web.xml",
            "type": "java.lang.String",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "type=Engine": {
        "desc": "Standard Engine Component",
        "op": {
          "destroy": {
            "ret": "void",
            "desc": "Destroy",
            "args": []
          },
          "removeValve": {
            "ret": "void",
            "desc": "Remove a valve from this Engine",
            "args": [
              {
                "desc": "Objectname of the valve to be removed",
                "name": "valveName",
                "type": "java.lang.String"
              }
            ]
          },
          "stop": {
            "ret": "void",
            "desc": "Stop",
            "args": []
          },
          "removeChild": {
            "ret": "void",
            "desc": "Remove a child(Host) from this Engine",
            "args": [
              {
                "desc": "Name of the existing child Container to be removed",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "start": {
            "ret": "void",
            "desc": "Start",
            "args": []
          },
          "init": {
            "ret": "void",
            "desc": "Init",
            "args": []
          },
          "addChild": {
            "ret": "void",
            "desc": "Add a virtual host",
            "args": [
              {
                "desc": "Type(classname) of the new child to be added",
                "name": "type",
                "type": "java.lang.String"
              },
              {
                "desc": "Name of the child to be added",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "addValve": {
            "ret": "java.lang.String",
            "desc": "Add a valve to this Engine",
            "args": [
              {
                "desc": "Type(classname) of the new valve to be added",
                "name": "valveType",
                "type": "java.lang.String"
              }
            ]
          },
          "addLifecycleListener": {
            "ret": "void",
            "desc": "Add a lifecycle listener to this Engine",
            "args": [
              {
                "desc": "Type(classname) of the new lifecycle listener to be added",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "removeLifecycleListeners": {
            "ret": "void",
            "desc": "Removes lifecycle listeners of given class type from this Engine",
            "args": [
              {
                "desc": "Type(classname) of the lifecycle listeners to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "jvmRoute": {
            "desc": "Route used for load balancing",
            "type": "java.lang.String",
            "rw": true
          },
          "startChildren": {
            "desc": "Will children be started automatically when they are added.",
            "type": "boolean",
            "rw": true
          },
          "managedResource": {
            "desc": "The managed resource this MBean is associated with",
            "type": "java.lang.Object",
            "rw": true
          },
          "baseDir": {
            "desc": "Base dir for this engine, typically same as catalina.base system property",
            "type": "java.lang.String",
            "rw": true
          },
          "realm": {
            "desc": "Associated realm.",
            "type": "org.apache.catalina.Realm",
            "rw": true
          },
          "startStopThreads": {
            "desc": "The number of threads to use when starting and stopping child Hosts",
            "type": "int",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "name": {
            "desc": "Unique name of this Engine",
            "type": "java.lang.String",
            "rw": true
          },
          "defaultHost": {
            "desc": "Name of the default Host for this Engine",
            "type": "java.lang.String",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "backgroundProcessorDelay": {
            "desc": "The processor delay for this component.",
            "type": "int",
            "rw": true
          }
        }
      },
      "realmPath=/realm0,type=Realm": {
        "desc": "Realm implementation that can be used to wrap existing realms to provide a user lock-out capability",
        "op": {
          "destroy": {
            "ret": "void",
            "desc": "Destroy",
            "args": []
          },
          "stop": {
            "ret": "void",
            "desc": "Stop",
            "args": []
          },
          "unlock": {
            "ret": "void",
            "desc": "Unlock the specified user",
            "args": [
              {
                "desc": "User to unlock",
                "name": "username",
                "type": "java.lang.String"
              }
            ]
          },
          "start": {
            "ret": "void",
            "desc": "Start",
            "args": []
          },
          "init": {
            "ret": "void",
            "desc": "Init",
            "args": []
          },
          "addRealm": {
            "ret": "void",
            "desc": "Add a new Realm to the set of Realms wrapped by this realm",
            "args": [
              {
                "desc": "New Realm to add",
                "name": "theRealm",
                "type": "org.apache.catalina.Realm"
              }
            ]
          }
        },
        "attr": {
          "digestEncoding": {
            "desc": "The digest encoding charset.",
            "type": "java.lang.String",
            "rw": true
          },
          "realmPath": {
            "desc": "The realm path",
            "type": "java.lang.String",
            "rw": true
          },
          "realms": {
            "desc": "The set of realms that the lockout realm is wrapping",
            "type": "[Ljavax.management.ObjectName;",
            "rw": false
          },
          "failureCount": {
            "desc": "The number of times in a row a user has to fail authentication to be locked out. Defaults to 5.",
            "type": "int",
            "rw": true
          },
          "allRolesMode": {
            "desc": "The all roles mode.",
            "type": "java.lang.String",
            "rw": true
          },
          "digest": {
            "desc": "Digest algorithm used in storing passwords in a non-plaintext format",
            "type": "java.lang.String",
            "rw": true
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "cacheRemovalWarningTime": {
            "desc": "If a failed user is removed from the cache because the cache is too big before it has been in the cache for at least this period of time (in seconds) a warning message will be logged. Defaults to 3600 (1 hour).",
            "type": "int",
            "rw": true
          },
          "lockOutTime": {
            "desc": "The time (in seconds) a user is locked out for after too many authentication failures. Defaults to 300 (5 minutes).",
            "type": "int",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "validate": {
            "desc": "The 'validate certificate chains' flag.",
            "type": "boolean",
            "rw": true
          },
          "cacheSize": {
            "desc": "Number of users that have failed authentication to keep in cache. Over time the cache will grow to this size and may not shrink. Defaults to 1000.",
            "type": "int",
            "rw": true
          }
        }
      },
      "context=/manager,host=localhost,name=BasicAuthenticator,type=Valve": {
        "desc": "An Authenticator and Valve implementation of HTTP BASIC Authentication",
        "attr": {
          "changeSessionIdOnAuthentication": {
            "desc": "Controls if the session ID is changed if a session exists at the point where users are authenticated",
            "type": "boolean",
            "rw": true
          },
          "alwaysUseSession": {
            "desc": "Should a session always be used once a user is authenticated?",
            "type": "boolean",
            "rw": true
          },
          "secureRandomProvider": {
            "desc": "The name of the provider to use for SSO session ID generation",
            "type": "java.lang.String",
            "rw": true
          },
          "disableProxyCaching": {
            "desc": "Controls the caching of pages that are protected by security constraints",
            "type": "boolean",
            "rw": true
          },
          "cache": {
            "desc": "Should we cache authenticated Principals if the request is part of an HTTP session?",
            "type": "boolean",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "securePagesWithPragma": {
            "desc": "Controls the caching of pages that are protected by security constraints",
            "type": "boolean",
            "rw": true
          },
          "secureRandomAlgorithm": {
            "desc": "The name of the algorithm to use for SSO session ID generation",
            "type": "java.lang.String",
            "rw": true
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "secureRandomClass": {
            "desc": "The name of the class to use for SSO session ID generation",
            "type": "java.lang.String",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "port=8009,type=ProtocolHandler": {
        "desc": null,
        "op": {
          "destroy": {
            "ret": "void",
            "desc": "Introspected operation destroy",
            "args": []
          },
          "pause": {
            "ret": "void",
            "desc": "Introspected operation pause",
            "args": []
          },
          "stop": {
            "ret": "void",
            "desc": "Introspected operation stop",
            "args": []
          },
          "resume": {
            "ret": "void",
            "desc": "Introspected operation resume",
            "args": []
          },
          "start": {
            "ret": "void",
            "desc": "Introspected operation start",
            "args": []
          },
          "getProperty": {
            "ret": "java.lang.String",
            "desc": "Introspected operation getProperty",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "java.lang.String"
              }
            ]
          },
          "init": {
            "ret": "void",
            "desc": "Introspected operation init",
            "args": []
          },
          "setProperty": {
            "ret": "boolean",
            "desc": "Introspected operation setProperty",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "java.lang.String"
              },
              {
                "desc": "Introspected parameter param1",
                "name": "param1",
                "type": "java.lang.String"
              }
            ]
          },
          "postRegister": {
            "ret": "void",
            "desc": "Introspected operation postRegister",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "java.lang.Boolean"
              }
            ]
          }
        },
        "attr": {
          "port": {
            "desc": "Introspected attribute port",
            "type": "int",
            "rw": true
          },
          "tcpNoDelay": {
            "desc": "Introspected attribute tcpNoDelay",
            "type": "boolean",
            "rw": true
          },
          "requiredSecret": {
            "desc": "Introspected attribute requiredSecret",
            "type": "java.lang.String",
            "rw": false
          },
          "threadPriority": {
            "desc": "Introspected attribute threadPriority",
            "type": "int",
            "rw": true
          },
          "maxConnections": {
            "desc": "Introspected attribute maxConnections",
            "type": "int",
            "rw": true
          },
          "objectName": {
            "desc": "Introspected attribute objectName",
            "type": "javax.management.ObjectName",
            "rw": false
          },
          "minSpareThreads": {
            "desc": "Introspected attribute minSpareThreads",
            "type": "int",
            "rw": true
          },
          "soLinger": {
            "desc": "Introspected attribute soLinger",
            "type": "int",
            "rw": true
          },
          "clientCertProvider": {
            "desc": "Introspected attribute clientCertProvider",
            "type": "java.lang.String",
            "rw": true
          },
          "maxThreads": {
            "desc": "Introspected attribute maxThreads",
            "type": "int",
            "rw": true
          },
          "tomcatAuthentication": {
            "desc": "Introspected attribute tomcatAuthentication",
            "type": "boolean",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "packetSize": {
            "desc": "Introspected attribute packetSize",
            "type": "int",
            "rw": true
          },
          "processorCache": {
            "desc": "Introspected attribute processorCache",
            "type": "int",
            "rw": true
          },
          "backlog": {
            "desc": "Introspected attribute backlog",
            "type": "int",
            "rw": true
          },
          "connectionTimeout": {
            "desc": "Introspected attribute connectionTimeout",
            "type": "int",
            "rw": true
          },
          "soTimeout": {
            "desc": "Introspected attribute soTimeout",
            "type": "int",
            "rw": true
          },
          "name": {
            "desc": "Introspected attribute name",
            "type": "java.lang.String",
            "rw": false
          },
          "domain": {
            "desc": "Introspected attribute domain",
            "type": "java.lang.String",
            "rw": false
          },
          "nameIndex": {
            "desc": "Introspected attribute nameIndex",
            "type": "int",
            "rw": false
          },
          "aprRequired": {
            "desc": "Introspected attribute aprRequired",
            "type": "boolean",
            "rw": false
          },
          "localPort": {
            "desc": "Introspected attribute localPort",
            "type": "int",
            "rw": false
          },
          "maxHeaderCount": {
            "desc": "Introspected attribute maxHeaderCount",
            "type": "int",
            "rw": true
          },
          "connectionCount": {
            "desc": "Introspected attribute connectionCount",
            "type": "long",
            "rw": false
          },
          "keepAliveTimeout": {
            "desc": "Introspected attribute keepAliveTimeout",
            "type": "int",
            "rw": true
          }
        }
      },
      "name=\"ajp-bio-8009\",type=GlobalRequestProcessor": {
        "desc": null,
        "op": {
          "resetCounters": {
            "ret": "void",
            "desc": "Introspected operation resetCounters",
            "args": []
          }
        },
        "attr": {
          "bytesSent": {
            "desc": "Introspected attribute bytesSent",
            "type": "long",
            "rw": true
          },
          "bytesReceived": {
            "desc": "Introspected attribute bytesReceived",
            "type": "long",
            "rw": true
          },
          "processingTime": {
            "desc": "Introspected attribute processingTime",
            "type": "long",
            "rw": true
          },
          "errorCount": {
            "desc": "Introspected attribute errorCount",
            "type": "int",
            "rw": true
          },
          "maxTime": {
            "desc": "Introspected attribute maxTime",
            "type": "long",
            "rw": true
          },
          "requestCount": {
            "desc": "Introspected attribute requestCount",
            "type": "int",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "context=/manager,host=localhost,type=NamingResources": {
        "desc": "Holds and manages the naming resources defined in the                        J2EE Enterprise Naming Context and their associated                         JNDI context",
        "op": {
          "removeResourceLink": {
            "ret": "void",
            "desc": "Remove any resource link reference with the specified name",
            "args": [
              {
                "desc": "Name of the resource reference to remove",
                "name": "resourceLinkName",
                "type": "java.lang.String"
              }
            ]
          },
          "addEnvironment": {
            "ret": "void",
            "desc": "Add an environment entry for this web application",
            "args": [
              {
                "desc": "New environment entry name",
                "name": "envName",
                "type": "java.lang.String"
              },
              {
                "desc": "New environment entry type",
                "name": "type",
                "type": "java.lang.String"
              },
              {
                "desc": "New environment entry value",
                "name": "value",
                "type": "java.lang.String"
              }
            ]
          },
          "removeResource": {
            "ret": "void",
            "desc": "Remove any resource reference with the specified name",
            "args": [
              {
                "desc": "Name of the resource reference to remove",
                "name": "resourceName",
                "type": "java.lang.String"
              }
            ]
          },
          "removeEnvironment": {
            "ret": "void",
            "desc": "Remove any environment entry with the specified name",
            "args": [
              {
                "desc": "Name of the environment entry to remove",
                "name": "envName",
                "type": "java.lang.String"
              }
            ]
          },
          "addResourceLink": {
            "ret": "void",
            "desc": "Add a resource link reference for this web application",
            "args": [
              {
                "desc": "New resource reference name",
                "name": "resourceLinkName",
                "type": "java.lang.String"
              },
              {
                "desc": "New resource reference type",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "addResource": {
            "ret": "void",
            "desc": "Add a resource reference for this web application",
            "args": [
              {
                "desc": "New resource reference name",
                "name": "resourceName",
                "type": "java.lang.String"
              },
              {
                "desc": "New resource reference type",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "resources": {
            "desc": "MBean Names of all the defined resource references                        for this application.",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "container": {
            "desc": "The container with which the naming resources are associated.",
            "type": "java.lang.Object",
            "rw": false
          },
          "environments": {
            "desc": "MBean Names of the set of defined environment entries                        for this web application",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "resourceLinks": {
            "desc": "MBean Names of all the defined resource link references                        for this application.",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,WebModule=//localhost/manager,j2eeType=Servlet,name=Status": {
        "desc": "Wrapper that represents an individual servlet definition",
        "op": {
          "findSecurityReference": {
            "ret": "java.lang.String",
            "desc": "Return the security role link for the specified security role reference name.",
            "args": [
              {
                "desc": "Security role reference used within this servle",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "addMapping": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "removeInitParameter": {
            "ret": "void",
            "desc": "Remove the specified initialization parameter from this servlet.",
            "args": [
              {
                "desc": "Name of the initialization parameter to remove",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeSecurityReference": {
            "ret": "void",
            "desc": "Remove any security role reference for the specified role name.",
            "args": [
              {
                "desc": "Security role used within this servlet to be removeds",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "findMappingObject": {
            "ret": "org.apache.catalina.Wrapper",
            "desc": "Return an object which may be utilized for mapping to this component",
            "args": []
          },
          "addValve": {
            "ret": "java.lang.String",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new valve to be added",
                "name": "valveType",
                "type": "java.lang.String"
              }
            ]
          },
          "addLifecycleListener": {
            "ret": "void",
            "desc": "Add a lifecycle listener to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new lifecycle listener to be added",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "removeLifecycleListeners": {
            "ret": "void",
            "desc": "Removes lifecycle listeners of given class type from this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the lifecycle listeners to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "removeValve": {
            "ret": "void",
            "desc": "Remove a valve from this Wrapper",
            "args": [
              {
                "desc": "Objectname of the valve to be removed",
                "name": "valveName",
                "type": "java.lang.String"
              }
            ]
          },
          "addSecurityReference": {
            "ret": "void",
            "desc": "Add a new security role reference record to the set of records for this servlet.",
            "args": [
              {
                "desc": "Role name used within this servlet",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Role name used within the web application",
                "name": "link",
                "type": "java.lang.String"
              }
            ]
          },
          "addInitParameter": {
            "ret": "void",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Name of this initialization parameter to add",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Value of this initialization parameter to add",
                "name": "value",
                "type": "java.lang.String"
              }
            ]
          },
          "findInitParameters": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the names of all defined initialization parameters for this servlet.",
            "args": []
          },
          "removeMapping": {
            "ret": "void",
            "desc": "Remove a mapping associated with the wrapper.",
            "args": [
              {
                "desc": "The pattern to remove",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "findSecurityReferences": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of security role reference names associated with this servlet",
            "args": []
          },
          "findMappings": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the mappings associated with this wrapper",
            "args": []
          },
          "findInitParameter": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "minTime": {
            "desc": "Minimum processing time of a request",
            "type": "long",
            "rw": false
          },
          "runAs": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": true
          },
          "countAllocated": {
            "desc": "The count of allocations that are currently active (even if they  are for the same instance, as will be true on a non-STM servlet).",
            "type": "int",
            "rw": false
          },
          "eventProvider": {
            "desc": "Event provider support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "statisticsProvider": {
            "desc": "Performance statistics support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "objectName": {
            "desc": "Name of the object",
            "type": "java.lang.String",
            "rw": true
          },
          "processingTime": {
            "desc": "Total execution time of the servlet's service method",
            "type": "long",
            "rw": false
          },
          "errorCount": {
            "desc": "Error count",
            "type": "int",
            "rw": false
          },
          "maxTime": {
            "desc": "Maximum processing time of a request",
            "type": "long",
            "rw": false
          },
          "available": {
            "desc": "The date and time at which this servlet will become available (in milliseconds since the epoch), or zero if the servlet is available. If this value equals Long.MAX_VALUE, the unavailability of this servlet is considered permanent.",
            "type": "long",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "asyncSupported": {
            "desc": "Async support",
            "type": "boolean",
            "rw": true
          },
          "backgroundProcessorDelay": {
            "desc": "The processor delay for this component.",
            "type": "int",
            "rw": true
          },
          "loadOnStartup": {
            "desc": "The load-on-startup order value (negative value means load on first call) for this servlet.",
            "type": "int",
            "rw": true
          },
          "maxInstances": {
            "desc": "Maximum number of STM instances.",
            "type": "int",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "loadTime": {
            "desc": "Time taken to load and initialise the Servlet",
            "type": "long",
            "rw": false
          },
          "stateManageable": {
            "desc": "State management support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "servletClass": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": false
          },
          "classLoadTime": {
            "desc": "Time taken to load the Servlet class",
            "type": "int",
            "rw": false
          },
          "requestCount": {
            "desc": "Number of requests processed by this wrapper",
            "type": "int",
            "rw": false
          },
          "singleThreadModel": {
            "desc": "Does this servlet implement the SingleThreadModel interface?",
            "type": "boolean",
            "rw": false
          }
        }
      },
      "name=StandardEngineValve,type=Valve": {
        "desc": "Valve that implements the default basic behavior for the          StandardEngine container implementation",
        "attr": {
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "asyncSupported": {
            "desc": "Does this valve support async reporting?",
            "type": "boolean",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,WebModule=//localhost/manager,j2eeType=Servlet,name=Manager": {
        "desc": "Wrapper that represents an individual servlet definition",
        "op": {
          "findSecurityReference": {
            "ret": "java.lang.String",
            "desc": "Return the security role link for the specified security role reference name.",
            "args": [
              {
                "desc": "Security role reference used within this servle",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "addMapping": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "removeInitParameter": {
            "ret": "void",
            "desc": "Remove the specified initialization parameter from this servlet.",
            "args": [
              {
                "desc": "Name of the initialization parameter to remove",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeSecurityReference": {
            "ret": "void",
            "desc": "Remove any security role reference for the specified role name.",
            "args": [
              {
                "desc": "Security role used within this servlet to be removeds",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "findMappingObject": {
            "ret": "org.apache.catalina.Wrapper",
            "desc": "Return an object which may be utilized for mapping to this component",
            "args": []
          },
          "addValve": {
            "ret": "java.lang.String",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new valve to be added",
                "name": "valveType",
                "type": "java.lang.String"
              }
            ]
          },
          "addLifecycleListener": {
            "ret": "void",
            "desc": "Add a lifecycle listener to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new lifecycle listener to be added",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "removeLifecycleListeners": {
            "ret": "void",
            "desc": "Removes lifecycle listeners of given class type from this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the lifecycle listeners to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "removeValve": {
            "ret": "void",
            "desc": "Remove a valve from this Wrapper",
            "args": [
              {
                "desc": "Objectname of the valve to be removed",
                "name": "valveName",
                "type": "java.lang.String"
              }
            ]
          },
          "addSecurityReference": {
            "ret": "void",
            "desc": "Add a new security role reference record to the set of records for this servlet.",
            "args": [
              {
                "desc": "Role name used within this servlet",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Role name used within the web application",
                "name": "link",
                "type": "java.lang.String"
              }
            ]
          },
          "addInitParameter": {
            "ret": "void",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Name of this initialization parameter to add",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Value of this initialization parameter to add",
                "name": "value",
                "type": "java.lang.String"
              }
            ]
          },
          "findInitParameters": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the names of all defined initialization parameters for this servlet.",
            "args": []
          },
          "removeMapping": {
            "ret": "void",
            "desc": "Remove a mapping associated with the wrapper.",
            "args": [
              {
                "desc": "The pattern to remove",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "findSecurityReferences": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of security role reference names associated with this servlet",
            "args": []
          },
          "findMappings": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the mappings associated with this wrapper",
            "args": []
          },
          "findInitParameter": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "minTime": {
            "desc": "Minimum processing time of a request",
            "type": "long",
            "rw": false
          },
          "runAs": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": true
          },
          "countAllocated": {
            "desc": "The count of allocations that are currently active (even if they  are for the same instance, as will be true on a non-STM servlet).",
            "type": "int",
            "rw": false
          },
          "eventProvider": {
            "desc": "Event provider support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "statisticsProvider": {
            "desc": "Performance statistics support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "objectName": {
            "desc": "Name of the object",
            "type": "java.lang.String",
            "rw": true
          },
          "processingTime": {
            "desc": "Total execution time of the servlet's service method",
            "type": "long",
            "rw": false
          },
          "errorCount": {
            "desc": "Error count",
            "type": "int",
            "rw": false
          },
          "maxTime": {
            "desc": "Maximum processing time of a request",
            "type": "long",
            "rw": false
          },
          "available": {
            "desc": "The date and time at which this servlet will become available (in milliseconds since the epoch), or zero if the servlet is available. If this value equals Long.MAX_VALUE, the unavailability of this servlet is considered permanent.",
            "type": "long",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "asyncSupported": {
            "desc": "Async support",
            "type": "boolean",
            "rw": true
          },
          "backgroundProcessorDelay": {
            "desc": "The processor delay for this component.",
            "type": "int",
            "rw": true
          },
          "loadOnStartup": {
            "desc": "The load-on-startup order value (negative value means load on first call) for this servlet.",
            "type": "int",
            "rw": true
          },
          "maxInstances": {
            "desc": "Maximum number of STM instances.",
            "type": "int",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "loadTime": {
            "desc": "Time taken to load and initialise the Servlet",
            "type": "long",
            "rw": false
          },
          "stateManageable": {
            "desc": "State management support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "servletClass": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": false
          },
          "classLoadTime": {
            "desc": "Time taken to load the Servlet class",
            "type": "int",
            "rw": false
          },
          "requestCount": {
            "desc": "Number of requests processed by this wrapper",
            "type": "int",
            "rw": false
          },
          "singleThreadModel": {
            "desc": "Does this servlet implement the SingleThreadModel interface?",
            "type": "boolean",
            "rw": false
          }
        }
      },
      "type=StringCache": {
        "desc": null,
        "op": {
          "reset": {
            "ret": "void",
            "desc": "Introspected operation reset",
            "args": []
          }
        },
        "attr": {
          "trainThreshold": {
            "desc": "Introspected attribute trainThreshold",
            "type": "int",
            "rw": true
          },
          "charEnabled": {
            "desc": "Introspected attribute charEnabled",
            "type": "boolean",
            "rw": true
          },
          "byteEnabled": {
            "desc": "Introspected attribute byteEnabled",
            "type": "boolean",
            "rw": true
          },
          "hitCount": {
            "desc": "Introspected attribute hitCount",
            "type": "int",
            "rw": false
          },
          "accessCount": {
            "desc": "Introspected attribute accessCount",
            "type": "int",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "cacheSize": {
            "desc": "Introspected attribute cacheSize",
            "type": "int",
            "rw": true
          }
        }
      },
      "class=org.apache.catalina.UserDatabase,name=\"UserDatabase\",resourcetype=Global,type=Resource": {
        "desc": "Representation of a resource reference for a web application",
        "attr": {
          "scope": {
            "desc": "The sharing scope of this resource factory",
            "type": "java.lang.String",
            "rw": true
          },
          "description": {
            "desc": "The description of this resource",
            "type": "java.lang.String",
            "rw": true
          },
          "name": {
            "desc": "The name of this resource",
            "type": "java.lang.String",
            "rw": true
          },
          "type": {
            "desc": "The type of this environment entry",
            "type": "java.lang.String",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "auth": {
            "desc": "The authorization requirement for this resource",
            "type": "java.lang.String",
            "rw": true
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,WebModule=//localhost/,name=jsp,type=JspMonitor": {
        "desc": "JSP Monitoring",
        "attr": {
          "jspUnloadCount": {
            "desc": "The number of JSPs that have been unloaded",
            "type": "int",
            "rw": true
          },
          "jspCount": {
            "desc": "The number of JSPs that have been loaded into a webapp",
            "type": "int",
            "rw": false
          },
          "jspReloadCount": {
            "desc": "The number of JSPs that have been reloaded",
            "type": "int",
            "rw": true
          },
          "jspQueueLength": {
            "desc": "The length of the JSP queue (if enabled via maxLoadedJsps)",
            "type": "int",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "name=HttpRequest5,type=RequestProcessor,worker=\"http-bio-8080\"": {
        "desc": null,
        "attr": {
          "requestProcessingTime": {
            "desc": "Introspected attribute requestProcessingTime",
            "type": "long",
            "rw": false
          },
          "protocol": {
            "desc": "Introspected attribute protocol",
            "type": "java.lang.String",
            "rw": false
          },
          "bytesSent": {
            "desc": "Introspected attribute bytesSent",
            "type": "long",
            "rw": true
          },
          "rpName": {
            "desc": "Introspected attribute rpName",
            "type": "javax.management.ObjectName",
            "rw": true
          },
          "processingTime": {
            "desc": "Introspected attribute processingTime",
            "type": "long",
            "rw": true
          },
          "currentQueryString": {
            "desc": "Introspected attribute currentQueryString",
            "type": "java.lang.String",
            "rw": false
          },
          "requestBytesReceived": {
            "desc": "Introspected attribute requestBytesReceived",
            "type": "long",
            "rw": false
          },
          "errorCount": {
            "desc": "Introspected attribute errorCount",
            "type": "int",
            "rw": true
          },
          "maxTime": {
            "desc": "Introspected attribute maxTime",
            "type": "long",
            "rw": true
          },
          "maxRequestUri": {
            "desc": "Introspected attribute maxRequestUri",
            "type": "java.lang.String",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "stage": {
            "desc": "Introspected attribute stage",
            "type": "int",
            "rw": true
          },
          "lastRequestProcessingTime": {
            "desc": "Introspected attribute lastRequestProcessingTime",
            "type": "long",
            "rw": true
          },
          "globalProcessor": {
            "desc": "Introspected attribute globalProcessor",
            "type": "org.apache.coyote.RequestGroupInfo",
            "rw": true
          },
          "virtualHost": {
            "desc": "Introspected attribute virtualHost",
            "type": "java.lang.String",
            "rw": false
          },
          "serverPort": {
            "desc": "Introspected attribute serverPort",
            "type": "int",
            "rw": false
          },
          "bytesReceived": {
            "desc": "Introspected attribute bytesReceived",
            "type": "long",
            "rw": true
          },
          "currentUri": {
            "desc": "Introspected attribute currentUri",
            "type": "java.lang.String",
            "rw": false
          },
          "workerThreadName": {
            "desc": "Introspected attribute workerThreadName",
            "type": "java.lang.String",
            "rw": true
          },
          "remoteAddrForwarded": {
            "desc": "Introspected attribute remoteAddrForwarded",
            "type": "java.lang.String",
            "rw": false
          },
          "method": {
            "desc": "Introspected attribute method",
            "type": "java.lang.String",
            "rw": false
          },
          "requestCount": {
            "desc": "Introspected attribute requestCount",
            "type": "int",
            "rw": true
          },
          "requestBytesSent": {
            "desc": "Introspected attribute requestBytesSent",
            "type": "long",
            "rw": false
          },
          "contentLength": {
            "desc": "Introspected attribute contentLength",
            "type": "int",
            "rw": false
          },
          "remoteAddr": {
            "desc": "Introspected attribute remoteAddr",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "host=localhost,type=Host": {
        "desc": "Standard Host Component",
        "op": {
          "stop": {
            "ret": "void",
            "desc": "Stop",
            "args": []
          },
          "init": {
            "ret": "void",
            "desc": "Init",
            "args": []
          },
          "addLifecycleListener": {
            "ret": "void",
            "desc": "Add a lifecycle listener to this Host",
            "args": [
              {
                "desc": "Type(classname) of the new lifecycle listener to be added",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "addValve": {
            "ret": "java.lang.String",
            "desc": "Add a valve to this Host",
            "args": [
              {
                "desc": "Type(classname) of the new valve to be added",
                "name": "valveType",
                "type": "java.lang.String"
              }
            ]
          },
          "findReloadedContextMemoryLeaks": {
            "ret": "[Ljava.lang.String;",
            "desc": "Provide a list of contexts that have leaked memory on reload. This will attempt to force a full garbage collection. Use with extreme caution on production systems.",
            "args": []
          },
          "removeLifecycleListeners": {
            "ret": "void",
            "desc": "Removes lifecycle listeners of given class type from this Host",
            "args": [
              {
                "desc": "Type(classname) of the lifecycle listeners to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "addAlias": {
            "ret": "void",
            "desc": "Add an alias name that should be mapped to this Host",
            "args": [
              {
                "desc": "The alias to be added",
                "name": "alias",
                "type": "java.lang.String"
              }
            ]
          },
          "destroy": {
            "ret": "void",
            "desc": "Destroy",
            "args": []
          },
          "removeValve": {
            "ret": "void",
            "desc": "Remove a valve from this Host",
            "args": [
              {
                "desc": "Objectname of the valve to be removed",
                "name": "valveName",
                "type": "java.lang.String"
              }
            ]
          },
          "removeChild": {
            "ret": "void",
            "desc": "Remove a child(Context) from this Host",
            "args": [
              {
                "desc": "Name of the existing child Container to be removed",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "start": {
            "ret": "void",
            "desc": "Start",
            "args": []
          },
          "removeAlias": {
            "ret": "void",
            "desc": "Remove the specified alias name from the aliases for this  Host",
            "args": [
              {
                "desc": "Alias name to be removed",
                "name": "alias",
                "type": "java.lang.String"
              }
            ]
          },
          "addChild": {
            "ret": "void",
            "desc": "Add a child(Context) to this Host",
            "args": [
              {
                "desc": "Type(classname) of the new child to be added",
                "name": "type",
                "type": "java.lang.String"
              },
              {
                "desc": "Name of the child to be added",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "findAliases": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of alias names for this Host",
            "args": []
          }
        },
        "attr": {
          "managedResource": {
            "desc": "The managed resource this MBean is associated with",
            "type": "java.lang.Object",
            "rw": true
          },
          "deployOnStartup": {
            "desc": "The deploy on startup flag for this Host",
            "type": "boolean",
            "rw": true
          },
          "workDir": {
            "desc": "Work Directory base for applications",
            "type": "java.lang.String",
            "rw": true
          },
          "copyXML": {
            "desc": "Should XML files be copied to $CATALINA_BASE/conf/{engine}/{host} by default when a web application is deployed?",
            "type": "boolean",
            "rw": true
          },
          "deployXML": {
            "desc": "deploy Context XML config files property",
            "type": "boolean",
            "rw": true
          },
          "startStopThreads": {
            "desc": "The number of threads to use when starting, stopping and deploying child Contexts",
            "type": "int",
            "rw": true
          },
          "autoDeploy": {
            "desc": "The auto deploy flag for this Host",
            "type": "boolean",
            "rw": true
          },
          "children": {
            "desc": "Object names of all children",
            "type": "[Ljavax.management.ObjectName;",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "aliases": {
            "desc": "Host aliases",
            "type": "[Ljava.lang.String;",
            "rw": true
          },
          "xmlBase": {
            "desc": "The XML root for this Host.",
            "type": "java.lang.String",
            "rw": true
          },
          "backgroundProcessorDelay": {
            "desc": "The processor delay for this component.",
            "type": "int",
            "rw": true
          },
          "createDirs": {
            "desc": "Should we create directories upon startup for appBase and xmlBase? ",
            "type": "boolean",
            "rw": true
          },
          "startChildren": {
            "desc": "Will children be started automatically when they are added?",
            "type": "boolean",
            "rw": true
          },
          "errorReportValveClass": {
            "desc": "The Java class name of the default error reporter implementation class for deployed web applications.",
            "type": "java.lang.String",
            "rw": false
          },
          "realm": {
            "desc": "Associated realm.",
            "type": "org.apache.catalina.Realm",
            "rw": true
          },
          "name": {
            "desc": "Unique name of this Host",
            "type": "java.lang.String",
            "rw": true
          },
          "configClass": {
            "desc": "The configuration class for contexts",
            "type": "java.lang.String",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "unpackWARs": {
            "desc": "Unpack WARs property",
            "type": "boolean",
            "rw": true
          },
          "contextClass": {
            "desc": "The Java class name of the default Context implementation class for deployed web applications.",
            "type": "java.lang.String",
            "rw": false
          },
          "appBase": {
            "desc": "The application root for this Host",
            "type": "java.lang.String",
            "rw": true
          },
          "undeployOldVersions": {
            "desc": "Determines if old versions of applications deployed using parallel deployment are automatically undeployed when no longer used. Requires autoDeploy to be enabled.",
            "type": "boolean",
            "rw": true
          },
          "valveNames": {
            "desc": "Return the MBean Names of the Valves associated with this Host",
            "type": "[Ljava.lang.String;",
            "rw": true
          },
          "deployIgnore": {
            "desc": "Paths within appBase ignored for automatic deployment",
            "type": "java.lang.String",
            "rw": true
          }
        }
      },
      "name=\"http-bio-8080\",type=ThreadPool": {
        "desc": null,
        "op": {
          "stop": {
            "ret": "void",
            "desc": "Introspected operation stop",
            "args": []
          },
          "adjustRelativePath": {
            "ret": "java.lang.String",
            "desc": "Introspected operation adjustRelativePath",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "java.lang.String"
              },
              {
                "desc": "Introspected parameter param1",
                "name": "param1",
                "type": "java.lang.String"
              }
            ]
          },
          "unbind": {
            "ret": "void",
            "desc": "Introspected operation unbind",
            "args": []
          },
          "init": {
            "ret": "void",
            "desc": "Introspected operation init",
            "args": []
          },
          "setProperty": {
            "ret": "boolean",
            "desc": "Introspected operation setProperty",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "java.lang.String"
              },
              {
                "desc": "Introspected parameter param1",
                "name": "param1",
                "type": "java.lang.String"
              }
            ]
          },
          "shutdownExecutor": {
            "ret": "void",
            "desc": "Introspected operation shutdownExecutor",
            "args": []
          },
          "getAttribute": {
            "ret": "java.lang.Object",
            "desc": "Introspected operation getAttribute",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "java.lang.String"
              }
            ]
          },
          "pause": {
            "ret": "void",
            "desc": "Introspected operation pause",
            "args": []
          },
          "destroy": {
            "ret": "void",
            "desc": "Introspected operation destroy",
            "args": []
          },
          "resume": {
            "ret": "void",
            "desc": "Introspected operation resume",
            "args": []
          },
          "startInternal": {
            "ret": "void",
            "desc": "Introspected operation startInternal",
            "args": []
          },
          "start": {
            "ret": "void",
            "desc": "Introspected operation start",
            "args": []
          },
          "createExecutor": {
            "ret": "void",
            "desc": "Introspected operation createExecutor",
            "args": []
          },
          "getProperty": {
            "ret": "java.lang.String",
            "desc": "Introspected operation getProperty",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "java.lang.String"
              }
            ]
          },
          "stopInternal": {
            "ret": "void",
            "desc": "Introspected operation stopInternal",
            "args": []
          },
          "bind": {
            "ret": "void",
            "desc": "Introspected operation bind",
            "args": []
          }
        },
        "attr": {
          "useSendfile": {
            "desc": "Introspected attribute useSendfile",
            "type": "boolean",
            "rw": false
          },
          "acceptorThreadPriority": {
            "desc": "Introspected attribute acceptorThreadPriority",
            "type": "int",
            "rw": true
          },
          "minSpareThreads": {
            "desc": "Introspected attribute minSpareThreads",
            "type": "int",
            "rw": true
          },
          "maxThreads": {
            "desc": "Introspected attribute maxThreads",
            "type": "int",
            "rw": true
          },
          "sSLEnabled": {
            "desc": "Introspected attribute sSLEnabled",
            "type": "boolean",
            "rw": true
          },
          "keystorePass": {
            "desc": "Introspected attribute keystorePass",
            "type": "java.lang.String",
            "rw": true
          },
          "localPort": {
            "desc": "Introspected attribute localPort",
            "type": "int",
            "rw": false
          },
          "connectionCount": {
            "desc": "Introspected attribute connectionCount",
            "type": "long",
            "rw": false
          },
          "currentThreadCount": {
            "desc": "Introspected attribute currentThreadCount",
            "type": "int",
            "rw": false
          },
          "keepAliveTimeout": {
            "desc": "Introspected attribute keepAliveTimeout",
            "type": "int",
            "rw": true
          },
          "threadPriority": {
            "desc": "Introspected attribute threadPriority",
            "type": "int",
            "rw": true
          },
          "keyPass": {
            "desc": "Introspected attribute keyPass",
            "type": "java.lang.String",
            "rw": true
          },
          "useComet": {
            "desc": "Introspected attribute useComet",
            "type": "boolean",
            "rw": false
          },
          "soLinger": {
            "desc": "Introspected attribute soLinger",
            "type": "int",
            "rw": true
          },
          "sslEnabledProtocolsArray": {
            "desc": "Introspected attribute sslEnabledProtocolsArray",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "socketProperties": {
            "desc": "Introspected attribute socketProperties",
            "type": "org.apache.tomcat.util.net.SocketProperties",
            "rw": false
          },
          "bindOnInit": {
            "desc": "Introspected attribute bindOnInit",
            "type": "boolean",
            "rw": true
          },
          "backlog": {
            "desc": "Introspected attribute backlog",
            "type": "int",
            "rw": true
          },
          "truststoreType": {
            "desc": "Introspected attribute truststoreType",
            "type": "java.lang.String",
            "rw": true
          },
          "sessionCacheSize": {
            "desc": "Introspected attribute sessionCacheSize",
            "type": "java.lang.String",
            "rw": true
          },
          "port": {
            "desc": "Introspected attribute port",
            "type": "int",
            "rw": true
          },
          "usePolling": {
            "desc": "Introspected attribute usePolling",
            "type": "boolean",
            "rw": false
          },
          "truststorePass": {
            "desc": "Introspected attribute truststorePass",
            "type": "java.lang.String",
            "rw": true
          },
          "deferAccept": {
            "desc": "Introspected attribute deferAccept",
            "type": "boolean",
            "rw": false
          },
          "truststoreAlgorithm": {
            "desc": "Introspected attribute truststoreAlgorithm",
            "type": "java.lang.String",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "running": {
            "desc": "Introspected attribute running",
            "type": "boolean",
            "rw": false
          },
          "ciphers": {
            "desc": "Introspected attribute ciphers",
            "type": "java.lang.String",
            "rw": true
          },
          "algorithm": {
            "desc": "Introspected attribute algorithm",
            "type": "java.lang.String",
            "rw": true
          },
          "executorTerminationTimeoutMillis": {
            "desc": "Introspected attribute executorTerminationTimeoutMillis",
            "type": "long",
            "rw": true
          },
          "sslEnabledProtocols": {
            "desc": "Introspected attribute sslEnabledProtocols",
            "type": "java.lang.String",
            "rw": false
          },
          "useCometTimeout": {
            "desc": "Introspected attribute useCometTimeout",
            "type": "boolean",
            "rw": false
          },
          "name": {
            "desc": "Introspected attribute name",
            "type": "java.lang.String",
            "rw": true
          },
          "keystoreProvider": {
            "desc": "Introspected attribute keystoreProvider",
            "type": "java.lang.String",
            "rw": true
          },
          "truststoreProvider": {
            "desc": "Introspected attribute truststoreProvider",
            "type": "java.lang.String",
            "rw": true
          },
          "allowUnsafeLegacyRenegotiation": {
            "desc": "Introspected attribute allowUnsafeLegacyRenegotiation",
            "type": "java.lang.String",
            "rw": true
          },
          "maxHeaderCount": {
            "desc": "Introspected attribute maxHeaderCount",
            "type": "int",
            "rw": true
          },
          "clientAuth": {
            "desc": "Introspected attribute clientAuth",
            "type": "java.lang.String",
            "rw": true
          },
          "tcpNoDelay": {
            "desc": "Introspected attribute tcpNoDelay",
            "type": "boolean",
            "rw": true
          },
          "maxConnections": {
            "desc": "Introspected attribute maxConnections",
            "type": "int",
            "rw": true
          },
          "keystoreType": {
            "desc": "Introspected attribute keystoreType",
            "type": "java.lang.String",
            "rw": true
          },
          "maxKeepAliveRequests": {
            "desc": "Introspected attribute maxKeepAliveRequests",
            "type": "int",
            "rw": true
          },
          "crlFile": {
            "desc": "Introspected attribute crlFile",
            "type": "java.lang.String",
            "rw": true
          },
          "paused": {
            "desc": "Introspected attribute paused",
            "type": "boolean",
            "rw": false
          },
          "keystoreFile": {
            "desc": "Introspected attribute keystoreFile",
            "type": "java.lang.String",
            "rw": true
          },
          "trustMaxCertLength": {
            "desc": "Introspected attribute trustMaxCertLength",
            "type": "java.lang.String",
            "rw": true
          },
          "sessionTimeout": {
            "desc": "Introspected attribute sessionTimeout",
            "type": "java.lang.String",
            "rw": true
          },
          "sslProtocol": {
            "desc": "Introspected attribute sslProtocol",
            "type": "java.lang.String",
            "rw": true
          },
          "acceptorThreadCount": {
            "desc": "Introspected attribute acceptorThreadCount",
            "type": "int",
            "rw": true
          },
          "soTimeout": {
            "desc": "Introspected attribute soTimeout",
            "type": "int",
            "rw": true
          },
          "currentThreadsBusy": {
            "desc": "Introspected attribute currentThreadsBusy",
            "type": "int",
            "rw": false
          },
          "truststoreFile": {
            "desc": "Introspected attribute truststoreFile",
            "type": "java.lang.String",
            "rw": true
          },
          "keyAlias": {
            "desc": "Introspected attribute keyAlias",
            "type": "java.lang.String",
            "rw": true
          },
          "trustManagerClassName": {
            "desc": "Introspected attribute trustManagerClassName",
            "type": "java.lang.String",
            "rw": true
          },
          "daemon": {
            "desc": "Introspected attribute daemon",
            "type": "boolean",
            "rw": true
          }
        }
      },
      "name=AjpRequest1,type=RequestProcessor,worker=\"ajp-bio-8009\"": {
        "desc": null,
        "attr": {
          "requestProcessingTime": {
            "desc": "Introspected attribute requestProcessingTime",
            "type": "long",
            "rw": false
          },
          "protocol": {
            "desc": "Introspected attribute protocol",
            "type": "java.lang.String",
            "rw": false
          },
          "bytesSent": {
            "desc": "Introspected attribute bytesSent",
            "type": "long",
            "rw": true
          },
          "rpName": {
            "desc": "Introspected attribute rpName",
            "type": "javax.management.ObjectName",
            "rw": true
          },
          "processingTime": {
            "desc": "Introspected attribute processingTime",
            "type": "long",
            "rw": true
          },
          "currentQueryString": {
            "desc": "Introspected attribute currentQueryString",
            "type": "java.lang.String",
            "rw": false
          },
          "requestBytesReceived": {
            "desc": "Introspected attribute requestBytesReceived",
            "type": "long",
            "rw": false
          },
          "errorCount": {
            "desc": "Introspected attribute errorCount",
            "type": "int",
            "rw": true
          },
          "maxTime": {
            "desc": "Introspected attribute maxTime",
            "type": "long",
            "rw": true
          },
          "maxRequestUri": {
            "desc": "Introspected attribute maxRequestUri",
            "type": "java.lang.String",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "stage": {
            "desc": "Introspected attribute stage",
            "type": "int",
            "rw": true
          },
          "lastRequestProcessingTime": {
            "desc": "Introspected attribute lastRequestProcessingTime",
            "type": "long",
            "rw": true
          },
          "globalProcessor": {
            "desc": "Introspected attribute globalProcessor",
            "type": "org.apache.coyote.RequestGroupInfo",
            "rw": true
          },
          "virtualHost": {
            "desc": "Introspected attribute virtualHost",
            "type": "java.lang.String",
            "rw": false
          },
          "serverPort": {
            "desc": "Introspected attribute serverPort",
            "type": "int",
            "rw": false
          },
          "bytesReceived": {
            "desc": "Introspected attribute bytesReceived",
            "type": "long",
            "rw": true
          },
          "currentUri": {
            "desc": "Introspected attribute currentUri",
            "type": "java.lang.String",
            "rw": false
          },
          "workerThreadName": {
            "desc": "Introspected attribute workerThreadName",
            "type": "java.lang.String",
            "rw": true
          },
          "remoteAddrForwarded": {
            "desc": "Introspected attribute remoteAddrForwarded",
            "type": "java.lang.String",
            "rw": false
          },
          "method": {
            "desc": "Introspected attribute method",
            "type": "java.lang.String",
            "rw": false
          },
          "requestCount": {
            "desc": "Introspected attribute requestCount",
            "type": "int",
            "rw": true
          },
          "requestBytesSent": {
            "desc": "Introspected attribute requestBytesSent",
            "type": "long",
            "rw": false
          },
          "contentLength": {
            "desc": "Introspected attribute contentLength",
            "type": "int",
            "rw": false
          },
          "remoteAddr": {
            "desc": "Introspected attribute remoteAddr",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,j2eeType=WebModule,name=//localhost/": {
        "desc": "Standard Context Component",
        "op": {
          "findSecurityRole": {
            "ret": "boolean",
            "desc": "Return 'true' if the specified security role is defined for this application; otherwise return 'false'.",
            "args": [
              {
                "desc": "Security role to verify",
                "name": "role",
                "type": "java.lang.String"
              }
            ]
          },
          "findApplicationListeners": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of application listener class names configured for this application.",
            "args": []
          },
          "addParameter": {
            "ret": "void",
            "desc": "Add a new context initialization parameter, replacing any existing value for the specified name.",
            "args": [
              {
                "desc": "Name of the new parameter",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Value of the new  parameter",
                "name": "value",
                "type": "java.lang.String"
              }
            ]
          },
          "addValve": {
            "ret": "java.lang.String",
            "desc": "Add a valve to this Context",
            "args": [
              {
                "desc": "Type(classname) of the new valve to be added",
                "name": "valveType",
                "type": "java.lang.String"
              }
            ]
          },
          "removeWrapperListener": {
            "ret": "void",
            "desc": "Remove a class name from the set of ContainerListener classes that will be added to newly created Wrappers.",
            "args": [
              {
                "desc": "Class name of a ContainerListener class to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "addApplicationParameter": {
            "ret": "void",
            "desc": "Add a new application parameter for this application.",
            "args": [
              {
                "desc": "Java class name of a listener class",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "addRoleMapping": {
            "ret": "void",
            "desc": "Add a security role reference for this web application.",
            "args": [
              {
                "desc": "Security role used in the application",
                "name": "role",
                "type": "java.lang.String"
              },
              {
                "desc": "Actual security role to check for",
                "name": "link",
                "type": "java.lang.String"
              }
            ]
          },
          "removeWatchedResource": {
            "ret": "void",
            "desc": "Remove the specified watched resource name from the list associated with this Context.",
            "args": [
              {
                "desc": "Name of the watched resource to be removed",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeValve": {
            "ret": "void",
            "desc": "Remove a valve from this Context",
            "args": [
              {
                "desc": "Objectname of the valve to be removed",
                "name": "valveName",
                "type": "java.lang.String"
              }
            ]
          },
          "addSecurityRole": {
            "ret": "void",
            "desc": "Add a new security role for this web application.",
            "args": [
              {
                "desc": "New security role",
                "name": "role",
                "type": "java.lang.String"
              }
            ]
          },
          "findInstanceListeners": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of InstanceListener classes that will be added to newly created Wrappers automatically.",
            "args": []
          },
          "findFilterDefs": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of defined filters for this Context.",
            "args": []
          },
          "findMimeMapping": {
            "ret": "java.lang.String",
            "desc": "Return the MIME type to which the specified extension is mapped, if any; otherwise return null.",
            "args": [
              {
                "desc": "Extension to map to a MIME type",
                "name": "extension",
                "type": "java.lang.String"
              }
            ]
          },
          "removeApplicationListener": {
            "ret": "void",
            "desc": "Remove the specified application listener class from the set of listeners for this application.",
            "args": [
              {
                "desc": "Java class name of the listener to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "findStatusPages": {
            "ret": "[Lint",
            "desc": "Return the set of HTTP status codes for which error pages have been specified.",
            "args": []
          },
          "findContainerListenerNames": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of container listener class names configured for this application.",
            "args": []
          },
          "findSecurityRoles": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the security roles defined for this application.",
            "args": []
          },
          "findStatusPage": {
            "ret": "java.lang.String",
            "desc": "Return the context-relative URI of the error page for the specified HTTP status code.",
            "args": [
              {
                "desc": "HTTP status code to look up",
                "name": "status",
                "type": "int"
              }
            ]
          },
          "addWatchedResource": {
            "ret": "void",
            "desc": " Add a resource which will be watched for reloading by the host auto deployer.",
            "args": [
              {
                "desc": "Path to the resource, either absolute or relative to docBase",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "init": {
            "ret": "void",
            "desc": "Register the context into the running server",
            "args": []
          },
          "findWrapperLifecycles": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of LifecycleListener classes that will be added to newly created Wrappers automatically.",
            "args": []
          },
          "removeRoleMapping": {
            "ret": "void",
            "desc": "Remove any security role reference for the specified name",
            "args": [
              {
                "desc": "Security role (as used in the application) to remove",
                "name": "role",
                "type": "java.lang.String"
              }
            ]
          },
          "removeLifecycleListeners": {
            "ret": "void",
            "desc": "Removes lifecycle listeners of given class type from this Context",
            "args": [
              {
                "desc": "Type(classname) of the lifecycle listeners to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "findErrorPages": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of defined error pages for all specified error codes and exception types.",
            "args": []
          },
          "removeChild": {
            "ret": "void",
            "desc": "Remove a child from this Context",
            "args": [
              {
                "desc": "Name of the existing child Container to be removed",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "findParameter": {
            "ret": "java.lang.String",
            "desc": "Return the value for the specified context initialization parameter name, if any; otherwise return null.",
            "args": [
              {
                "desc": "Name of the parameter to return",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "start": {
            "ret": "void",
            "desc": "Start",
            "args": []
          },
          "addChild": {
            "ret": "void",
            "desc": "Add a child to this Context",
            "args": [
              {
                "desc": "Type(classname) of the new child to be added",
                "name": "type",
                "type": "java.lang.String"
              },
              {
                "desc": "Name of the child to be added",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "addMimeMapping": {
            "ret": "void",
            "desc": "Add a new MIME mapping, replacing any existing mapping for the specified extension.",
            "args": [
              {
                "desc": "Filename extension being mapped",
                "name": "extension",
                "type": "java.lang.String"
              },
              {
                "desc": "Corresponding MIME type",
                "name": "mimeType",
                "type": "java.lang.String"
              }
            ]
          },
          "findErrorPage": [
            {
              "ret": "java.lang.String",
              "desc": "Return the error page entry for the specified HTTP error code, if any; otherwise return null",
              "args": [
                {
                  "desc": "Error code to look up",
                  "name": "errorCode",
                  "type": "int"
                }
              ]
            },
            {
              "ret": "java.lang.String",
              "desc": "Return the error page entry for the specified Java exception type, if any; otherwise return null.",
              "args": [
                {
                  "desc": "Exception type to look up",
                  "name": "exceptionType",
                  "type": "java.lang.String"
                }
              ]
            }
          ],
          "reload": {
            "ret": "void",
            "desc": "Reload the webapplication",
            "args": []
          },
          "stop": {
            "ret": "void",
            "desc": "Stop",
            "args": []
          },
          "findMimeMappings": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the extensions for which MIME mappings are defined.",
            "args": []
          },
          "findFilterMaps": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of filter mappings for this Context.",
            "args": []
          },
          "findWelcomeFile": {
            "ret": "boolean",
            "desc": "Return 'true' if the specified welcome file is defined for this Context; otherwise return 'false'.",
            "args": [
              {
                "desc": "Welcome file to verify",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeParameter": {
            "ret": "void",
            "desc": "Remove the context initialization parameter with the specified name, if it exists; otherwise, no action is taken.",
            "args": [
              {
                "desc": "Name of the parameter to remove",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeMimeMapping": {
            "ret": "void",
            "desc": "Remove the MIME mapping for the specified extension, if it exists; otherwise, no action is taken..",
            "args": [
              {
                "desc": "Extension to remove the mapping for",
                "name": "extension",
                "type": "java.lang.String"
              }
            ]
          },
          "findServletMapping": {
            "ret": "java.lang.String",
            "desc": "Return the servlet name mapped by the specified pattern..",
            "args": [
              {
                "desc": "Pattern for which a mapping is requested",
                "name": "pattern",
                "type": "java.lang.String"
              }
            ]
          },
          "addServletMapping": [
            {
              "ret": "void",
              "desc": "Add a new servlet mapping, replacing any existing mapping for the specified pattern.",
              "args": [
                {
                  "desc": "URL pattern to be mapped",
                  "name": "pattern",
                  "type": "java.lang.String"
                },
                {
                  "desc": "Name of the corresponding servlet to execute",
                  "name": "name",
                  "type": "java.lang.String"
                }
              ]
            },
            {
              "ret": "void",
              "desc": "Add a new servlet mapping, replacing any existing mapping for the specified pattern.",
              "args": [
                {
                  "desc": "URL pattern to be mapped",
                  "name": "pattern",
                  "type": "java.lang.String"
                },
                {
                  "desc": "Name of the corresponding servlet to execute",
                  "name": "name",
                  "type": "java.lang.String"
                },
                {
                  "desc": "'true' if name identifies the JspServlet and pattern contains a wildcard; 'false' otherwise",
                  "name": "jspWildcard",
                  "type": "boolean"
                }
              ]
            }
          ],
          "destroy": {
            "ret": "void",
            "desc": "Destroy the context",
            "args": []
          },
          "removeSecurityRole": {
            "ret": "void",
            "desc": "Remove any security role with the specified name.",
            "args": [
              {
                "desc": "Security role to remove",
                "name": "role",
                "type": "java.lang.String"
              }
            ]
          },
          "findFilterDef": {
            "ret": "java.lang.String",
            "desc": "Return the filter definition for the specified filter name, if any; otherwise return null.",
            "args": [
              {
                "desc": "Exception type to look up",
                "name": "exceptionType",
                "type": "java.lang.String"
              }
            ]
          },
          "findApplicationParameters": {
            "ret": "java.lang.String",
            "desc": "Return the set of application parameters for this application.",
            "args": []
          },
          "addWrapperLifecycle": {
            "ret": "void",
            "desc": "Add the classname of a LifecycleListener to be added to each Wrapper appended to this Context.",
            "args": [
              {
                "desc": "Java class name of a LifecycleListener class",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "removeWelcomeFile": {
            "ret": "void",
            "desc": "Remove the specified welcome file name from the list recognized by this Context.",
            "args": [
              {
                "desc": "Name of the welcome file to be removed",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "addWrapperListener": {
            "ret": "void",
            "desc": "Add the classname of a ContainerListener to be added to each Wrapper appended to this Context.",
            "args": [
              {
                "desc": "Java class name of a ContainerListener class",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "findConstraints": {
            "ret": "java.lang.String",
            "desc": "Return the set of security constraints for this web application. If there are none, a zero-length array is returned.",
            "args": []
          },
          "addWelcomeFile": {
            "ret": "void",
            "desc": "Add a new welcome file to the set recognized by this Context.",
            "args": [
              {
                "desc": "New welcome file name",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeApplicationParameter": {
            "ret": "void",
            "desc": "Remove the application parameter with the specified name from the set for this application.",
            "args": [
              {
                "desc": "Name of the application parameter to remove",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "findWrapperListeners": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of ContainerListener classes that will be added to newly created Wrappers automatically.",
            "args": []
          },
          "addLifecycleListener": {
            "ret": "void",
            "desc": "Add a lifecycle listener to this Context",
            "args": [
              {
                "desc": "Type(classname) of the new lifecycle listener to be added",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "findWatchedResources": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of watched resources for this Context.",
            "args": []
          },
          "removeServletMapping": {
            "ret": "void",
            "desc": "Remove any servlet mapping for the specified pattern, if it exists; otherwise, no action is taken.",
            "args": [
              {
                "desc": "URL pattern of the mapping to remove",
                "name": "pattern",
                "type": "java.lang.String"
              }
            ]
          },
          "findParameters": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the names of all defined context initialization parameters for this Context.",
            "args": []
          },
          "findServletMappings": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the patterns of all defined servlet mappings for this Context.",
            "args": []
          },
          "removeWrapperLifecycle": {
            "ret": "void",
            "desc": "Remove a class name from the set of LifecycleListener classes that will be added to newly created Wrappers.",
            "args": [
              {
                "desc": "Class name of a LifecycleListener class to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "findWelcomeFiles": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of welcome files defined for this Context.",
            "args": []
          },
          "addInstanceListener": {
            "ret": "void",
            "desc": "Add the classname of an InstanceListener to be added to each Wrapper appended to this Context.",
            "args": [
              {
                "desc": "Java class name of an InstanceListener class",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "findLifecycleListenerNames": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of lifecycle listener class names configured for this application.",
            "args": []
          },
          "addLocaleEncodingMappingParameter": {
            "ret": "void",
            "desc": "Add a Locale Encoding Mapping",
            "args": [
              {
                "desc": "Locale to map an encoding for",
                "name": "locale",
                "type": "java.lang.String"
              },
              {
                "desc": "Encoding to be used for a give locale",
                "name": "encoding",
                "type": "java.lang.String"
              }
            ]
          },
          "removeInstanceListener": {
            "ret": "void",
            "desc": "Remove the application parameter with the specified name from the set for this application.",
            "args": [
              {
                "desc": "Class name of an InstanceListener class to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "addApplicationListener": {
            "ret": "void",
            "desc": "Add a new Listener class name to the set of Listeners configured for this application.",
            "args": [
              {
                "desc": "Java class name of a listener class",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "findRoleMapping": {
            "ret": "java.lang.String",
            "desc": "For the given security role (as used by an application), return the corresponding role name (as defined by the underlying Realm) if there is one.  Otherwise, return the specified role unchanged.",
            "args": [
              {
                "desc": "Security role to map",
                "name": "role",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "saveConfig": {
            "desc": "Should the configuration be written as needed on startup",
            "type": "boolean",
            "rw": true
          },
          "encodedPath": {
            "desc": "The encoded path",
            "type": "java.lang.String",
            "rw": false
          },
          "managedResource": {
            "desc": "The managed resource this MBean is associated with",
            "type": "java.lang.Object",
            "rw": true
          },
          "manager": {
            "desc": "Associated manager.",
            "type": "org.apache.catalina.Manager",
            "rw": true
          },
          "cacheTTL": {
            "desc": "Time interval in ms between cache refeshes",
            "type": "int",
            "rw": true
          },
          "configured": {
            "desc": "The correctly configured flag for this Context.",
            "type": "boolean",
            "rw": false
          },
          "sessionCookieDomain": {
            "desc": "The domain to use for session cookies.'null' indicates that the domain is controlled by the application.",
            "type": "java.lang.String",
            "rw": true
          },
          "startTime": {
            "desc": "Time (in milliseconds since January 1, 1970, 00:00:00) when this context was started",
            "type": "long",
            "rw": false
          },
          "distributable": {
            "desc": "The distributable flag for this web application.",
            "type": "boolean",
            "rw": true
          },
          "tldNamespaceAware": {
            "desc": "Should the parsing of *.tld files be performed by a namespace aware parser? (This option is deprecated)",
            "type": "boolean",
            "rw": true
          },
          "configFile": {
            "desc": "Location of the context.xml resource or file",
            "type": "java.net.URL",
            "rw": true
          },
          "staticResources": {
            "desc": "Static resources associated with the context.",
            "type": "javax.naming.directory.DirContext",
            "rw": false
          },
          "realm": {
            "desc": "Associated realm.",
            "type": "org.apache.catalina.Realm",
            "rw": true
          },
          "stateManageable": {
            "desc": "State management support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "antiJARLocking": {
            "desc": "Take care to not lock jar files",
            "type": "boolean",
            "rw": true
          },
          "compilerClasspath": {
            "desc": "The compiler classpath to use",
            "type": "java.lang.String",
            "rw": true
          },
          "instanceManager": {
            "desc": "Object that creates and destroys servlets, filters, and listeners. Include dependency injection and postConstruct/preDestory handling",
            "type": "org.apache.catalina.instanceManagement.InstanceManager",
            "rw": true
          },
          "servlets": {
            "desc": "JSR77 list of servlets",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "loader": {
            "desc": "Associated loader.",
            "type": "org.apache.catalina.Loader",
            "rw": true
          },
          "logEffectiveWebXml": {
            "desc": "Should the effective web.xml be logged when the context starts?",
            "type": "boolean",
            "rw": true
          },
          "processingTime": {
            "desc": "Cumulative execution times of all servlets in this context",
            "type": "long",
            "rw": false
          },
          "sessionCookiePath": {
            "desc": "The path to use for session cookies.'null' indicates that the path is controlled by the application.",
            "type": "java.lang.String",
            "rw": true
          },
          "xmlNamespaceAware": {
            "desc": "Should the parsing of web.xml and web-fragment.xml files be performed by a namespace aware parser?",
            "type": "boolean",
            "rw": true
          },
          "useNaming": {
            "desc": "Create a JNDI naming context for this application?",
            "type": "boolean",
            "rw": true
          },
          "deploymentDescriptor": {
            "desc": "String deployment descriptor ",
            "type": "java.lang.String",
            "rw": false
          },
          "cacheObjectMaxSize": {
            "desc": "Maximum cached object size in KB",
            "type": "int",
            "rw": true
          },
          "webappVersion": {
            "desc": "The version of this web application - used in parallel deployment to differentiate different versions of the same web application",
            "type": "java.lang.String",
            "rw": false
          },
          "override": {
            "desc": "The default context.xml override flag for this web application",
            "type": "boolean",
            "rw": true
          },
          "publicId": {
            "desc": "The public identifier of the DTD for the web application deployment descriptor version that is being parsed",
            "type": "java.lang.String",
            "rw": false
          },
          "baseName": {
            "desc": "The base name used for directories, WAR files (with .war appended) and context.xml files (with .xml appended).",
            "type": "java.lang.String",
            "rw": false
          },
          "cachingAllowed": {
            "desc": "Should we cache static resources for this webapp",
            "type": "boolean",
            "rw": true
          },
          "namingContextListener": {
            "desc": "Associated naming context listener.",
            "type": "org.apache.catalina.core.NamingContextListener",
            "rw": true
          },
          "swallowOutput": {
            "desc": "Flag to set to cause the system.out and system.err to be redirected to the logger when executing a servlet",
            "type": "boolean",
            "rw": true
          },
          "privileged": {
            "desc": "Access to tomcat internals",
            "type": "boolean",
            "rw": true
          },
          "unloadDelay": {
            "desc": "Amount of ms that the container will wait for servlets to unload",
            "type": "long",
            "rw": true
          },
          "parentClassLoader": {
            "desc": "Parent class loader.",
            "type": "java.lang.ClassLoader",
            "rw": true
          },
          "docBase": {
            "desc": "The document root for this web application",
            "type": "java.lang.String",
            "rw": true
          },
          "minTime": {
            "desc": "Minimum execution time of all servlets in this context",
            "type": "long",
            "rw": false
          },
          "eventProvider": {
            "desc": "Event provider support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "workDir": {
            "desc": "The pathname to the work directory for this context",
            "type": "java.lang.String",
            "rw": true
          },
          "tldScanTime": {
            "desc": "Time spend scanning jars for TLDs for this context",
            "type": "long",
            "rw": true
          },
          "statisticsProvider": {
            "desc": "Performance statistics support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "altDDName": {
            "desc": "The alternate deployment descriptor name.",
            "type": "java.lang.String",
            "rw": true
          },
          "javaVMs": {
            "desc": "The Java virtual machines on which this module is running",
            "type": "[Ljava.lang.String;",
            "rw": true
          },
          "clearReferencesStopThreads": {
            "desc": "Should Tomcat attempt to terminate threads that have been started by the web application? Advisable to be used only in a development environment.",
            "type": "boolean",
            "rw": true
          },
          "clearReferencesStatic": {
            "desc": "Should Tomcat attempt to null out any static or final fields from loaded classes when a web application is stopped as a work around for apparent garbage collection bugs and application coding errors?",
            "type": "boolean",
            "rw": true
          },
          "children": {
            "desc": "Object names of all children",
            "type": "[Ljavax.management.ObjectName;",
            "rw": true
          },
          "errorCount": {
            "desc": "Cumulative error count of all servlets in this context",
            "type": "int",
            "rw": false
          },
          "maxTime": {
            "desc": "Maximum execution time of all servlets in this context",
            "type": "long",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "aliases": {
            "desc": "List of resource aliases",
            "type": "java.lang.String",
            "rw": true
          },
          "sessionCookieName": {
            "desc": "The name to use for session cookies.'null' indicates that the name is controlled by the application.",
            "type": "java.lang.String",
            "rw": true
          },
          "delegate": {
            "desc": "",
            "type": "boolean",
            "rw": true
          },
          "mappingObject": {
            "desc": "The object used for mapping",
            "type": "java.lang.Object",
            "rw": true
          },
          "startupTime": {
            "desc": "Time (in milliseconds) it took to start this context",
            "type": "long",
            "rw": true
          },
          "crossContext": {
            "desc": "Should we allow the ServletContext.getContext() method to access the context of other web applications in this server?",
            "type": "boolean",
            "rw": true
          },
          "welcomeFiles": {
            "desc": "The welcome files for this context",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "name": {
            "desc": "The name of this Context",
            "type": "java.lang.String",
            "rw": true
          },
          "logger": {
            "desc": "Associated logger.",
            "type": "org.apache.juli.logging.Log",
            "rw": true
          },
          "path": {
            "desc": "The context path for this Context",
            "type": "java.lang.String",
            "rw": true
          },
          "requestCount": {
            "desc": "Cumulative request count of all servlets in this context",
            "type": "int",
            "rw": false
          },
          "clearReferencesStopTimerThreads": {
            "desc": "Should Tomcat attempt to terminate TimerThreads that have been started by the web application? Advisable to be used only in a development environment.",
            "type": "boolean",
            "rw": true
          },
          "cookies": {
            "desc": "Should we attempt to use cookies for session id communication?",
            "type": "boolean",
            "rw": true
          },
          "reloadable": {
            "desc": "The reloadable flag for this web application",
            "type": "boolean",
            "rw": true
          },
          "tldValidation": {
            "desc": "Should the parsing of *.tld files be performed by a validating parser?",
            "type": "boolean",
            "rw": true
          },
          "defaultContextXml": {
            "desc": "Location of the default context.xml resource or file",
            "type": "java.lang.String",
            "rw": true
          },
          "objectName": {
            "desc": "Name of the object",
            "type": "java.lang.String",
            "rw": false
          },
          "useHttpOnly": {
            "desc": "Indicates that session cookies should use HttpOnly",
            "type": "boolean",
            "rw": true
          },
          "renewThreadsWhenStoppingContext": {
            "desc": "Should Tomcat renew the threads of the thread pool when the application is stopped to avoid memory leaks because of uncleaned ThreadLocal variables.",
            "type": "boolean",
            "rw": true
          },
          "paused": {
            "desc": "The request processing pause flag (while reloading occurs)",
            "type": "boolean",
            "rw": false
          },
          "antiResourceLocking": {
            "desc": "Take care to not lock resources",
            "type": "boolean",
            "rw": true
          },
          "originalDocBase": {
            "desc": "The original document root for this web application",
            "type": "java.lang.String",
            "rw": true
          },
          "sessionTimeout": {
            "desc": "The session timeout (in minutes) for this web application",
            "type": "int",
            "rw": true
          },
          "cacheMaxSize": {
            "desc": "Maximum cache size in KB",
            "type": "int",
            "rw": true
          },
          "defaultWebXml": {
            "desc": "Location of the default web.xml resource or file",
            "type": "java.lang.String",
            "rw": true
          },
          "ignoreAnnotations": {
            "desc": "Ignore annotations flag.",
            "type": "boolean",
            "rw": true
          },
          "unpackWAR": {
            "desc": "Unpack WAR property",
            "type": "boolean",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "server": {
            "desc": "The J2EE Server this module is deployed on",
            "type": "java.lang.String",
            "rw": true
          },
          "xmlValidation": {
            "desc": "Should the parsing of web.xml and web-fragment.xml files be performed by a validating parser?",
            "type": "boolean",
            "rw": true
          },
          "displayName": {
            "desc": "The display name of this web application",
            "type": "java.lang.String",
            "rw": true
          },
          "allowLinking": {
            "desc": "Allow symlinking to outside the webapp root directory, if the webapp is an exploded directory",
            "type": "boolean",
            "rw": true
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,WebModule=//localhost/manager,j2eeType=Servlet,name=JMXProxy": {
        "desc": "Wrapper that represents an individual servlet definition",
        "op": {
          "findSecurityReference": {
            "ret": "java.lang.String",
            "desc": "Return the security role link for the specified security role reference name.",
            "args": [
              {
                "desc": "Security role reference used within this servle",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "addMapping": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "removeInitParameter": {
            "ret": "void",
            "desc": "Remove the specified initialization parameter from this servlet.",
            "args": [
              {
                "desc": "Name of the initialization parameter to remove",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeSecurityReference": {
            "ret": "void",
            "desc": "Remove any security role reference for the specified role name.",
            "args": [
              {
                "desc": "Security role used within this servlet to be removeds",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "findMappingObject": {
            "ret": "org.apache.catalina.Wrapper",
            "desc": "Return an object which may be utilized for mapping to this component",
            "args": []
          },
          "addValve": {
            "ret": "java.lang.String",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new valve to be added",
                "name": "valveType",
                "type": "java.lang.String"
              }
            ]
          },
          "addLifecycleListener": {
            "ret": "void",
            "desc": "Add a lifecycle listener to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new lifecycle listener to be added",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "removeLifecycleListeners": {
            "ret": "void",
            "desc": "Removes lifecycle listeners of given class type from this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the lifecycle listeners to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "removeValve": {
            "ret": "void",
            "desc": "Remove a valve from this Wrapper",
            "args": [
              {
                "desc": "Objectname of the valve to be removed",
                "name": "valveName",
                "type": "java.lang.String"
              }
            ]
          },
          "addSecurityReference": {
            "ret": "void",
            "desc": "Add a new security role reference record to the set of records for this servlet.",
            "args": [
              {
                "desc": "Role name used within this servlet",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Role name used within the web application",
                "name": "link",
                "type": "java.lang.String"
              }
            ]
          },
          "addInitParameter": {
            "ret": "void",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Name of this initialization parameter to add",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Value of this initialization parameter to add",
                "name": "value",
                "type": "java.lang.String"
              }
            ]
          },
          "findInitParameters": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the names of all defined initialization parameters for this servlet.",
            "args": []
          },
          "removeMapping": {
            "ret": "void",
            "desc": "Remove a mapping associated with the wrapper.",
            "args": [
              {
                "desc": "The pattern to remove",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "findSecurityReferences": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of security role reference names associated with this servlet",
            "args": []
          },
          "findMappings": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the mappings associated with this wrapper",
            "args": []
          },
          "findInitParameter": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "minTime": {
            "desc": "Minimum processing time of a request",
            "type": "long",
            "rw": false
          },
          "runAs": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": true
          },
          "countAllocated": {
            "desc": "The count of allocations that are currently active (even if they  are for the same instance, as will be true on a non-STM servlet).",
            "type": "int",
            "rw": false
          },
          "eventProvider": {
            "desc": "Event provider support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "statisticsProvider": {
            "desc": "Performance statistics support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "objectName": {
            "desc": "Name of the object",
            "type": "java.lang.String",
            "rw": true
          },
          "processingTime": {
            "desc": "Total execution time of the servlet's service method",
            "type": "long",
            "rw": false
          },
          "errorCount": {
            "desc": "Error count",
            "type": "int",
            "rw": false
          },
          "maxTime": {
            "desc": "Maximum processing time of a request",
            "type": "long",
            "rw": false
          },
          "available": {
            "desc": "The date and time at which this servlet will become available (in milliseconds since the epoch), or zero if the servlet is available. If this value equals Long.MAX_VALUE, the unavailability of this servlet is considered permanent.",
            "type": "long",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "asyncSupported": {
            "desc": "Async support",
            "type": "boolean",
            "rw": true
          },
          "backgroundProcessorDelay": {
            "desc": "The processor delay for this component.",
            "type": "int",
            "rw": true
          },
          "loadOnStartup": {
            "desc": "The load-on-startup order value (negative value means load on first call) for this servlet.",
            "type": "int",
            "rw": true
          },
          "maxInstances": {
            "desc": "Maximum number of STM instances.",
            "type": "int",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "loadTime": {
            "desc": "Time taken to load and initialise the Servlet",
            "type": "long",
            "rw": false
          },
          "stateManageable": {
            "desc": "State management support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "servletClass": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": false
          },
          "classLoadTime": {
            "desc": "Time taken to load the Servlet class",
            "type": "int",
            "rw": false
          },
          "requestCount": {
            "desc": "Number of requests processed by this wrapper",
            "type": "int",
            "rw": false
          },
          "singleThreadModel": {
            "desc": "Does this servlet implement the SingleThreadModel interface?",
            "type": "boolean",
            "rw": false
          }
        }
      },
      "name=HttpRequest1,type=RequestProcessor,worker=\"http-bio-8080\"": {
        "desc": null,
        "attr": {
          "requestProcessingTime": {
            "desc": "Introspected attribute requestProcessingTime",
            "type": "long",
            "rw": false
          },
          "protocol": {
            "desc": "Introspected attribute protocol",
            "type": "java.lang.String",
            "rw": false
          },
          "bytesSent": {
            "desc": "Introspected attribute bytesSent",
            "type": "long",
            "rw": true
          },
          "rpName": {
            "desc": "Introspected attribute rpName",
            "type": "javax.management.ObjectName",
            "rw": true
          },
          "processingTime": {
            "desc": "Introspected attribute processingTime",
            "type": "long",
            "rw": true
          },
          "currentQueryString": {
            "desc": "Introspected attribute currentQueryString",
            "type": "java.lang.String",
            "rw": false
          },
          "requestBytesReceived": {
            "desc": "Introspected attribute requestBytesReceived",
            "type": "long",
            "rw": false
          },
          "errorCount": {
            "desc": "Introspected attribute errorCount",
            "type": "int",
            "rw": true
          },
          "maxTime": {
            "desc": "Introspected attribute maxTime",
            "type": "long",
            "rw": true
          },
          "maxRequestUri": {
            "desc": "Introspected attribute maxRequestUri",
            "type": "java.lang.String",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "stage": {
            "desc": "Introspected attribute stage",
            "type": "int",
            "rw": true
          },
          "lastRequestProcessingTime": {
            "desc": "Introspected attribute lastRequestProcessingTime",
            "type": "long",
            "rw": true
          },
          "globalProcessor": {
            "desc": "Introspected attribute globalProcessor",
            "type": "org.apache.coyote.RequestGroupInfo",
            "rw": true
          },
          "virtualHost": {
            "desc": "Introspected attribute virtualHost",
            "type": "java.lang.String",
            "rw": false
          },
          "serverPort": {
            "desc": "Introspected attribute serverPort",
            "type": "int",
            "rw": false
          },
          "bytesReceived": {
            "desc": "Introspected attribute bytesReceived",
            "type": "long",
            "rw": true
          },
          "currentUri": {
            "desc": "Introspected attribute currentUri",
            "type": "java.lang.String",
            "rw": false
          },
          "workerThreadName": {
            "desc": "Introspected attribute workerThreadName",
            "type": "java.lang.String",
            "rw": true
          },
          "remoteAddrForwarded": {
            "desc": "Introspected attribute remoteAddrForwarded",
            "type": "java.lang.String",
            "rw": false
          },
          "method": {
            "desc": "Introspected attribute method",
            "type": "java.lang.String",
            "rw": false
          },
          "requestCount": {
            "desc": "Introspected attribute requestCount",
            "type": "int",
            "rw": true
          },
          "requestBytesSent": {
            "desc": "Introspected attribute requestBytesSent",
            "type": "long",
            "rw": false
          },
          "contentLength": {
            "desc": "Introspected attribute contentLength",
            "type": "int",
            "rw": false
          },
          "remoteAddr": {
            "desc": "Introspected attribute remoteAddr",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "host=localhost,name=ErrorReportValve,type=Valve": {
        "desc": "Implementation of a Valve that outputs HTML error pages",
        "attr": {
          "showReport": {
            "desc": "Enables/Disables full error reports",
            "type": "boolean",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "showServerInfo": {
            "desc": "Enables/Disables server info on error pages",
            "type": "boolean",
            "rw": true
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "asyncSupported": {
            "desc": "Does this valve support async reporting.",
            "type": "boolean",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "info": {
            "desc": "Information about this implementation",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "port=8009,type=Mapper": {
        "desc": "Maps requests received by the associated connector to Hosts, Contexts and Wrappers",
        "attr": {
          "connectorName": {
            "desc": "Name of the associated connector",
            "type": "java.lang.String",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "name=HttpRequest6,type=RequestProcessor,worker=\"http-bio-8080\"": {
        "desc": null,
        "attr": {
          "requestProcessingTime": {
            "desc": "Introspected attribute requestProcessingTime",
            "type": "long",
            "rw": false
          },
          "protocol": {
            "desc": "Introspected attribute protocol",
            "type": "java.lang.String",
            "rw": false
          },
          "bytesSent": {
            "desc": "Introspected attribute bytesSent",
            "type": "long",
            "rw": true
          },
          "rpName": {
            "desc": "Introspected attribute rpName",
            "type": "javax.management.ObjectName",
            "rw": true
          },
          "processingTime": {
            "desc": "Introspected attribute processingTime",
            "type": "long",
            "rw": true
          },
          "currentQueryString": {
            "desc": "Introspected attribute currentQueryString",
            "type": "java.lang.String",
            "rw": false
          },
          "requestBytesReceived": {
            "desc": "Introspected attribute requestBytesReceived",
            "type": "long",
            "rw": false
          },
          "errorCount": {
            "desc": "Introspected attribute errorCount",
            "type": "int",
            "rw": true
          },
          "maxTime": {
            "desc": "Introspected attribute maxTime",
            "type": "long",
            "rw": true
          },
          "maxRequestUri": {
            "desc": "Introspected attribute maxRequestUri",
            "type": "java.lang.String",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "stage": {
            "desc": "Introspected attribute stage",
            "type": "int",
            "rw": true
          },
          "lastRequestProcessingTime": {
            "desc": "Introspected attribute lastRequestProcessingTime",
            "type": "long",
            "rw": true
          },
          "globalProcessor": {
            "desc": "Introspected attribute globalProcessor",
            "type": "org.apache.coyote.RequestGroupInfo",
            "rw": true
          },
          "virtualHost": {
            "desc": "Introspected attribute virtualHost",
            "type": "java.lang.String",
            "rw": false
          },
          "serverPort": {
            "desc": "Introspected attribute serverPort",
            "type": "int",
            "rw": false
          },
          "bytesReceived": {
            "desc": "Introspected attribute bytesReceived",
            "type": "long",
            "rw": true
          },
          "currentUri": {
            "desc": "Introspected attribute currentUri",
            "type": "java.lang.String",
            "rw": false
          },
          "workerThreadName": {
            "desc": "Introspected attribute workerThreadName",
            "type": "java.lang.String",
            "rw": true
          },
          "remoteAddrForwarded": {
            "desc": "Introspected attribute remoteAddrForwarded",
            "type": "java.lang.String",
            "rw": false
          },
          "method": {
            "desc": "Introspected attribute method",
            "type": "java.lang.String",
            "rw": false
          },
          "requestCount": {
            "desc": "Introspected attribute requestCount",
            "type": "int",
            "rw": true
          },
          "requestBytesSent": {
            "desc": "Introspected attribute requestBytesSent",
            "type": "long",
            "rw": false
          },
          "contentLength": {
            "desc": "Introspected attribute contentLength",
            "type": "int",
            "rw": false
          },
          "remoteAddr": {
            "desc": "Introspected attribute remoteAddr",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "context=/manager,host=localhost,type=Loader": {
        "desc": "Classloader implementation which is specialized for handling web applications",
        "op": {
          "toString": {
            "ret": "String",
            "desc": "Info about the loader",
            "args": []
          }
        },
        "attr": {
          "loaderRepositoriesString": {
            "desc": "Repositories set in the real loader",
            "type": "java.lang.String",
            "rw": false
          },
          "repositories": {
            "desc": "Extra repositories managed by this loader",
            "type": "[Ljava.lang.String;",
            "rw": true
          },
          "repositoriesString": {
            "desc": "Extra repositories managed by this loader",
            "type": "java.lang.String",
            "rw": false
          },
          "searchExternalFirst": {
            "desc": "The searchExternalFirst flag for this Loader",
            "type": "boolean",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "loaderRepositories": {
            "desc": "Repositories set in the real loader",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "reloadable": {
            "desc": "The reloadable flag for this Loader",
            "type": "boolean",
            "rw": true
          },
          "delegate": {
            "desc": "The 'follow standard delegation model' flag that will be used to configure our ClassLoader",
            "type": "boolean",
            "rw": true
          }
        }
      },
      "context=/,host=localhost,name=StandardContextValve,type=Valve": {
        "desc": "Valve that implements the default basic behavior for the          StandardContext container implementation",
        "attr": {
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "asyncSupported": {
            "desc": "Does this valve support async reporting?",
            "type": "boolean",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "context=/,host=localhost,type=Loader": {
        "desc": "Classloader implementation which is specialized for handling web applications",
        "op": {
          "toString": {
            "ret": "String",
            "desc": "Info about the loader",
            "args": []
          }
        },
        "attr": {
          "loaderRepositoriesString": {
            "desc": "Repositories set in the real loader",
            "type": "java.lang.String",
            "rw": false
          },
          "repositories": {
            "desc": "Extra repositories managed by this loader",
            "type": "[Ljava.lang.String;",
            "rw": true
          },
          "repositoriesString": {
            "desc": "Extra repositories managed by this loader",
            "type": "java.lang.String",
            "rw": false
          },
          "searchExternalFirst": {
            "desc": "The searchExternalFirst flag for this Loader",
            "type": "boolean",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "loaderRepositories": {
            "desc": "Repositories set in the real loader",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "reloadable": {
            "desc": "The reloadable flag for this Loader",
            "type": "boolean",
            "rw": true
          },
          "delegate": {
            "desc": "The 'follow standard delegation model' flag that will be used to configure our ClassLoader",
            "type": "boolean",
            "rw": true
          }
        }
      },
      "name=\"http-bio-8080\",type=GlobalRequestProcessor": {
        "desc": null,
        "op": {
          "resetCounters": {
            "ret": "void",
            "desc": "Introspected operation resetCounters",
            "args": []
          }
        },
        "attr": {
          "bytesSent": {
            "desc": "Introspected attribute bytesSent",
            "type": "long",
            "rw": true
          },
          "bytesReceived": {
            "desc": "Introspected attribute bytesReceived",
            "type": "long",
            "rw": true
          },
          "processingTime": {
            "desc": "Introspected attribute processingTime",
            "type": "long",
            "rw": true
          },
          "errorCount": {
            "desc": "Introspected attribute errorCount",
            "type": "int",
            "rw": true
          },
          "maxTime": {
            "desc": "Introspected attribute maxTime",
            "type": "long",
            "rw": true
          },
          "requestCount": {
            "desc": "Introspected attribute requestCount",
            "type": "int",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,WebModule=//localhost/manager,j2eeType=Servlet,name=HTMLManager": {
        "desc": "Wrapper that represents an individual servlet definition",
        "op": {
          "findSecurityReference": {
            "ret": "java.lang.String",
            "desc": "Return the security role link for the specified security role reference name.",
            "args": [
              {
                "desc": "Security role reference used within this servle",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "addMapping": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "removeInitParameter": {
            "ret": "void",
            "desc": "Remove the specified initialization parameter from this servlet.",
            "args": [
              {
                "desc": "Name of the initialization parameter to remove",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeSecurityReference": {
            "ret": "void",
            "desc": "Remove any security role reference for the specified role name.",
            "args": [
              {
                "desc": "Security role used within this servlet to be removeds",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "findMappingObject": {
            "ret": "org.apache.catalina.Wrapper",
            "desc": "Return an object which may be utilized for mapping to this component",
            "args": []
          },
          "addValve": {
            "ret": "java.lang.String",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new valve to be added",
                "name": "valveType",
                "type": "java.lang.String"
              }
            ]
          },
          "addLifecycleListener": {
            "ret": "void",
            "desc": "Add a lifecycle listener to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new lifecycle listener to be added",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "removeLifecycleListeners": {
            "ret": "void",
            "desc": "Removes lifecycle listeners of given class type from this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the lifecycle listeners to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "removeValve": {
            "ret": "void",
            "desc": "Remove a valve from this Wrapper",
            "args": [
              {
                "desc": "Objectname of the valve to be removed",
                "name": "valveName",
                "type": "java.lang.String"
              }
            ]
          },
          "addSecurityReference": {
            "ret": "void",
            "desc": "Add a new security role reference record to the set of records for this servlet.",
            "args": [
              {
                "desc": "Role name used within this servlet",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Role name used within the web application",
                "name": "link",
                "type": "java.lang.String"
              }
            ]
          },
          "addInitParameter": {
            "ret": "void",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Name of this initialization parameter to add",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Value of this initialization parameter to add",
                "name": "value",
                "type": "java.lang.String"
              }
            ]
          },
          "findInitParameters": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the names of all defined initialization parameters for this servlet.",
            "args": []
          },
          "removeMapping": {
            "ret": "void",
            "desc": "Remove a mapping associated with the wrapper.",
            "args": [
              {
                "desc": "The pattern to remove",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "findSecurityReferences": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of security role reference names associated with this servlet",
            "args": []
          },
          "findMappings": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the mappings associated with this wrapper",
            "args": []
          },
          "findInitParameter": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "minTime": {
            "desc": "Minimum processing time of a request",
            "type": "long",
            "rw": false
          },
          "runAs": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": true
          },
          "countAllocated": {
            "desc": "The count of allocations that are currently active (even if they  are for the same instance, as will be true on a non-STM servlet).",
            "type": "int",
            "rw": false
          },
          "eventProvider": {
            "desc": "Event provider support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "statisticsProvider": {
            "desc": "Performance statistics support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "objectName": {
            "desc": "Name of the object",
            "type": "java.lang.String",
            "rw": true
          },
          "processingTime": {
            "desc": "Total execution time of the servlet's service method",
            "type": "long",
            "rw": false
          },
          "errorCount": {
            "desc": "Error count",
            "type": "int",
            "rw": false
          },
          "maxTime": {
            "desc": "Maximum processing time of a request",
            "type": "long",
            "rw": false
          },
          "available": {
            "desc": "The date and time at which this servlet will become available (in milliseconds since the epoch), or zero if the servlet is available. If this value equals Long.MAX_VALUE, the unavailability of this servlet is considered permanent.",
            "type": "long",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "asyncSupported": {
            "desc": "Async support",
            "type": "boolean",
            "rw": true
          },
          "backgroundProcessorDelay": {
            "desc": "The processor delay for this component.",
            "type": "int",
            "rw": true
          },
          "loadOnStartup": {
            "desc": "The load-on-startup order value (negative value means load on first call) for this servlet.",
            "type": "int",
            "rw": true
          },
          "maxInstances": {
            "desc": "Maximum number of STM instances.",
            "type": "int",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "loadTime": {
            "desc": "Time taken to load and initialise the Servlet",
            "type": "long",
            "rw": false
          },
          "stateManageable": {
            "desc": "State management support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "servletClass": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": false
          },
          "classLoadTime": {
            "desc": "Time taken to load the Servlet class",
            "type": "int",
            "rw": false
          },
          "requestCount": {
            "desc": "Number of requests processed by this wrapper",
            "type": "int",
            "rw": false
          },
          "singleThreadModel": {
            "desc": "Does this servlet implement the SingleThreadModel interface?",
            "type": "boolean",
            "rw": false
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,WebModule=//localhost/manager,j2eeType=Servlet,name=default": {
        "desc": "Wrapper that represents an individual servlet definition",
        "op": {
          "findSecurityReference": {
            "ret": "java.lang.String",
            "desc": "Return the security role link for the specified security role reference name.",
            "args": [
              {
                "desc": "Security role reference used within this servle",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "addMapping": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "removeInitParameter": {
            "ret": "void",
            "desc": "Remove the specified initialization parameter from this servlet.",
            "args": [
              {
                "desc": "Name of the initialization parameter to remove",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeSecurityReference": {
            "ret": "void",
            "desc": "Remove any security role reference for the specified role name.",
            "args": [
              {
                "desc": "Security role used within this servlet to be removeds",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "findMappingObject": {
            "ret": "org.apache.catalina.Wrapper",
            "desc": "Return an object which may be utilized for mapping to this component",
            "args": []
          },
          "addValve": {
            "ret": "java.lang.String",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new valve to be added",
                "name": "valveType",
                "type": "java.lang.String"
              }
            ]
          },
          "addLifecycleListener": {
            "ret": "void",
            "desc": "Add a lifecycle listener to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new lifecycle listener to be added",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "removeLifecycleListeners": {
            "ret": "void",
            "desc": "Removes lifecycle listeners of given class type from this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the lifecycle listeners to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "removeValve": {
            "ret": "void",
            "desc": "Remove a valve from this Wrapper",
            "args": [
              {
                "desc": "Objectname of the valve to be removed",
                "name": "valveName",
                "type": "java.lang.String"
              }
            ]
          },
          "addSecurityReference": {
            "ret": "void",
            "desc": "Add a new security role reference record to the set of records for this servlet.",
            "args": [
              {
                "desc": "Role name used within this servlet",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Role name used within the web application",
                "name": "link",
                "type": "java.lang.String"
              }
            ]
          },
          "addInitParameter": {
            "ret": "void",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Name of this initialization parameter to add",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Value of this initialization parameter to add",
                "name": "value",
                "type": "java.lang.String"
              }
            ]
          },
          "findInitParameters": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the names of all defined initialization parameters for this servlet.",
            "args": []
          },
          "removeMapping": {
            "ret": "void",
            "desc": "Remove a mapping associated with the wrapper.",
            "args": [
              {
                "desc": "The pattern to remove",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "findSecurityReferences": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of security role reference names associated with this servlet",
            "args": []
          },
          "findMappings": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the mappings associated with this wrapper",
            "args": []
          },
          "findInitParameter": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "minTime": {
            "desc": "Minimum processing time of a request",
            "type": "long",
            "rw": false
          },
          "runAs": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": true
          },
          "countAllocated": {
            "desc": "The count of allocations that are currently active (even if they  are for the same instance, as will be true on a non-STM servlet).",
            "type": "int",
            "rw": false
          },
          "eventProvider": {
            "desc": "Event provider support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "statisticsProvider": {
            "desc": "Performance statistics support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "objectName": {
            "desc": "Name of the object",
            "type": "java.lang.String",
            "rw": true
          },
          "processingTime": {
            "desc": "Total execution time of the servlet's service method",
            "type": "long",
            "rw": false
          },
          "errorCount": {
            "desc": "Error count",
            "type": "int",
            "rw": false
          },
          "maxTime": {
            "desc": "Maximum processing time of a request",
            "type": "long",
            "rw": false
          },
          "available": {
            "desc": "The date and time at which this servlet will become available (in milliseconds since the epoch), or zero if the servlet is available. If this value equals Long.MAX_VALUE, the unavailability of this servlet is considered permanent.",
            "type": "long",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "asyncSupported": {
            "desc": "Async support",
            "type": "boolean",
            "rw": true
          },
          "backgroundProcessorDelay": {
            "desc": "The processor delay for this component.",
            "type": "int",
            "rw": true
          },
          "loadOnStartup": {
            "desc": "The load-on-startup order value (negative value means load on first call) for this servlet.",
            "type": "int",
            "rw": true
          },
          "maxInstances": {
            "desc": "Maximum number of STM instances.",
            "type": "int",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "loadTime": {
            "desc": "Time taken to load and initialise the Servlet",
            "type": "long",
            "rw": false
          },
          "stateManageable": {
            "desc": "State management support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "servletClass": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": false
          },
          "classLoadTime": {
            "desc": "Time taken to load the Servlet class",
            "type": "int",
            "rw": false
          },
          "requestCount": {
            "desc": "Number of requests processed by this wrapper",
            "type": "int",
            "rw": false
          },
          "singleThreadModel": {
            "desc": "Does this servlet implement the SingleThreadModel interface?",
            "type": "boolean",
            "rw": false
          }
        }
      },
      "context=/manager,host=localhost,type=Manager": {
        "desc": "Standard implementation of the Manager interface",
        "op": {
          "getCreationTime": {
            "ret": "java.lang.String",
            "desc": "Get the creation time",
            "args": [
              {
                "desc": "Id of the session",
                "name": "sessionId",
                "type": "java.lang.String"
              }
            ]
          },
          "listSessionIds": {
            "ret": "java.lang.String",
            "desc": "Return the list of active session ids",
            "args": []
          },
          "getLastAccessedTime": {
            "ret": "java.lang.String",
            "desc": "Get the last access time",
            "args": [
              {
                "desc": "Id of the session",
                "name": "sessionId",
                "type": "java.lang.String"
              }
            ]
          },
          "expireSession": {
            "ret": "void",
            "desc": "Expire a session",
            "args": [
              {
                "desc": "Id of the session",
                "name": "sessionId",
                "type": "java.lang.String"
              }
            ]
          },
          "getSessionAttribute": {
            "ret": "java.lang.String",
            "desc": "Return a session attribute",
            "args": [
              {
                "desc": "Id of the session",
                "name": "sessionId",
                "type": "java.lang.String"
              },
              {
                "desc": "key of the attribute",
                "name": "key",
                "type": "java.lang.String"
              }
            ]
          },
          "getCreationTimestamp": {
            "ret": "long",
            "desc": "Get the creation timestamp",
            "args": [
              {
                "desc": "Id of the session",
                "name": "sessionId",
                "type": "java.lang.String"
              }
            ]
          },
          "getLastAccessedTimestamp": {
            "ret": "long",
            "desc": "Get the last access timestamp",
            "args": [
              {
                "desc": "Id of the session",
                "name": "sessionId",
                "type": "java.lang.String"
              }
            ]
          },
          "backgroundProcess": {
            "ret": "void",
            "desc": "Invalidate all sessions that have expired.",
            "args": []
          }
        },
        "attr": {
          "sessionMaxAliveTime": {
            "desc": "Longest time an expired session had been alive",
            "type": "int",
            "rw": true
          },
          "jvmRoute": {
            "desc": "Retrieve the JvmRoute for the enclosing Engine",
            "type": "java.lang.String",
            "rw": false
          },
          "secureRandomProvider": {
            "desc": "The secure random number generator provider name",
            "type": "java.lang.String",
            "rw": true
          },
          "duplicates": {
            "desc": "Number of duplicated session ids generated",
            "type": "int",
            "rw": true
          },
          "maxInactiveInterval": {
            "desc": "The default maximum inactive interval for Sessions                        created by this Manager",
            "type": "int",
            "rw": true
          },
          "activeSessions": {
            "desc": "Number of active sessions at this moment",
            "type": "int",
            "rw": false
          },
          "sessionCounter": {
            "desc": "Total number of sessions created by this manager",
            "type": "long",
            "rw": true
          },
          "sessionAverageAliveTime": {
            "desc": "Average time an expired session had been alive",
            "type": "int",
            "rw": false
          },
          "sessionIdLength": {
            "desc": "The session id length (in bytes) of Sessions                        created by this Manager",
            "type": "int",
            "rw": true
          },
          "processingTime": {
            "desc": "Time spent doing housekeeping and expiration",
            "type": "long",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "processExpiresFrequency": {
            "desc": "The frequency of the manager checks (expiration and passivation)",
            "type": "int",
            "rw": true
          },
          "maxActive": {
            "desc": "Maximum number of active sessions so far",
            "type": "int",
            "rw": true
          },
          "distributable": {
            "desc": "The distributable flag for Sessions created by this                        Manager",
            "type": "boolean",
            "rw": true
          },
          "sessionCreateRate": {
            "desc": "Session creation rate in sessions per minute",
            "type": "int",
            "rw": false
          },
          "maxActiveSessions": {
            "desc": "The maximum number of active Sessions allowed, or -1                        for no limit",
            "type": "int",
            "rw": true
          },
          "sessionExpireRate": {
            "desc": "Session expiration rate in sessions per minute",
            "type": "int",
            "rw": false
          },
          "name": {
            "desc": "The descriptive name of this Manager implementation                        (for logging)",
            "type": "java.lang.String",
            "rw": false
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "secureRandomAlgorithm": {
            "desc": "The secure random number generator algorithm name",
            "type": "java.lang.String",
            "rw": true
          },
          "rejectedSessions": {
            "desc": "Number of sessions we rejected due to maxActive beeing reached",
            "type": "int",
            "rw": false
          },
          "expiredSessions": {
            "desc": "Number of sessions that expired ( doesn't include explicit invalidations )",
            "type": "long",
            "rw": true
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "pathname": {
            "desc": "Path name of the disk file in which active sessions",
            "type": "java.lang.String",
            "rw": true
          },
          "secureRandomClass": {
            "desc": "The secure random number generator class name",
            "type": "java.lang.String",
            "rw": true
          }
        }
      },
      "context=/,host=localhost,type=Manager": {
        "desc": "Standard implementation of the Manager interface",
        "op": {
          "getCreationTime": {
            "ret": "java.lang.String",
            "desc": "Get the creation time",
            "args": [
              {
                "desc": "Id of the session",
                "name": "sessionId",
                "type": "java.lang.String"
              }
            ]
          },
          "listSessionIds": {
            "ret": "java.lang.String",
            "desc": "Return the list of active session ids",
            "args": []
          },
          "getLastAccessedTime": {
            "ret": "java.lang.String",
            "desc": "Get the last access time",
            "args": [
              {
                "desc": "Id of the session",
                "name": "sessionId",
                "type": "java.lang.String"
              }
            ]
          },
          "expireSession": {
            "ret": "void",
            "desc": "Expire a session",
            "args": [
              {
                "desc": "Id of the session",
                "name": "sessionId",
                "type": "java.lang.String"
              }
            ]
          },
          "getSessionAttribute": {
            "ret": "java.lang.String",
            "desc": "Return a session attribute",
            "args": [
              {
                "desc": "Id of the session",
                "name": "sessionId",
                "type": "java.lang.String"
              },
              {
                "desc": "key of the attribute",
                "name": "key",
                "type": "java.lang.String"
              }
            ]
          },
          "getCreationTimestamp": {
            "ret": "long",
            "desc": "Get the creation timestamp",
            "args": [
              {
                "desc": "Id of the session",
                "name": "sessionId",
                "type": "java.lang.String"
              }
            ]
          },
          "getLastAccessedTimestamp": {
            "ret": "long",
            "desc": "Get the last access timestamp",
            "args": [
              {
                "desc": "Id of the session",
                "name": "sessionId",
                "type": "java.lang.String"
              }
            ]
          },
          "backgroundProcess": {
            "ret": "void",
            "desc": "Invalidate all sessions that have expired.",
            "args": []
          }
        },
        "attr": {
          "sessionMaxAliveTime": {
            "desc": "Longest time an expired session had been alive",
            "type": "int",
            "rw": true
          },
          "jvmRoute": {
            "desc": "Retrieve the JvmRoute for the enclosing Engine",
            "type": "java.lang.String",
            "rw": false
          },
          "secureRandomProvider": {
            "desc": "The secure random number generator provider name",
            "type": "java.lang.String",
            "rw": true
          },
          "duplicates": {
            "desc": "Number of duplicated session ids generated",
            "type": "int",
            "rw": true
          },
          "maxInactiveInterval": {
            "desc": "The default maximum inactive interval for Sessions                        created by this Manager",
            "type": "int",
            "rw": true
          },
          "activeSessions": {
            "desc": "Number of active sessions at this moment",
            "type": "int",
            "rw": false
          },
          "sessionCounter": {
            "desc": "Total number of sessions created by this manager",
            "type": "long",
            "rw": true
          },
          "sessionAverageAliveTime": {
            "desc": "Average time an expired session had been alive",
            "type": "int",
            "rw": false
          },
          "sessionIdLength": {
            "desc": "The session id length (in bytes) of Sessions                        created by this Manager",
            "type": "int",
            "rw": true
          },
          "processingTime": {
            "desc": "Time spent doing housekeeping and expiration",
            "type": "long",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "processExpiresFrequency": {
            "desc": "The frequency of the manager checks (expiration and passivation)",
            "type": "int",
            "rw": true
          },
          "maxActive": {
            "desc": "Maximum number of active sessions so far",
            "type": "int",
            "rw": true
          },
          "distributable": {
            "desc": "The distributable flag for Sessions created by this                        Manager",
            "type": "boolean",
            "rw": true
          },
          "sessionCreateRate": {
            "desc": "Session creation rate in sessions per minute",
            "type": "int",
            "rw": false
          },
          "maxActiveSessions": {
            "desc": "The maximum number of active Sessions allowed, or -1                        for no limit",
            "type": "int",
            "rw": true
          },
          "sessionExpireRate": {
            "desc": "Session expiration rate in sessions per minute",
            "type": "int",
            "rw": false
          },
          "name": {
            "desc": "The descriptive name of this Manager implementation                        (for logging)",
            "type": "java.lang.String",
            "rw": false
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "secureRandomAlgorithm": {
            "desc": "The secure random number generator algorithm name",
            "type": "java.lang.String",
            "rw": true
          },
          "rejectedSessions": {
            "desc": "Number of sessions we rejected due to maxActive beeing reached",
            "type": "int",
            "rw": false
          },
          "expiredSessions": {
            "desc": "Number of sessions that expired ( doesn't include explicit invalidations )",
            "type": "long",
            "rw": true
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "pathname": {
            "desc": "Path name of the disk file in which active sessions",
            "type": "java.lang.String",
            "rw": true
          },
          "secureRandomClass": {
            "desc": "The secure random number generator class name",
            "type": "java.lang.String",
            "rw": true
          }
        }
      },
      "type=NamingResources": {
        "desc": "Holds and manages the naming resources defined in the                        J2EE Enterprise Naming Context and their associated                         JNDI context",
        "op": {
          "removeResourceLink": {
            "ret": "void",
            "desc": "Remove any resource link reference with the specified name",
            "args": [
              {
                "desc": "Name of the resource reference to remove",
                "name": "resourceLinkName",
                "type": "java.lang.String"
              }
            ]
          },
          "addEnvironment": {
            "ret": "void",
            "desc": "Add an environment entry for this web application",
            "args": [
              {
                "desc": "New environment entry name",
                "name": "envName",
                "type": "java.lang.String"
              },
              {
                "desc": "New environment entry type",
                "name": "type",
                "type": "java.lang.String"
              },
              {
                "desc": "New environment entry value",
                "name": "value",
                "type": "java.lang.String"
              }
            ]
          },
          "removeResource": {
            "ret": "void",
            "desc": "Remove any resource reference with the specified name",
            "args": [
              {
                "desc": "Name of the resource reference to remove",
                "name": "resourceName",
                "type": "java.lang.String"
              }
            ]
          },
          "removeEnvironment": {
            "ret": "void",
            "desc": "Remove any environment entry with the specified name",
            "args": [
              {
                "desc": "Name of the environment entry to remove",
                "name": "envName",
                "type": "java.lang.String"
              }
            ]
          },
          "addResourceLink": {
            "ret": "void",
            "desc": "Add a resource link reference for this web application",
            "args": [
              {
                "desc": "New resource reference name",
                "name": "resourceLinkName",
                "type": "java.lang.String"
              },
              {
                "desc": "New resource reference type",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "addResource": {
            "ret": "void",
            "desc": "Add a resource reference for this web application",
            "args": [
              {
                "desc": "New resource reference name",
                "name": "resourceName",
                "type": "java.lang.String"
              },
              {
                "desc": "New resource reference type",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "resources": {
            "desc": "MBean Names of all the defined resource references                        for this application.",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "container": {
            "desc": "The container with which the naming resources are associated.",
            "type": "java.lang.Object",
            "rw": false
          },
          "environments": {
            "desc": "MBean Names of the set of defined environment entries                        for this web application",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "resourceLinks": {
            "desc": "MBean Names of all the defined resource link references                        for this application.",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "port=8009,type=Connector": {
        "desc": "Implementation of a Coyote connector",
        "op": {
          "destroy": {
            "ret": "void",
            "desc": "Destroy",
            "args": []
          },
          "pause": {
            "ret": "void",
            "desc": "Start",
            "args": []
          },
          "stop": {
            "ret": "void",
            "desc": "Stop",
            "args": []
          },
          "resume": {
            "ret": "void",
            "desc": "Stop",
            "args": []
          },
          "start": {
            "ret": "void",
            "desc": "Start",
            "args": []
          },
          "init": {
            "ret": "void",
            "desc": "Init",
            "args": []
          }
        },
        "attr": {
          "port": {
            "desc": "The port number on which this connector is configured to listen for requests. The special value of 0 means select a random free port when the socket is bound.",
            "type": "int",
            "rw": true
          },
          "useIPVHosts": {
            "desc": "Should IP-based virtual hosting be used? ",
            "type": "boolean",
            "rw": true
          },
          "redirectPort": {
            "desc": "The redirect port for non-SSL to SSL redirects",
            "type": "int",
            "rw": true
          },
          "minSpareThreads": {
            "desc": "The number of request processing threads that will be created",
            "type": "int",
            "rw": true
          },
          "secure": {
            "desc": "Is this a secure (SSL) Connector?",
            "type": "boolean",
            "rw": true
          },
          "acceptCount": {
            "desc": "The accept count for this Connector",
            "type": "int",
            "rw": true
          },
          "maxThreads": {
            "desc": "The maximum number of request processing threads to be created",
            "type": "int",
            "rw": true
          },
          "URIEncoding": {
            "desc": "Character encoding used to decode the URI",
            "type": "java.lang.String",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "packetSize": {
            "desc": "The ajp packet size.",
            "type": "int",
            "rw": true
          },
          "processorCache": {
            "desc": "The processor cache size.",
            "type": "int",
            "rw": true
          },
          "scheme": {
            "desc": "Protocol name for this Connector (http, https)",
            "type": "java.lang.String",
            "rw": true
          },
          "sslProtocols": {
            "desc": "Comma-separated list of SSL protocol variants to be enabled",
            "type": "java.lang.String",
            "rw": true
          },
          "localPort": {
            "desc": "The port number on which this connector is listening to requests. If the special value for port of zero is used then this method will report the actual port bound.",
            "type": "int",
            "rw": true
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "maxHeaderCount": {
            "desc": "The maximum number of headers that are allowed by the container. 100 by default. A value of less than 0 means no limit.",
            "type": "int",
            "rw": true
          },
          "maxParameterCount": {
            "desc": "The maximum number of parameters (GET plus POST) which will be automatically parsed by the container. 10000 by default. A value of less than 0 means no limit.",
            "type": "int",
            "rw": true
          },
          "maxSavePostSize": {
            "desc": "Maximum size of a POST which will be saved by the container during authentication",
            "type": "int",
            "rw": true
          },
          "executorName": {
            "desc": "The name of the executor - if any - associated with this Connector",
            "type": "java.lang.String",
            "rw": false
          },
          "keepAliveTimeout": {
            "desc": "The number of seconds Tomcat will wait for a subsequent request before closing the connection",
            "type": "int",
            "rw": true
          },
          "protocolHandlerClassName": {
            "desc": "Coyote Protocol handler class name",
            "type": "java.lang.String",
            "rw": false
          },
          "threadPriority": {
            "desc": "The thread priority for processors",
            "type": "int",
            "rw": true
          },
          "tcpNoDelay": {
            "desc": "Should we use TCP no delay?",
            "type": "boolean",
            "rw": true
          },
          "protocol": {
            "desc": "Coyote protocol handler in use",
            "type": "java.lang.String",
            "rw": true
          },
          "maxKeepAliveRequests": {
            "desc": "Maximum number of Keep-Alive requests to honor per connection",
            "type": "int",
            "rw": true
          },
          "proxyName": {
            "desc": "Ther Server name to which we should pretend requests to this Connector",
            "type": "java.lang.String",
            "rw": true
          },
          "enableLookups": {
            "desc": "The 'enable DNS lookups' flag for this Connector",
            "type": "boolean",
            "rw": true
          },
          "maxPostSize": {
            "desc": "Maximum size in bytes of a POST which will be handled by the servlet API provided features",
            "type": "int",
            "rw": true
          },
          "proxyPort": {
            "desc": "Ther Server port to which we should pretend requests to this Connector",
            "type": "int",
            "rw": true
          },
          "connectionLinger": {
            "desc": "Linger value on the incoming connection",
            "type": "int",
            "rw": true
          },
          "maxSwallowSize": {
            "desc": "The maximum number of request body bytes to be swallowed by Tomcat for an aborted upload",
            "type": "int",
            "rw": true
          },
          "connectionTimeout": {
            "desc": "Timeout value on the incoming connection",
            "type": "int",
            "rw": true
          },
          "address": {
            "desc": "The IP address on which to bind",
            "type": "java.lang.String",
            "rw": true
          },
          "xpoweredBy": {
            "desc": "Is generation of X-Powered-By response header enabled/disabled?",
            "type": "boolean",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "allowTrace": {
            "desc": "Allow disabling TRACE method",
            "type": "boolean",
            "rw": true
          },
          "useBodyEncodingForURI": {
            "desc": "Should the body encoding be used for URI query parameters",
            "type": "boolean",
            "rw": true
          },
          "secret": {
            "desc": "Authentication secret (I guess ... not in Javadocs)",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "context=/,host=localhost,name=NonLoginAuthenticator,type=Valve": {
        "desc": "An Authenticator and Valve implementation that checks only security constraints not involving user authentication",
        "attr": {
          "changeSessionIdOnAuthentication": {
            "desc": "Controls if the session ID is changed if a session exists at the point where users are authenticated",
            "type": "boolean",
            "rw": true
          },
          "disableProxyCaching": {
            "desc": "Controls the caching of pages that are protected by security constraints",
            "type": "boolean",
            "rw": true
          },
          "cache": {
            "desc": "Should we cache authenticated Principals if the request is part of an HTTP session?",
            "type": "boolean",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "securePagesWithPragma": {
            "desc": "Controls the caching of pages that are protected by security constraints",
            "type": "boolean",
            "rw": true
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "realmPath=/realm0/realm0,type=Realm": {
        "desc": "Realm connected to a UserDatabase as a global JNDI resource",
        "op": {
          "destroy": {
            "ret": "void",
            "desc": "Destroy",
            "args": []
          },
          "stop": {
            "ret": "void",
            "desc": "Stop",
            "args": []
          },
          "start": {
            "ret": "void",
            "desc": "Start",
            "args": []
          },
          "init": {
            "ret": "void",
            "desc": "Init",
            "args": []
          }
        },
        "attr": {
          "digestEncoding": {
            "desc": "The digest encoding charset.",
            "type": "java.lang.String",
            "rw": true
          },
          "realmPath": {
            "desc": "The realm path",
            "type": "java.lang.String",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "allRolesMode": {
            "desc": "The all roles mode.",
            "type": "java.lang.String",
            "rw": true
          },
          "digest": {
            "desc": "Digest algorithm used in storing passwords in a non-plaintext format",
            "type": "java.lang.String",
            "rw": true
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "validate": {
            "desc": "The 'validate certificate chains' flag.",
            "type": "boolean",
            "rw": true
          },
          "resourceName": {
            "desc": "The global JNDI name of the UserDatabase resource to use",
            "type": "java.lang.String",
            "rw": true
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,WebModule=//localhost/manager,j2eeType=Servlet,name=jsp": {
        "desc": "Wrapper that represents an individual servlet definition",
        "op": {
          "findSecurityReference": {
            "ret": "java.lang.String",
            "desc": "Return the security role link for the specified security role reference name.",
            "args": [
              {
                "desc": "Security role reference used within this servle",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "addMapping": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "removeInitParameter": {
            "ret": "void",
            "desc": "Remove the specified initialization parameter from this servlet.",
            "args": [
              {
                "desc": "Name of the initialization parameter to remove",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeSecurityReference": {
            "ret": "void",
            "desc": "Remove any security role reference for the specified role name.",
            "args": [
              {
                "desc": "Security role used within this servlet to be removeds",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "findMappingObject": {
            "ret": "org.apache.catalina.Wrapper",
            "desc": "Return an object which may be utilized for mapping to this component",
            "args": []
          },
          "addValve": {
            "ret": "java.lang.String",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new valve to be added",
                "name": "valveType",
                "type": "java.lang.String"
              }
            ]
          },
          "addLifecycleListener": {
            "ret": "void",
            "desc": "Add a lifecycle listener to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new lifecycle listener to be added",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "removeLifecycleListeners": {
            "ret": "void",
            "desc": "Removes lifecycle listeners of given class type from this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the lifecycle listeners to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "removeValve": {
            "ret": "void",
            "desc": "Remove a valve from this Wrapper",
            "args": [
              {
                "desc": "Objectname of the valve to be removed",
                "name": "valveName",
                "type": "java.lang.String"
              }
            ]
          },
          "addSecurityReference": {
            "ret": "void",
            "desc": "Add a new security role reference record to the set of records for this servlet.",
            "args": [
              {
                "desc": "Role name used within this servlet",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Role name used within the web application",
                "name": "link",
                "type": "java.lang.String"
              }
            ]
          },
          "addInitParameter": {
            "ret": "void",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Name of this initialization parameter to add",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Value of this initialization parameter to add",
                "name": "value",
                "type": "java.lang.String"
              }
            ]
          },
          "findInitParameters": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the names of all defined initialization parameters for this servlet.",
            "args": []
          },
          "removeMapping": {
            "ret": "void",
            "desc": "Remove a mapping associated with the wrapper.",
            "args": [
              {
                "desc": "The pattern to remove",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "findSecurityReferences": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of security role reference names associated with this servlet",
            "args": []
          },
          "findMappings": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the mappings associated with this wrapper",
            "args": []
          },
          "findInitParameter": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "minTime": {
            "desc": "Minimum processing time of a request",
            "type": "long",
            "rw": false
          },
          "runAs": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": true
          },
          "countAllocated": {
            "desc": "The count of allocations that are currently active (even if they  are for the same instance, as will be true on a non-STM servlet).",
            "type": "int",
            "rw": false
          },
          "eventProvider": {
            "desc": "Event provider support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "statisticsProvider": {
            "desc": "Performance statistics support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "objectName": {
            "desc": "Name of the object",
            "type": "java.lang.String",
            "rw": true
          },
          "processingTime": {
            "desc": "Total execution time of the servlet's service method",
            "type": "long",
            "rw": false
          },
          "errorCount": {
            "desc": "Error count",
            "type": "int",
            "rw": false
          },
          "maxTime": {
            "desc": "Maximum processing time of a request",
            "type": "long",
            "rw": false
          },
          "available": {
            "desc": "The date and time at which this servlet will become available (in milliseconds since the epoch), or zero if the servlet is available. If this value equals Long.MAX_VALUE, the unavailability of this servlet is considered permanent.",
            "type": "long",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "asyncSupported": {
            "desc": "Async support",
            "type": "boolean",
            "rw": true
          },
          "backgroundProcessorDelay": {
            "desc": "The processor delay for this component.",
            "type": "int",
            "rw": true
          },
          "loadOnStartup": {
            "desc": "The load-on-startup order value (negative value means load on first call) for this servlet.",
            "type": "int",
            "rw": true
          },
          "maxInstances": {
            "desc": "Maximum number of STM instances.",
            "type": "int",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "loadTime": {
            "desc": "Time taken to load and initialise the Servlet",
            "type": "long",
            "rw": false
          },
          "stateManageable": {
            "desc": "State management support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "servletClass": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": false
          },
          "classLoadTime": {
            "desc": "Time taken to load the Servlet class",
            "type": "int",
            "rw": false
          },
          "requestCount": {
            "desc": "Number of requests processed by this wrapper",
            "type": "int",
            "rw": false
          },
          "singleThreadModel": {
            "desc": "Does this servlet implement the SingleThreadModel interface?",
            "type": "boolean",
            "rw": false
          }
        }
      },
      "name=HttpRequest4,type=RequestProcessor,worker=\"http-bio-8080\"": {
        "desc": null,
        "attr": {
          "requestProcessingTime": {
            "desc": "Introspected attribute requestProcessingTime",
            "type": "long",
            "rw": false
          },
          "protocol": {
            "desc": "Introspected attribute protocol",
            "type": "java.lang.String",
            "rw": false
          },
          "bytesSent": {
            "desc": "Introspected attribute bytesSent",
            "type": "long",
            "rw": true
          },
          "rpName": {
            "desc": "Introspected attribute rpName",
            "type": "javax.management.ObjectName",
            "rw": true
          },
          "processingTime": {
            "desc": "Introspected attribute processingTime",
            "type": "long",
            "rw": true
          },
          "currentQueryString": {
            "desc": "Introspected attribute currentQueryString",
            "type": "java.lang.String",
            "rw": false
          },
          "requestBytesReceived": {
            "desc": "Introspected attribute requestBytesReceived",
            "type": "long",
            "rw": false
          },
          "errorCount": {
            "desc": "Introspected attribute errorCount",
            "type": "int",
            "rw": true
          },
          "maxTime": {
            "desc": "Introspected attribute maxTime",
            "type": "long",
            "rw": true
          },
          "maxRequestUri": {
            "desc": "Introspected attribute maxRequestUri",
            "type": "java.lang.String",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "stage": {
            "desc": "Introspected attribute stage",
            "type": "int",
            "rw": true
          },
          "lastRequestProcessingTime": {
            "desc": "Introspected attribute lastRequestProcessingTime",
            "type": "long",
            "rw": true
          },
          "globalProcessor": {
            "desc": "Introspected attribute globalProcessor",
            "type": "org.apache.coyote.RequestGroupInfo",
            "rw": true
          },
          "virtualHost": {
            "desc": "Introspected attribute virtualHost",
            "type": "java.lang.String",
            "rw": false
          },
          "serverPort": {
            "desc": "Introspected attribute serverPort",
            "type": "int",
            "rw": false
          },
          "bytesReceived": {
            "desc": "Introspected attribute bytesReceived",
            "type": "long",
            "rw": true
          },
          "currentUri": {
            "desc": "Introspected attribute currentUri",
            "type": "java.lang.String",
            "rw": false
          },
          "workerThreadName": {
            "desc": "Introspected attribute workerThreadName",
            "type": "java.lang.String",
            "rw": true
          },
          "remoteAddrForwarded": {
            "desc": "Introspected attribute remoteAddrForwarded",
            "type": "java.lang.String",
            "rw": false
          },
          "method": {
            "desc": "Introspected attribute method",
            "type": "java.lang.String",
            "rw": false
          },
          "requestCount": {
            "desc": "Introspected attribute requestCount",
            "type": "int",
            "rw": true
          },
          "requestBytesSent": {
            "desc": "Introspected attribute requestBytesSent",
            "type": "long",
            "rw": false
          },
          "contentLength": {
            "desc": "Introspected attribute contentLength",
            "type": "int",
            "rw": false
          },
          "remoteAddr": {
            "desc": "Introspected attribute remoteAddr",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,WebModule=//localhost/manager,j2eeType=Filter,name=CSRF": {
        "desc": "Wrapper that represents an individual servlet-filter definition",
        "attr": {
          "filterClass": {
            "desc": "Fully qualified class name of the filter object",
            "type": "java.lang.String",
            "rw": false
          },
          "filterInitParameterMap": {
            "desc": "Return the initiaization parameters associated with this filter",
            "type": "java.util.Map",
            "rw": false
          },
          "filterName": {
            "desc": "The name used to reference the filter in web.xml",
            "type": "java.lang.String",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "context=/,host=localhost,type=NamingResources": {
        "desc": "Holds and manages the naming resources defined in the                        J2EE Enterprise Naming Context and their associated                         JNDI context",
        "op": {
          "removeResourceLink": {
            "ret": "void",
            "desc": "Remove any resource link reference with the specified name",
            "args": [
              {
                "desc": "Name of the resource reference to remove",
                "name": "resourceLinkName",
                "type": "java.lang.String"
              }
            ]
          },
          "addEnvironment": {
            "ret": "void",
            "desc": "Add an environment entry for this web application",
            "args": [
              {
                "desc": "New environment entry name",
                "name": "envName",
                "type": "java.lang.String"
              },
              {
                "desc": "New environment entry type",
                "name": "type",
                "type": "java.lang.String"
              },
              {
                "desc": "New environment entry value",
                "name": "value",
                "type": "java.lang.String"
              }
            ]
          },
          "removeResource": {
            "ret": "void",
            "desc": "Remove any resource reference with the specified name",
            "args": [
              {
                "desc": "Name of the resource reference to remove",
                "name": "resourceName",
                "type": "java.lang.String"
              }
            ]
          },
          "removeEnvironment": {
            "ret": "void",
            "desc": "Remove any environment entry with the specified name",
            "args": [
              {
                "desc": "Name of the environment entry to remove",
                "name": "envName",
                "type": "java.lang.String"
              }
            ]
          },
          "addResourceLink": {
            "ret": "void",
            "desc": "Add a resource link reference for this web application",
            "args": [
              {
                "desc": "New resource reference name",
                "name": "resourceLinkName",
                "type": "java.lang.String"
              },
              {
                "desc": "New resource reference type",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "addResource": {
            "ret": "void",
            "desc": "Add a resource reference for this web application",
            "args": [
              {
                "desc": "New resource reference name",
                "name": "resourceName",
                "type": "java.lang.String"
              },
              {
                "desc": "New resource reference type",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "resources": {
            "desc": "MBean Names of all the defined resource references                        for this application.",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "container": {
            "desc": "The container with which the naming resources are associated.",
            "type": "java.lang.Object",
            "rw": false
          },
          "environments": {
            "desc": "MBean Names of the set of defined environment entries                        for this web application",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "resourceLinks": {
            "desc": "MBean Names of all the defined resource link references                        for this application.",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "host=localhost,name=AccessLogValve,type=Valve": {
        "desc": "Valve that generates a web server access log",
        "op": {
          "rotate": [
            {
              "ret": "void",
              "desc": "Check if the log file is due to be rotated and rotate if it is",
              "args": []
            },
            {
              "ret": "boolean",
              "desc": "Move the existing log file to a new name",
              "args": [
                {
                  "desc": "File name to move the log file to.",
                  "name": "newFileName",
                  "type": "java.lang.String"
                }
              ]
            }
          ]
        },
        "attr": {
          "buffered": {
            "desc": "Flag to buffering.",
            "type": "boolean",
            "rw": true
          },
          "enabled": {
            "desc": "Enable Access Logging",
            "type": "boolean",
            "rw": true
          },
          "condition": {
            "desc": "The value to look for conditional logging. The same as conditionUnless.",
            "type": "java.lang.String",
            "rw": true
          },
          "locale": {
            "desc": "The locale used to format timestamps in the access log lines",
            "type": "java.lang.String",
            "rw": true
          },
          "renameOnRotate": {
            "desc": "Flag to defer inclusion of the date stamp in the log file name until rotation.",
            "type": "boolean",
            "rw": true
          },
          "rotatable": {
            "desc": "Flag to indicate automatic log rotation.",
            "type": "boolean",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "asyncSupported": {
            "desc": "Does this valve support async reporting.",
            "type": "boolean",
            "rw": true
          },
          "suffix": {
            "desc": "The suffix that is added to log file filenames",
            "type": "java.lang.String",
            "rw": true
          },
          "fileDateFormat": {
            "desc": "The format for the date for date based log rotation",
            "type": "java.lang.String",
            "rw": true
          },
          "info": {
            "desc": "Information about this implementation",
            "type": "java.lang.String",
            "rw": false
          },
          "pattern": {
            "desc": "The pattern used to format our access log lines",
            "type": "java.lang.String",
            "rw": true
          },
          "directory": {
            "desc": "The directory in which log files are created",
            "type": "java.lang.String",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "prefix": {
            "desc": "The prefix that is added to log file filenames",
            "type": "java.lang.String",
            "rw": true
          },
          "encoding": {
            "desc": "Character set used to write the log file",
            "type": "java.lang.String",
            "rw": true
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "checkExists": {
            "desc": "Check for file existence before logging.",
            "type": "boolean",
            "rw": true
          },
          "conditionIf": {
            "desc": "The value to look for conditional logging.",
            "type": "java.lang.String",
            "rw": true
          },
          "conditionUnless": {
            "desc": "The value to look for conditional logging.",
            "type": "java.lang.String",
            "rw": true
          },
          "resolveHosts": {
            "desc": "Resolve hosts",
            "type": "boolean",
            "rw": true
          }
        }
      },
      "context=/,host=localhost,type=Cache": {
        "desc": null,
        "op": {
          "unload": {
            "ret": "boolean",
            "desc": "Introspected operation unload",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "java.lang.String"
              }
            ]
          },
          "allocate": {
            "ret": "boolean",
            "desc": "Introspected operation allocate",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "int"
              }
            ]
          },
          "load": {
            "ret": "void",
            "desc": "Introspected operation load",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "org.apache.naming.resources.CacheEntry"
              }
            ]
          },
          "lookup": {
            "ret": "org.apache.naming.resources.CacheEntry",
            "desc": "Introspected operation lookup",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "spareNotFoundEntries": {
            "desc": "Introspected attribute spareNotFoundEntries",
            "type": "int",
            "rw": true
          },
          "hitsCount": {
            "desc": "Introspected attribute hitsCount",
            "type": "long",
            "rw": false
          },
          "accessCount": {
            "desc": "Introspected attribute accessCount",
            "type": "long",
            "rw": false
          },
          "desiredEntryAccessRatio": {
            "desc": "Introspected attribute desiredEntryAccessRatio",
            "type": "long",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "cacheSize": {
            "desc": "Introspected attribute cacheSize",
            "type": "int",
            "rw": false
          },
          "maxAllocateIterations": {
            "desc": "Introspected attribute maxAllocateIterations",
            "type": "int",
            "rw": true
          },
          "cacheMaxSize": {
            "desc": "Introspected attribute cacheMaxSize",
            "type": "int",
            "rw": true
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,WebModule=//localhost/,j2eeType=Servlet,name=jolokia-agent": {
        "desc": "Wrapper that represents an individual servlet definition",
        "op": {
          "findSecurityReference": {
            "ret": "java.lang.String",
            "desc": "Return the security role link for the specified security role reference name.",
            "args": [
              {
                "desc": "Security role reference used within this servle",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "addMapping": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "removeInitParameter": {
            "ret": "void",
            "desc": "Remove the specified initialization parameter from this servlet.",
            "args": [
              {
                "desc": "Name of the initialization parameter to remove",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeSecurityReference": {
            "ret": "void",
            "desc": "Remove any security role reference for the specified role name.",
            "args": [
              {
                "desc": "Security role used within this servlet to be removeds",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "findMappingObject": {
            "ret": "org.apache.catalina.Wrapper",
            "desc": "Return an object which may be utilized for mapping to this component",
            "args": []
          },
          "addValve": {
            "ret": "java.lang.String",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new valve to be added",
                "name": "valveType",
                "type": "java.lang.String"
              }
            ]
          },
          "addLifecycleListener": {
            "ret": "void",
            "desc": "Add a lifecycle listener to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new lifecycle listener to be added",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "removeLifecycleListeners": {
            "ret": "void",
            "desc": "Removes lifecycle listeners of given class type from this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the lifecycle listeners to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "removeValve": {
            "ret": "void",
            "desc": "Remove a valve from this Wrapper",
            "args": [
              {
                "desc": "Objectname of the valve to be removed",
                "name": "valveName",
                "type": "java.lang.String"
              }
            ]
          },
          "addSecurityReference": {
            "ret": "void",
            "desc": "Add a new security role reference record to the set of records for this servlet.",
            "args": [
              {
                "desc": "Role name used within this servlet",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Role name used within the web application",
                "name": "link",
                "type": "java.lang.String"
              }
            ]
          },
          "addInitParameter": {
            "ret": "void",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Name of this initialization parameter to add",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Value of this initialization parameter to add",
                "name": "value",
                "type": "java.lang.String"
              }
            ]
          },
          "findInitParameters": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the names of all defined initialization parameters for this servlet.",
            "args": []
          },
          "removeMapping": {
            "ret": "void",
            "desc": "Remove a mapping associated with the wrapper.",
            "args": [
              {
                "desc": "The pattern to remove",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "findSecurityReferences": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of security role reference names associated with this servlet",
            "args": []
          },
          "findMappings": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the mappings associated with this wrapper",
            "args": []
          },
          "findInitParameter": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "minTime": {
            "desc": "Minimum processing time of a request",
            "type": "long",
            "rw": false
          },
          "runAs": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": true
          },
          "countAllocated": {
            "desc": "The count of allocations that are currently active (even if they  are for the same instance, as will be true on a non-STM servlet).",
            "type": "int",
            "rw": false
          },
          "eventProvider": {
            "desc": "Event provider support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "statisticsProvider": {
            "desc": "Performance statistics support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "objectName": {
            "desc": "Name of the object",
            "type": "java.lang.String",
            "rw": true
          },
          "processingTime": {
            "desc": "Total execution time of the servlet's service method",
            "type": "long",
            "rw": false
          },
          "errorCount": {
            "desc": "Error count",
            "type": "int",
            "rw": false
          },
          "maxTime": {
            "desc": "Maximum processing time of a request",
            "type": "long",
            "rw": false
          },
          "available": {
            "desc": "The date and time at which this servlet will become available (in milliseconds since the epoch), or zero if the servlet is available. If this value equals Long.MAX_VALUE, the unavailability of this servlet is considered permanent.",
            "type": "long",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "asyncSupported": {
            "desc": "Async support",
            "type": "boolean",
            "rw": true
          },
          "backgroundProcessorDelay": {
            "desc": "The processor delay for this component.",
            "type": "int",
            "rw": true
          },
          "loadOnStartup": {
            "desc": "The load-on-startup order value (negative value means load on first call) for this servlet.",
            "type": "int",
            "rw": true
          },
          "maxInstances": {
            "desc": "Maximum number of STM instances.",
            "type": "int",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "loadTime": {
            "desc": "Time taken to load and initialise the Servlet",
            "type": "long",
            "rw": false
          },
          "stateManageable": {
            "desc": "State management support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "servletClass": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": false
          },
          "classLoadTime": {
            "desc": "Time taken to load the Servlet class",
            "type": "int",
            "rw": false
          },
          "requestCount": {
            "desc": "Number of requests processed by this wrapper",
            "type": "int",
            "rw": false
          },
          "singleThreadModel": {
            "desc": "Does this servlet implement the SingleThreadModel interface?",
            "type": "boolean",
            "rw": false
          }
        }
      },
      "type=MBeanFactory": {
        "desc": "Factory for MBeans and corresponding components",
        "op": {
          "createWebappLoader": {
            "ret": "java.lang.String",
            "desc": "Create a new Web Application Loader",
            "args": [
              {
                "desc": "MBean Name of the associated parent component",
                "name": "parent",
                "type": "java.lang.String"
              }
            ]
          },
          "createHttpsConnector": {
            "ret": "java.lang.String",
            "desc": "Create a new HttpsConnector",
            "args": [
              {
                "desc": "MBean Name of the associated parent component",
                "name": "parent",
                "type": "java.lang.String"
              },
              {
                "desc": "The IP address on which to bind",
                "name": "address",
                "type": "java.lang.String"
              },
              {
                "desc": "TCP port number to listen on",
                "name": "port",
                "type": "int"
              }
            ]
          },
          "createMemoryRealm": {
            "ret": "java.lang.String",
            "desc": "Create a new Memory Realm",
            "args": [
              {
                "desc": "MBean Name of the associated parent component",
                "name": "parent",
                "type": "java.lang.String"
              }
            ]
          },
          "removeService": {
            "ret": "void",
            "desc": "Remove an existing Service",
            "args": [
              {
                "desc": "MBean Name of the component to be removed",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "createUserDatabaseRealm": {
            "ret": "java.lang.String",
            "desc": "Create a new UserDatabase Realm",
            "args": [
              {
                "desc": "MBean Name of the associated parent component",
                "name": "parent",
                "type": "java.lang.String"
              },
              {
                "desc": "Global JNDI resource name of our UserDatabase instance",
                "name": "resourceName",
                "type": "java.lang.String"
              }
            ]
          },
          "createJDBCRealm": {
            "ret": "java.lang.String",
            "desc": "Create a new JDBC Realm",
            "args": [
              {
                "desc": "MBean Name of the associated parent component",
                "name": "parent",
                "type": "java.lang.String"
              }
            ]
          },
          "createAccessLoggerValve": {
            "ret": "java.lang.String",
            "desc": "Create a new AccessLoggerValve",
            "args": [
              {
                "desc": "MBean Name of the associated parent component",
                "name": "parent",
                "type": "java.lang.String"
              }
            ]
          },
          "removeValve": {
            "ret": "void",
            "desc": "Remove an existing Valve",
            "args": [
              {
                "desc": "MBean Name of the component to be removed",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "createValve": {
            "ret": "java.lang.String",
            "desc": "Create a new Valve for the given Container",
            "args": [
              {
                "desc": "Fully qualified class name of the Valve to create",
                "name": "className",
                "type": "java.lang.String"
              },
              {
                "desc": "MBean Name of the associated parent component",
                "name": "parent",
                "type": "java.lang.String"
              }
            ]
          },
          "removeHost": {
            "ret": "void",
            "desc": "Remove an existing Host",
            "args": [
              {
                "desc": "MBean Name of the component to be removed",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "createDataSourceRealm": {
            "ret": "java.lang.String",
            "desc": "Create a new DataSource Realm",
            "args": [
              {
                "desc": "MBean Name of the associated parent component",
                "name": "parent",
                "type": "java.lang.String"
              },
              {
                "desc": "The JNDI named JDBC DataSource",
                "name": "dataSourceName",
                "type": "java.lang.String"
              },
              {
                "desc": "The column in the user role table that names a role",
                "name": "roleNameCol",
                "type": "java.lang.String"
              },
              {
                "desc": "The column in the user table that holds the user's                         credentials",
                "name": "userCredCol",
                "type": "java.lang.String"
              },
              {
                "desc": "The column in the user table that holds the user's                         username",
                "name": "userNameCol",
                "type": "java.lang.String"
              },
              {
                "desc": "The table that holds the relation between user's and                         roles",
                "name": "userRoleTable",
                "type": "java.lang.String"
              },
              {
                "desc": "The table that holds user data",
                "name": "userTable",
                "type": "java.lang.String"
              }
            ]
          },
          "removeRealm": {
            "ret": "void",
            "desc": "Remove an existing Realm",
            "args": [
              {
                "desc": "MBean Name of the component to be removed",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "createSingleSignOn": {
            "ret": "java.lang.String",
            "desc": "Create a new Single Sign On Valve",
            "args": [
              {
                "desc": "MBean Name of the associated parent component",
                "name": "parent",
                "type": "java.lang.String"
              }
            ]
          },
          "createStandardManager": {
            "ret": "java.lang.String",
            "desc": "Create a new StandardManager",
            "args": [
              {
                "desc": "MBean Name of the associated parent component",
                "name": "parent",
                "type": "java.lang.String"
              }
            ]
          },
          "removeLoader": {
            "ret": "void",
            "desc": "Remove an existing Loader",
            "args": [
              {
                "desc": "MBean Name of the component to be removed",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "createAjpConnector": {
            "ret": "java.lang.String",
            "desc": "Create a new AjpConnector",
            "args": [
              {
                "desc": "MBean Name of the associated parent component",
                "name": "parent",
                "type": "java.lang.String"
              },
              {
                "desc": "The IP address on which to bind",
                "name": "address",
                "type": "java.lang.String"
              },
              {
                "desc": "TCP port number to listen on",
                "name": "port",
                "type": "int"
              }
            ]
          },
          "removeManager": {
            "ret": "void",
            "desc": "Remove an existing Manager",
            "args": [
              {
                "desc": "MBean Name of the component to be removed",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "createHttpConnector": {
            "ret": "java.lang.String",
            "desc": "Create a new HttpConnector",
            "args": [
              {
                "desc": "MBean Name of the associated parent component",
                "name": "parent",
                "type": "java.lang.String"
              },
              {
                "desc": "The IP address on which to bind",
                "name": "address",
                "type": "java.lang.String"
              },
              {
                "desc": "TCP port number to listen on",
                "name": "port",
                "type": "int"
              }
            ]
          },
          "createStandardServiceEngine": {
            "ret": "java.lang.String",
            "desc": "Create a new StandardService and StandardEngine",
            "args": [
              {
                "desc": "Domain used for MBeans associated with the new Service",
                "name": "domain",
                "type": "java.lang.String"
              },
              {
                "desc": "Default host name for the new Engine",
                "name": "defaultHost",
                "type": "java.lang.String"
              },
              {
                "desc": "Base directory value for the new Engine",
                "name": "baseDir",
                "type": "java.lang.String"
              }
            ]
          },
          "createStandardContext": {
            "ret": "java.lang.String",
            "desc": "Create a new StandardContext",
            "args": [
              {
                "desc": "MBean Name of the associated parent component",
                "name": "parent",
                "type": "java.lang.String"
              },
              {
                "desc": "The context path for this Context",
                "name": "path",
                "type": "java.lang.String"
              },
              {
                "desc": "Document base directory (or WAR) for ths Context",
                "name": "docBase",
                "type": "java.lang.String"
              }
            ]
          },
          "createStandardHost": {
            "ret": "java.lang.String",
            "desc": "Create a new StandardHost",
            "args": [
              {
                "desc": "MBean Name of the associated parent component",
                "name": "parent",
                "type": "java.lang.String"
              },
              {
                "desc": "Unique name of this Host",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "set host deployment directory",
                "name": "appBase",
                "type": "java.lang.String"
              },
              {
                "desc": "The auto deploy flag for this Host",
                "name": "autoDeploy",
                "type": "boolean"
              },
              {
                "desc": "The deploy on startup flag for this Host",
                "name": "deployOnStartup",
                "type": "boolean"
              },
              {
                "desc": "deploy Context XML config files property",
                "name": "deployXML",
                "type": "boolean"
              },
              {
                "desc": "Unpack WARs property",
                "name": "unpackWARs",
                "type": "boolean"
              }
            ]
          },
          "removeConnector": {
            "ret": "void",
            "desc": "Remove an existing Connector",
            "args": [
              {
                "desc": "MBean Name of the component to be removed",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeContext": {
            "ret": "void",
            "desc": "Remove an existing Context",
            "args": [
              {
                "desc": "MBean Name of the component to be removed",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "createRemoteAddrValve": {
            "ret": "java.lang.String",
            "desc": "Create a new Remote Address Filter Valve",
            "args": [
              {
                "desc": "MBean Name of the associated parent component",
                "name": "parent",
                "type": "java.lang.String"
              }
            ]
          },
          "createJNDIRealm": {
            "ret": "java.lang.String",
            "desc": "Create a new JNDI Realm",
            "args": [
              {
                "desc": "MBean Name of the associated parent component",
                "name": "parent",
                "type": "java.lang.String"
              }
            ]
          },
          "createRemoteHostValve": {
            "ret": "java.lang.String",
            "desc": "Create a new Remote Host Filter Valve",
            "args": [
              {
                "desc": "MBean Name of the associated parent component",
                "name": "parent",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "type=Server": {
        "desc": "Standard Server Component",
        "op": {
          "await": {
            "ret": "void",
            "desc": "Wait for the shutdown message",
            "args": []
          },
          "storeConfig": {
            "ret": "void",
            "desc": "Save current state to server.xml file",
            "args": []
          }
        },
        "attr": {
          "port": {
            "desc": "TCP port for shutdown messages",
            "type": "int",
            "rw": true
          },
          "managedResource": {
            "desc": "The managed resource this MBean is associated with",
            "type": "java.lang.Object",
            "rw": true
          },
          "address": {
            "desc": "The address on which we wait for shutdown commands.",
            "type": "java.lang.String",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "serviceNames": {
            "desc": "Object names of all services we know about",
            "type": "[Ljavax.management.ObjectName;",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "serverInfo": {
            "desc": "Tomcat server release identifier",
            "type": "java.lang.String",
            "rw": false
          },
          "shutdown": {
            "desc": "Shutdown password",
            "type": "java.lang.String",
            "rw": true
          }
        }
      },
      "host=localhost,name=StandardHostValve,type=Valve": {
        "desc": "Valve that implements the default basic behavior for the          StandardHost container implementation",
        "attr": {
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "asyncSupported": {
            "desc": "Does this valve support async reporting?",
            "type": "boolean",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "port=8080,type=Mapper": {
        "desc": "Maps requests received by the associated connector to Hosts, Contexts and Wrappers",
        "attr": {
          "connectorName": {
            "desc": "Name of the associated connector",
            "type": "java.lang.String",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,j2eeType=WebModule,name=//localhost/manager": {
        "desc": "Standard Context Component",
        "op": {
          "findSecurityRole": {
            "ret": "boolean",
            "desc": "Return 'true' if the specified security role is defined for this application; otherwise return 'false'.",
            "args": [
              {
                "desc": "Security role to verify",
                "name": "role",
                "type": "java.lang.String"
              }
            ]
          },
          "findApplicationListeners": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of application listener class names configured for this application.",
            "args": []
          },
          "addParameter": {
            "ret": "void",
            "desc": "Add a new context initialization parameter, replacing any existing value for the specified name.",
            "args": [
              {
                "desc": "Name of the new parameter",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Value of the new  parameter",
                "name": "value",
                "type": "java.lang.String"
              }
            ]
          },
          "addValve": {
            "ret": "java.lang.String",
            "desc": "Add a valve to this Context",
            "args": [
              {
                "desc": "Type(classname) of the new valve to be added",
                "name": "valveType",
                "type": "java.lang.String"
              }
            ]
          },
          "removeWrapperListener": {
            "ret": "void",
            "desc": "Remove a class name from the set of ContainerListener classes that will be added to newly created Wrappers.",
            "args": [
              {
                "desc": "Class name of a ContainerListener class to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "addApplicationParameter": {
            "ret": "void",
            "desc": "Add a new application parameter for this application.",
            "args": [
              {
                "desc": "Java class name of a listener class",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "addRoleMapping": {
            "ret": "void",
            "desc": "Add a security role reference for this web application.",
            "args": [
              {
                "desc": "Security role used in the application",
                "name": "role",
                "type": "java.lang.String"
              },
              {
                "desc": "Actual security role to check for",
                "name": "link",
                "type": "java.lang.String"
              }
            ]
          },
          "removeWatchedResource": {
            "ret": "void",
            "desc": "Remove the specified watched resource name from the list associated with this Context.",
            "args": [
              {
                "desc": "Name of the watched resource to be removed",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeValve": {
            "ret": "void",
            "desc": "Remove a valve from this Context",
            "args": [
              {
                "desc": "Objectname of the valve to be removed",
                "name": "valveName",
                "type": "java.lang.String"
              }
            ]
          },
          "addSecurityRole": {
            "ret": "void",
            "desc": "Add a new security role for this web application.",
            "args": [
              {
                "desc": "New security role",
                "name": "role",
                "type": "java.lang.String"
              }
            ]
          },
          "findInstanceListeners": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of InstanceListener classes that will be added to newly created Wrappers automatically.",
            "args": []
          },
          "findFilterDefs": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of defined filters for this Context.",
            "args": []
          },
          "findMimeMapping": {
            "ret": "java.lang.String",
            "desc": "Return the MIME type to which the specified extension is mapped, if any; otherwise return null.",
            "args": [
              {
                "desc": "Extension to map to a MIME type",
                "name": "extension",
                "type": "java.lang.String"
              }
            ]
          },
          "removeApplicationListener": {
            "ret": "void",
            "desc": "Remove the specified application listener class from the set of listeners for this application.",
            "args": [
              {
                "desc": "Java class name of the listener to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "findStatusPages": {
            "ret": "[Lint",
            "desc": "Return the set of HTTP status codes for which error pages have been specified.",
            "args": []
          },
          "findContainerListenerNames": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of container listener class names configured for this application.",
            "args": []
          },
          "findSecurityRoles": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the security roles defined for this application.",
            "args": []
          },
          "findStatusPage": {
            "ret": "java.lang.String",
            "desc": "Return the context-relative URI of the error page for the specified HTTP status code.",
            "args": [
              {
                "desc": "HTTP status code to look up",
                "name": "status",
                "type": "int"
              }
            ]
          },
          "addWatchedResource": {
            "ret": "void",
            "desc": " Add a resource which will be watched for reloading by the host auto deployer.",
            "args": [
              {
                "desc": "Path to the resource, either absolute or relative to docBase",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "init": {
            "ret": "void",
            "desc": "Register the context into the running server",
            "args": []
          },
          "findWrapperLifecycles": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of LifecycleListener classes that will be added to newly created Wrappers automatically.",
            "args": []
          },
          "removeRoleMapping": {
            "ret": "void",
            "desc": "Remove any security role reference for the specified name",
            "args": [
              {
                "desc": "Security role (as used in the application) to remove",
                "name": "role",
                "type": "java.lang.String"
              }
            ]
          },
          "removeLifecycleListeners": {
            "ret": "void",
            "desc": "Removes lifecycle listeners of given class type from this Context",
            "args": [
              {
                "desc": "Type(classname) of the lifecycle listeners to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "findErrorPages": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of defined error pages for all specified error codes and exception types.",
            "args": []
          },
          "removeChild": {
            "ret": "void",
            "desc": "Remove a child from this Context",
            "args": [
              {
                "desc": "Name of the existing child Container to be removed",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "findParameter": {
            "ret": "java.lang.String",
            "desc": "Return the value for the specified context initialization parameter name, if any; otherwise return null.",
            "args": [
              {
                "desc": "Name of the parameter to return",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "start": {
            "ret": "void",
            "desc": "Start",
            "args": []
          },
          "addChild": {
            "ret": "void",
            "desc": "Add a child to this Context",
            "args": [
              {
                "desc": "Type(classname) of the new child to be added",
                "name": "type",
                "type": "java.lang.String"
              },
              {
                "desc": "Name of the child to be added",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "addMimeMapping": {
            "ret": "void",
            "desc": "Add a new MIME mapping, replacing any existing mapping for the specified extension.",
            "args": [
              {
                "desc": "Filename extension being mapped",
                "name": "extension",
                "type": "java.lang.String"
              },
              {
                "desc": "Corresponding MIME type",
                "name": "mimeType",
                "type": "java.lang.String"
              }
            ]
          },
          "findErrorPage": [
            {
              "ret": "java.lang.String",
              "desc": "Return the error page entry for the specified HTTP error code, if any; otherwise return null",
              "args": [
                {
                  "desc": "Error code to look up",
                  "name": "errorCode",
                  "type": "int"
                }
              ]
            },
            {
              "ret": "java.lang.String",
              "desc": "Return the error page entry for the specified Java exception type, if any; otherwise return null.",
              "args": [
                {
                  "desc": "Exception type to look up",
                  "name": "exceptionType",
                  "type": "java.lang.String"
                }
              ]
            }
          ],
          "reload": {
            "ret": "void",
            "desc": "Reload the webapplication",
            "args": []
          },
          "stop": {
            "ret": "void",
            "desc": "Stop",
            "args": []
          },
          "findMimeMappings": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the extensions for which MIME mappings are defined.",
            "args": []
          },
          "findFilterMaps": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of filter mappings for this Context.",
            "args": []
          },
          "findWelcomeFile": {
            "ret": "boolean",
            "desc": "Return 'true' if the specified welcome file is defined for this Context; otherwise return 'false'.",
            "args": [
              {
                "desc": "Welcome file to verify",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeParameter": {
            "ret": "void",
            "desc": "Remove the context initialization parameter with the specified name, if it exists; otherwise, no action is taken.",
            "args": [
              {
                "desc": "Name of the parameter to remove",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeMimeMapping": {
            "ret": "void",
            "desc": "Remove the MIME mapping for the specified extension, if it exists; otherwise, no action is taken..",
            "args": [
              {
                "desc": "Extension to remove the mapping for",
                "name": "extension",
                "type": "java.lang.String"
              }
            ]
          },
          "findServletMapping": {
            "ret": "java.lang.String",
            "desc": "Return the servlet name mapped by the specified pattern..",
            "args": [
              {
                "desc": "Pattern for which a mapping is requested",
                "name": "pattern",
                "type": "java.lang.String"
              }
            ]
          },
          "addServletMapping": [
            {
              "ret": "void",
              "desc": "Add a new servlet mapping, replacing any existing mapping for the specified pattern.",
              "args": [
                {
                  "desc": "URL pattern to be mapped",
                  "name": "pattern",
                  "type": "java.lang.String"
                },
                {
                  "desc": "Name of the corresponding servlet to execute",
                  "name": "name",
                  "type": "java.lang.String"
                }
              ]
            },
            {
              "ret": "void",
              "desc": "Add a new servlet mapping, replacing any existing mapping for the specified pattern.",
              "args": [
                {
                  "desc": "URL pattern to be mapped",
                  "name": "pattern",
                  "type": "java.lang.String"
                },
                {
                  "desc": "Name of the corresponding servlet to execute",
                  "name": "name",
                  "type": "java.lang.String"
                },
                {
                  "desc": "'true' if name identifies the JspServlet and pattern contains a wildcard; 'false' otherwise",
                  "name": "jspWildcard",
                  "type": "boolean"
                }
              ]
            }
          ],
          "destroy": {
            "ret": "void",
            "desc": "Destroy the context",
            "args": []
          },
          "removeSecurityRole": {
            "ret": "void",
            "desc": "Remove any security role with the specified name.",
            "args": [
              {
                "desc": "Security role to remove",
                "name": "role",
                "type": "java.lang.String"
              }
            ]
          },
          "findFilterDef": {
            "ret": "java.lang.String",
            "desc": "Return the filter definition for the specified filter name, if any; otherwise return null.",
            "args": [
              {
                "desc": "Exception type to look up",
                "name": "exceptionType",
                "type": "java.lang.String"
              }
            ]
          },
          "findApplicationParameters": {
            "ret": "java.lang.String",
            "desc": "Return the set of application parameters for this application.",
            "args": []
          },
          "addWrapperLifecycle": {
            "ret": "void",
            "desc": "Add the classname of a LifecycleListener to be added to each Wrapper appended to this Context.",
            "args": [
              {
                "desc": "Java class name of a LifecycleListener class",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "removeWelcomeFile": {
            "ret": "void",
            "desc": "Remove the specified welcome file name from the list recognized by this Context.",
            "args": [
              {
                "desc": "Name of the welcome file to be removed",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "addWrapperListener": {
            "ret": "void",
            "desc": "Add the classname of a ContainerListener to be added to each Wrapper appended to this Context.",
            "args": [
              {
                "desc": "Java class name of a ContainerListener class",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "findConstraints": {
            "ret": "java.lang.String",
            "desc": "Return the set of security constraints for this web application. If there are none, a zero-length array is returned.",
            "args": []
          },
          "addWelcomeFile": {
            "ret": "void",
            "desc": "Add a new welcome file to the set recognized by this Context.",
            "args": [
              {
                "desc": "New welcome file name",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeApplicationParameter": {
            "ret": "void",
            "desc": "Remove the application parameter with the specified name from the set for this application.",
            "args": [
              {
                "desc": "Name of the application parameter to remove",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "findWrapperListeners": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of ContainerListener classes that will be added to newly created Wrappers automatically.",
            "args": []
          },
          "addLifecycleListener": {
            "ret": "void",
            "desc": "Add a lifecycle listener to this Context",
            "args": [
              {
                "desc": "Type(classname) of the new lifecycle listener to be added",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "findWatchedResources": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of watched resources for this Context.",
            "args": []
          },
          "removeServletMapping": {
            "ret": "void",
            "desc": "Remove any servlet mapping for the specified pattern, if it exists; otherwise, no action is taken.",
            "args": [
              {
                "desc": "URL pattern of the mapping to remove",
                "name": "pattern",
                "type": "java.lang.String"
              }
            ]
          },
          "findParameters": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the names of all defined context initialization parameters for this Context.",
            "args": []
          },
          "findServletMappings": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the patterns of all defined servlet mappings for this Context.",
            "args": []
          },
          "removeWrapperLifecycle": {
            "ret": "void",
            "desc": "Remove a class name from the set of LifecycleListener classes that will be added to newly created Wrappers.",
            "args": [
              {
                "desc": "Class name of a LifecycleListener class to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "findWelcomeFiles": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of welcome files defined for this Context.",
            "args": []
          },
          "addInstanceListener": {
            "ret": "void",
            "desc": "Add the classname of an InstanceListener to be added to each Wrapper appended to this Context.",
            "args": [
              {
                "desc": "Java class name of an InstanceListener class",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "findLifecycleListenerNames": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of lifecycle listener class names configured for this application.",
            "args": []
          },
          "addLocaleEncodingMappingParameter": {
            "ret": "void",
            "desc": "Add a Locale Encoding Mapping",
            "args": [
              {
                "desc": "Locale to map an encoding for",
                "name": "locale",
                "type": "java.lang.String"
              },
              {
                "desc": "Encoding to be used for a give locale",
                "name": "encoding",
                "type": "java.lang.String"
              }
            ]
          },
          "removeInstanceListener": {
            "ret": "void",
            "desc": "Remove the application parameter with the specified name from the set for this application.",
            "args": [
              {
                "desc": "Class name of an InstanceListener class to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "addApplicationListener": {
            "ret": "void",
            "desc": "Add a new Listener class name to the set of Listeners configured for this application.",
            "args": [
              {
                "desc": "Java class name of a listener class",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "findRoleMapping": {
            "ret": "java.lang.String",
            "desc": "For the given security role (as used by an application), return the corresponding role name (as defined by the underlying Realm) if there is one.  Otherwise, return the specified role unchanged.",
            "args": [
              {
                "desc": "Security role to map",
                "name": "role",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "saveConfig": {
            "desc": "Should the configuration be written as needed on startup",
            "type": "boolean",
            "rw": true
          },
          "encodedPath": {
            "desc": "The encoded path",
            "type": "java.lang.String",
            "rw": false
          },
          "managedResource": {
            "desc": "The managed resource this MBean is associated with",
            "type": "java.lang.Object",
            "rw": true
          },
          "manager": {
            "desc": "Associated manager.",
            "type": "org.apache.catalina.Manager",
            "rw": true
          },
          "cacheTTL": {
            "desc": "Time interval in ms between cache refeshes",
            "type": "int",
            "rw": true
          },
          "configured": {
            "desc": "The correctly configured flag for this Context.",
            "type": "boolean",
            "rw": false
          },
          "sessionCookieDomain": {
            "desc": "The domain to use for session cookies.'null' indicates that the domain is controlled by the application.",
            "type": "java.lang.String",
            "rw": true
          },
          "startTime": {
            "desc": "Time (in milliseconds since January 1, 1970, 00:00:00) when this context was started",
            "type": "long",
            "rw": false
          },
          "distributable": {
            "desc": "The distributable flag for this web application.",
            "type": "boolean",
            "rw": true
          },
          "tldNamespaceAware": {
            "desc": "Should the parsing of *.tld files be performed by a namespace aware parser? (This option is deprecated)",
            "type": "boolean",
            "rw": true
          },
          "configFile": {
            "desc": "Location of the context.xml resource or file",
            "type": "java.net.URL",
            "rw": true
          },
          "staticResources": {
            "desc": "Static resources associated with the context.",
            "type": "javax.naming.directory.DirContext",
            "rw": false
          },
          "realm": {
            "desc": "Associated realm.",
            "type": "org.apache.catalina.Realm",
            "rw": true
          },
          "stateManageable": {
            "desc": "State management support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "antiJARLocking": {
            "desc": "Take care to not lock jar files",
            "type": "boolean",
            "rw": true
          },
          "compilerClasspath": {
            "desc": "The compiler classpath to use",
            "type": "java.lang.String",
            "rw": true
          },
          "instanceManager": {
            "desc": "Object that creates and destroys servlets, filters, and listeners. Include dependency injection and postConstruct/preDestory handling",
            "type": "org.apache.catalina.instanceManagement.InstanceManager",
            "rw": true
          },
          "servlets": {
            "desc": "JSR77 list of servlets",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "loader": {
            "desc": "Associated loader.",
            "type": "org.apache.catalina.Loader",
            "rw": true
          },
          "logEffectiveWebXml": {
            "desc": "Should the effective web.xml be logged when the context starts?",
            "type": "boolean",
            "rw": true
          },
          "processingTime": {
            "desc": "Cumulative execution times of all servlets in this context",
            "type": "long",
            "rw": false
          },
          "sessionCookiePath": {
            "desc": "The path to use for session cookies.'null' indicates that the path is controlled by the application.",
            "type": "java.lang.String",
            "rw": true
          },
          "xmlNamespaceAware": {
            "desc": "Should the parsing of web.xml and web-fragment.xml files be performed by a namespace aware parser?",
            "type": "boolean",
            "rw": true
          },
          "useNaming": {
            "desc": "Create a JNDI naming context for this application?",
            "type": "boolean",
            "rw": true
          },
          "deploymentDescriptor": {
            "desc": "String deployment descriptor ",
            "type": "java.lang.String",
            "rw": false
          },
          "cacheObjectMaxSize": {
            "desc": "Maximum cached object size in KB",
            "type": "int",
            "rw": true
          },
          "webappVersion": {
            "desc": "The version of this web application - used in parallel deployment to differentiate different versions of the same web application",
            "type": "java.lang.String",
            "rw": false
          },
          "override": {
            "desc": "The default context.xml override flag for this web application",
            "type": "boolean",
            "rw": true
          },
          "publicId": {
            "desc": "The public identifier of the DTD for the web application deployment descriptor version that is being parsed",
            "type": "java.lang.String",
            "rw": false
          },
          "baseName": {
            "desc": "The base name used for directories, WAR files (with .war appended) and context.xml files (with .xml appended).",
            "type": "java.lang.String",
            "rw": false
          },
          "cachingAllowed": {
            "desc": "Should we cache static resources for this webapp",
            "type": "boolean",
            "rw": true
          },
          "namingContextListener": {
            "desc": "Associated naming context listener.",
            "type": "org.apache.catalina.core.NamingContextListener",
            "rw": true
          },
          "swallowOutput": {
            "desc": "Flag to set to cause the system.out and system.err to be redirected to the logger when executing a servlet",
            "type": "boolean",
            "rw": true
          },
          "privileged": {
            "desc": "Access to tomcat internals",
            "type": "boolean",
            "rw": true
          },
          "unloadDelay": {
            "desc": "Amount of ms that the container will wait for servlets to unload",
            "type": "long",
            "rw": true
          },
          "parentClassLoader": {
            "desc": "Parent class loader.",
            "type": "java.lang.ClassLoader",
            "rw": true
          },
          "docBase": {
            "desc": "The document root for this web application",
            "type": "java.lang.String",
            "rw": true
          },
          "minTime": {
            "desc": "Minimum execution time of all servlets in this context",
            "type": "long",
            "rw": false
          },
          "eventProvider": {
            "desc": "Event provider support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "workDir": {
            "desc": "The pathname to the work directory for this context",
            "type": "java.lang.String",
            "rw": true
          },
          "tldScanTime": {
            "desc": "Time spend scanning jars for TLDs for this context",
            "type": "long",
            "rw": true
          },
          "statisticsProvider": {
            "desc": "Performance statistics support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "altDDName": {
            "desc": "The alternate deployment descriptor name.",
            "type": "java.lang.String",
            "rw": true
          },
          "javaVMs": {
            "desc": "The Java virtual machines on which this module is running",
            "type": "[Ljava.lang.String;",
            "rw": true
          },
          "clearReferencesStopThreads": {
            "desc": "Should Tomcat attempt to terminate threads that have been started by the web application? Advisable to be used only in a development environment.",
            "type": "boolean",
            "rw": true
          },
          "clearReferencesStatic": {
            "desc": "Should Tomcat attempt to null out any static or final fields from loaded classes when a web application is stopped as a work around for apparent garbage collection bugs and application coding errors?",
            "type": "boolean",
            "rw": true
          },
          "children": {
            "desc": "Object names of all children",
            "type": "[Ljavax.management.ObjectName;",
            "rw": true
          },
          "errorCount": {
            "desc": "Cumulative error count of all servlets in this context",
            "type": "int",
            "rw": false
          },
          "maxTime": {
            "desc": "Maximum execution time of all servlets in this context",
            "type": "long",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "aliases": {
            "desc": "List of resource aliases",
            "type": "java.lang.String",
            "rw": true
          },
          "sessionCookieName": {
            "desc": "The name to use for session cookies.'null' indicates that the name is controlled by the application.",
            "type": "java.lang.String",
            "rw": true
          },
          "delegate": {
            "desc": "",
            "type": "boolean",
            "rw": true
          },
          "mappingObject": {
            "desc": "The object used for mapping",
            "type": "java.lang.Object",
            "rw": true
          },
          "startupTime": {
            "desc": "Time (in milliseconds) it took to start this context",
            "type": "long",
            "rw": true
          },
          "crossContext": {
            "desc": "Should we allow the ServletContext.getContext() method to access the context of other web applications in this server?",
            "type": "boolean",
            "rw": true
          },
          "welcomeFiles": {
            "desc": "The welcome files for this context",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "name": {
            "desc": "The name of this Context",
            "type": "java.lang.String",
            "rw": true
          },
          "logger": {
            "desc": "Associated logger.",
            "type": "org.apache.juli.logging.Log",
            "rw": true
          },
          "path": {
            "desc": "The context path for this Context",
            "type": "java.lang.String",
            "rw": true
          },
          "requestCount": {
            "desc": "Cumulative request count of all servlets in this context",
            "type": "int",
            "rw": false
          },
          "clearReferencesStopTimerThreads": {
            "desc": "Should Tomcat attempt to terminate TimerThreads that have been started by the web application? Advisable to be used only in a development environment.",
            "type": "boolean",
            "rw": true
          },
          "cookies": {
            "desc": "Should we attempt to use cookies for session id communication?",
            "type": "boolean",
            "rw": true
          },
          "reloadable": {
            "desc": "The reloadable flag for this web application",
            "type": "boolean",
            "rw": true
          },
          "tldValidation": {
            "desc": "Should the parsing of *.tld files be performed by a validating parser?",
            "type": "boolean",
            "rw": true
          },
          "defaultContextXml": {
            "desc": "Location of the default context.xml resource or file",
            "type": "java.lang.String",
            "rw": true
          },
          "objectName": {
            "desc": "Name of the object",
            "type": "java.lang.String",
            "rw": false
          },
          "useHttpOnly": {
            "desc": "Indicates that session cookies should use HttpOnly",
            "type": "boolean",
            "rw": true
          },
          "renewThreadsWhenStoppingContext": {
            "desc": "Should Tomcat renew the threads of the thread pool when the application is stopped to avoid memory leaks because of uncleaned ThreadLocal variables.",
            "type": "boolean",
            "rw": true
          },
          "paused": {
            "desc": "The request processing pause flag (while reloading occurs)",
            "type": "boolean",
            "rw": false
          },
          "antiResourceLocking": {
            "desc": "Take care to not lock resources",
            "type": "boolean",
            "rw": true
          },
          "originalDocBase": {
            "desc": "The original document root for this web application",
            "type": "java.lang.String",
            "rw": true
          },
          "sessionTimeout": {
            "desc": "The session timeout (in minutes) for this web application",
            "type": "int",
            "rw": true
          },
          "cacheMaxSize": {
            "desc": "Maximum cache size in KB",
            "type": "int",
            "rw": true
          },
          "defaultWebXml": {
            "desc": "Location of the default web.xml resource or file",
            "type": "java.lang.String",
            "rw": true
          },
          "ignoreAnnotations": {
            "desc": "Ignore annotations flag.",
            "type": "boolean",
            "rw": true
          },
          "unpackWAR": {
            "desc": "Unpack WAR property",
            "type": "boolean",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "server": {
            "desc": "The J2EE Server this module is deployed on",
            "type": "java.lang.String",
            "rw": true
          },
          "xmlValidation": {
            "desc": "Should the parsing of web.xml and web-fragment.xml files be performed by a validating parser?",
            "type": "boolean",
            "rw": true
          },
          "displayName": {
            "desc": "The display name of this web application",
            "type": "java.lang.String",
            "rw": true
          },
          "allowLinking": {
            "desc": "Allow symlinking to outside the webapp root directory, if the webapp is an exploded directory",
            "type": "boolean",
            "rw": true
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,WebModule=//localhost/,j2eeType=Servlet,name=promotion": {
        "desc": "Wrapper that represents an individual servlet definition",
        "op": {
          "findSecurityReference": {
            "ret": "java.lang.String",
            "desc": "Return the security role link for the specified security role reference name.",
            "args": [
              {
                "desc": "Security role reference used within this servle",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "addMapping": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "removeInitParameter": {
            "ret": "void",
            "desc": "Remove the specified initialization parameter from this servlet.",
            "args": [
              {
                "desc": "Name of the initialization parameter to remove",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeSecurityReference": {
            "ret": "void",
            "desc": "Remove any security role reference for the specified role name.",
            "args": [
              {
                "desc": "Security role used within this servlet to be removeds",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "findMappingObject": {
            "ret": "org.apache.catalina.Wrapper",
            "desc": "Return an object which may be utilized for mapping to this component",
            "args": []
          },
          "addValve": {
            "ret": "java.lang.String",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new valve to be added",
                "name": "valveType",
                "type": "java.lang.String"
              }
            ]
          },
          "addLifecycleListener": {
            "ret": "void",
            "desc": "Add a lifecycle listener to this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the new lifecycle listener to be added",
                "name": "type",
                "type": "java.lang.String"
              }
            ]
          },
          "removeLifecycleListeners": {
            "ret": "void",
            "desc": "Removes lifecycle listeners of given class type from this Wrapper",
            "args": [
              {
                "desc": "Type(classname) of the lifecycle listeners to be removed",
                "name": "listener",
                "type": "java.lang.String"
              }
            ]
          },
          "removeValve": {
            "ret": "void",
            "desc": "Remove a valve from this Wrapper",
            "args": [
              {
                "desc": "Objectname of the valve to be removed",
                "name": "valveName",
                "type": "java.lang.String"
              }
            ]
          },
          "addSecurityReference": {
            "ret": "void",
            "desc": "Add a new security role reference record to the set of records for this servlet.",
            "args": [
              {
                "desc": "Role name used within this servlet",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Role name used within the web application",
                "name": "link",
                "type": "java.lang.String"
              }
            ]
          },
          "addInitParameter": {
            "ret": "void",
            "desc": "Add a valve to this Wrapper",
            "args": [
              {
                "desc": "Name of this initialization parameter to add",
                "name": "name",
                "type": "java.lang.String"
              },
              {
                "desc": "Value of this initialization parameter to add",
                "name": "value",
                "type": "java.lang.String"
              }
            ]
          },
          "findInitParameters": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the names of all defined initialization parameters for this servlet.",
            "args": []
          },
          "removeMapping": {
            "ret": "void",
            "desc": "Remove a mapping associated with the wrapper.",
            "args": [
              {
                "desc": "The pattern to remove",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          },
          "findSecurityReferences": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the set of security role reference names associated with this servlet",
            "args": []
          },
          "findMappings": {
            "ret": "[Ljava.lang.String;",
            "desc": "Return the mappings associated with this wrapper",
            "args": []
          },
          "findInitParameter": {
            "ret": "void",
            "desc": "Add a mapping associated with the Wrapper.",
            "args": [
              {
                "desc": "The new wrapper mapping",
                "name": "mapping",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "minTime": {
            "desc": "Minimum processing time of a request",
            "type": "long",
            "rw": false
          },
          "runAs": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": true
          },
          "countAllocated": {
            "desc": "The count of allocations that are currently active (even if they  are for the same instance, as will be true on a non-STM servlet).",
            "type": "int",
            "rw": false
          },
          "eventProvider": {
            "desc": "Event provider support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "statisticsProvider": {
            "desc": "Performance statistics support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "objectName": {
            "desc": "Name of the object",
            "type": "java.lang.String",
            "rw": true
          },
          "processingTime": {
            "desc": "Total execution time of the servlet's service method",
            "type": "long",
            "rw": false
          },
          "errorCount": {
            "desc": "Error count",
            "type": "int",
            "rw": false
          },
          "maxTime": {
            "desc": "Maximum processing time of a request",
            "type": "long",
            "rw": false
          },
          "available": {
            "desc": "The date and time at which this servlet will become available (in milliseconds since the epoch), or zero if the servlet is available. If this value equals Long.MAX_VALUE, the unavailability of this servlet is considered permanent.",
            "type": "long",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "asyncSupported": {
            "desc": "Async support",
            "type": "boolean",
            "rw": true
          },
          "backgroundProcessorDelay": {
            "desc": "The processor delay for this component.",
            "type": "int",
            "rw": true
          },
          "loadOnStartup": {
            "desc": "The load-on-startup order value (negative value means load on first call) for this servlet.",
            "type": "int",
            "rw": true
          },
          "maxInstances": {
            "desc": "Maximum number of STM instances.",
            "type": "int",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "loadTime": {
            "desc": "Time taken to load and initialise the Servlet",
            "type": "long",
            "rw": false
          },
          "stateManageable": {
            "desc": "State management support for this managed object",
            "type": "boolean",
            "rw": false
          },
          "servletClass": {
            "desc": "The run-as identity for this servlet.",
            "type": "java.lang.String",
            "rw": false
          },
          "classLoadTime": {
            "desc": "Time taken to load the Servlet class",
            "type": "int",
            "rw": false
          },
          "requestCount": {
            "desc": "Number of requests processed by this wrapper",
            "type": "int",
            "rw": false
          },
          "singleThreadModel": {
            "desc": "Does this servlet implement the SingleThreadModel interface?",
            "type": "boolean",
            "rw": false
          }
        }
      },
      "port=8080,type=Connector": {
        "desc": "Implementation of a Coyote connector",
        "op": {
          "destroy": {
            "ret": "void",
            "desc": "Destroy",
            "args": []
          },
          "pause": {
            "ret": "void",
            "desc": "Start",
            "args": []
          },
          "stop": {
            "ret": "void",
            "desc": "Stop",
            "args": []
          },
          "resume": {
            "ret": "void",
            "desc": "Stop",
            "args": []
          },
          "start": {
            "ret": "void",
            "desc": "Start",
            "args": []
          },
          "init": {
            "ret": "void",
            "desc": "Init",
            "args": []
          }
        },
        "attr": {
          "port": {
            "desc": "The port number on which this connector is configured to listen for requests. The special value of 0 means select a random free port when the socket is bound.",
            "type": "int",
            "rw": true
          },
          "useIPVHosts": {
            "desc": "Should IP-based virtual hosting be used? ",
            "type": "boolean",
            "rw": true
          },
          "redirectPort": {
            "desc": "The redirect port for non-SSL to SSL redirects",
            "type": "int",
            "rw": true
          },
          "minSpareThreads": {
            "desc": "The number of request processing threads that will be created",
            "type": "int",
            "rw": true
          },
          "secure": {
            "desc": "Is this a secure (SSL) Connector?",
            "type": "boolean",
            "rw": true
          },
          "acceptCount": {
            "desc": "The accept count for this Connector",
            "type": "int",
            "rw": true
          },
          "maxThreads": {
            "desc": "The maximum number of request processing threads to be created",
            "type": "int",
            "rw": true
          },
          "URIEncoding": {
            "desc": "Character encoding used to decode the URI",
            "type": "java.lang.String",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "packetSize": {
            "desc": "The ajp packet size.",
            "type": "int",
            "rw": true
          },
          "processorCache": {
            "desc": "The processor cache size.",
            "type": "int",
            "rw": true
          },
          "scheme": {
            "desc": "Protocol name for this Connector (http, https)",
            "type": "java.lang.String",
            "rw": true
          },
          "sslProtocols": {
            "desc": "Comma-separated list of SSL protocol variants to be enabled",
            "type": "java.lang.String",
            "rw": true
          },
          "localPort": {
            "desc": "The port number on which this connector is listening to requests. If the special value for port of zero is used then this method will report the actual port bound.",
            "type": "int",
            "rw": true
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "maxHeaderCount": {
            "desc": "The maximum number of headers that are allowed by the container. 100 by default. A value of less than 0 means no limit.",
            "type": "int",
            "rw": true
          },
          "maxParameterCount": {
            "desc": "The maximum number of parameters (GET plus POST) which will be automatically parsed by the container. 10000 by default. A value of less than 0 means no limit.",
            "type": "int",
            "rw": true
          },
          "maxSavePostSize": {
            "desc": "Maximum size of a POST which will be saved by the container during authentication",
            "type": "int",
            "rw": true
          },
          "executorName": {
            "desc": "The name of the executor - if any - associated with this Connector",
            "type": "java.lang.String",
            "rw": false
          },
          "keepAliveTimeout": {
            "desc": "The number of seconds Tomcat will wait for a subsequent request before closing the connection",
            "type": "int",
            "rw": true
          },
          "protocolHandlerClassName": {
            "desc": "Coyote Protocol handler class name",
            "type": "java.lang.String",
            "rw": false
          },
          "threadPriority": {
            "desc": "The thread priority for processors",
            "type": "int",
            "rw": true
          },
          "tcpNoDelay": {
            "desc": "Should we use TCP no delay?",
            "type": "boolean",
            "rw": true
          },
          "protocol": {
            "desc": "Coyote protocol handler in use",
            "type": "java.lang.String",
            "rw": true
          },
          "maxKeepAliveRequests": {
            "desc": "Maximum number of Keep-Alive requests to honor per connection",
            "type": "int",
            "rw": true
          },
          "proxyName": {
            "desc": "Ther Server name to which we should pretend requests to this Connector",
            "type": "java.lang.String",
            "rw": true
          },
          "enableLookups": {
            "desc": "The 'enable DNS lookups' flag for this Connector",
            "type": "boolean",
            "rw": true
          },
          "maxPostSize": {
            "desc": "Maximum size in bytes of a POST which will be handled by the servlet API provided features",
            "type": "int",
            "rw": true
          },
          "proxyPort": {
            "desc": "Ther Server port to which we should pretend requests to this Connector",
            "type": "int",
            "rw": true
          },
          "connectionLinger": {
            "desc": "Linger value on the incoming connection",
            "type": "int",
            "rw": true
          },
          "maxSwallowSize": {
            "desc": "The maximum number of request body bytes to be swallowed by Tomcat for an aborted upload",
            "type": "int",
            "rw": true
          },
          "connectionTimeout": {
            "desc": "Timeout value on the incoming connection",
            "type": "int",
            "rw": true
          },
          "address": {
            "desc": "The IP address on which to bind",
            "type": "java.lang.String",
            "rw": true
          },
          "xpoweredBy": {
            "desc": "Is generation of X-Powered-By response header enabled/disabled?",
            "type": "boolean",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "allowTrace": {
            "desc": "Allow disabling TRACE method",
            "type": "boolean",
            "rw": true
          },
          "useBodyEncodingForURI": {
            "desc": "Should the body encoding be used for URI query parameters",
            "type": "boolean",
            "rw": true
          },
          "secret": {
            "desc": "Authentication secret (I guess ... not in Javadocs)",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "context=/,host=localhost,type=WebappClassLoader": {
        "desc": "Classloader implementation which is specialized for handling web applications",
        "attr": {
          "jarPath": {
            "desc": "The jarPath of this loader",
            "type": "java.lang.String",
            "rw": false
          },
          "searchExternalFirst": {
            "desc": "The searchExternalFirst flag for this Loader",
            "type": "boolean",
            "rw": true
          },
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "URLs": {
            "desc": "The URLs of this loader",
            "type": "[Ljava.net.URL;",
            "rw": true
          },
          "antiJARLocking": {
            "desc": "The antiJARLocking flag for this Loader",
            "type": "boolean",
            "rw": true
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "contextName": {
            "desc": "Name of the webapp context",
            "type": "java.lang.String",
            "rw": false
          },
          "delegate": {
            "desc": "The 'follow standard delegation model' flag that will be used to configure our ClassLoader",
            "type": "boolean",
            "rw": true
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,WebModule=//localhost/manager,name=jsp,type=JspMonitor": {
        "desc": "JSP Monitoring",
        "attr": {
          "jspUnloadCount": {
            "desc": "The number of JSPs that have been unloaded",
            "type": "int",
            "rw": true
          },
          "jspCount": {
            "desc": "The number of JSPs that have been loaded into a webapp",
            "type": "int",
            "rw": false
          },
          "jspReloadCount": {
            "desc": "The number of JSPs that have been reloaded",
            "type": "int",
            "rw": true
          },
          "jspQueueLength": {
            "desc": "The length of the JSP queue (if enabled via maxLoadedJsps)",
            "type": "int",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "name=HttpRequest3,type=RequestProcessor,worker=\"http-bio-8080\"": {
        "desc": null,
        "attr": {
          "requestProcessingTime": {
            "desc": "Introspected attribute requestProcessingTime",
            "type": "long",
            "rw": false
          },
          "protocol": {
            "desc": "Introspected attribute protocol",
            "type": "java.lang.String",
            "rw": false
          },
          "bytesSent": {
            "desc": "Introspected attribute bytesSent",
            "type": "long",
            "rw": true
          },
          "rpName": {
            "desc": "Introspected attribute rpName",
            "type": "javax.management.ObjectName",
            "rw": true
          },
          "processingTime": {
            "desc": "Introspected attribute processingTime",
            "type": "long",
            "rw": true
          },
          "currentQueryString": {
            "desc": "Introspected attribute currentQueryString",
            "type": "java.lang.String",
            "rw": false
          },
          "requestBytesReceived": {
            "desc": "Introspected attribute requestBytesReceived",
            "type": "long",
            "rw": false
          },
          "errorCount": {
            "desc": "Introspected attribute errorCount",
            "type": "int",
            "rw": true
          },
          "maxTime": {
            "desc": "Introspected attribute maxTime",
            "type": "long",
            "rw": true
          },
          "maxRequestUri": {
            "desc": "Introspected attribute maxRequestUri",
            "type": "java.lang.String",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "stage": {
            "desc": "Introspected attribute stage",
            "type": "int",
            "rw": true
          },
          "lastRequestProcessingTime": {
            "desc": "Introspected attribute lastRequestProcessingTime",
            "type": "long",
            "rw": true
          },
          "globalProcessor": {
            "desc": "Introspected attribute globalProcessor",
            "type": "org.apache.coyote.RequestGroupInfo",
            "rw": true
          },
          "virtualHost": {
            "desc": "Introspected attribute virtualHost",
            "type": "java.lang.String",
            "rw": false
          },
          "serverPort": {
            "desc": "Introspected attribute serverPort",
            "type": "int",
            "rw": false
          },
          "bytesReceived": {
            "desc": "Introspected attribute bytesReceived",
            "type": "long",
            "rw": true
          },
          "currentUri": {
            "desc": "Introspected attribute currentUri",
            "type": "java.lang.String",
            "rw": false
          },
          "workerThreadName": {
            "desc": "Introspected attribute workerThreadName",
            "type": "java.lang.String",
            "rw": true
          },
          "remoteAddrForwarded": {
            "desc": "Introspected attribute remoteAddrForwarded",
            "type": "java.lang.String",
            "rw": false
          },
          "method": {
            "desc": "Introspected attribute method",
            "type": "java.lang.String",
            "rw": false
          },
          "requestCount": {
            "desc": "Introspected attribute requestCount",
            "type": "int",
            "rw": true
          },
          "requestBytesSent": {
            "desc": "Introspected attribute requestBytesSent",
            "type": "long",
            "rw": false
          },
          "contentLength": {
            "desc": "Introspected attribute contentLength",
            "type": "int",
            "rw": false
          },
          "remoteAddr": {
            "desc": "Introspected attribute remoteAddr",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "context=/manager,host=localhost,type=Cache": {
        "desc": null,
        "op": {
          "unload": {
            "ret": "boolean",
            "desc": "Introspected operation unload",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "java.lang.String"
              }
            ]
          },
          "allocate": {
            "ret": "boolean",
            "desc": "Introspected operation allocate",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "int"
              }
            ]
          },
          "load": {
            "ret": "void",
            "desc": "Introspected operation load",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "org.apache.naming.resources.CacheEntry"
              }
            ]
          },
          "lookup": {
            "ret": "org.apache.naming.resources.CacheEntry",
            "desc": "Introspected operation lookup",
            "args": [
              {
                "desc": "Introspected parameter param0",
                "name": "param0",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "spareNotFoundEntries": {
            "desc": "Introspected attribute spareNotFoundEntries",
            "type": "int",
            "rw": true
          },
          "hitsCount": {
            "desc": "Introspected attribute hitsCount",
            "type": "long",
            "rw": false
          },
          "accessCount": {
            "desc": "Introspected attribute accessCount",
            "type": "long",
            "rw": false
          },
          "desiredEntryAccessRatio": {
            "desc": "Introspected attribute desiredEntryAccessRatio",
            "type": "long",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "cacheSize": {
            "desc": "Introspected attribute cacheSize",
            "type": "int",
            "rw": false
          },
          "maxAllocateIterations": {
            "desc": "Introspected attribute maxAllocateIterations",
            "type": "int",
            "rw": true
          },
          "cacheMaxSize": {
            "desc": "Introspected attribute cacheMaxSize",
            "type": "int",
            "rw": true
          }
        }
      },
      "host=localhost,type=Deployer": {
        "desc": "Startup event listener for a Host that configures the properties of that Host, and the associated defined contexts",
        "op": {
          "check": {
            "ret": "void",
            "desc": "Check a web application name for updates",
            "args": [
              {
                "desc": "Application name",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "removeServiced": {
            "ret": "void",
            "desc": "Remove a web application from the serviced list to show it isn't serviced by another component",
            "args": [
              {
                "desc": "Application name",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "unmanageApp": {
            "ret": "void",
            "desc": "Remove a web application from checks",
            "args": [
              {
                "desc": "The application path",
                "name": "contextPath",
                "type": "java.lang.String"
              }
            ]
          },
          "checkUndeploy": {
            "ret": "void",
            "desc": "Undeploy any old versions of applications deployed using parallel deployment that have no active sessions",
            "args": []
          },
          "getDeploymentTime": {
            "ret": "long",
            "desc": "Get the instant where an application was deployed",
            "args": [
              {
                "desc": "Application name",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "isDeployed": {
            "ret": "boolean",
            "desc": "Was this web application deployed by this component",
            "args": [
              {
                "desc": "Application name",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "addServiced": {
            "ret": "void",
            "desc": "Add a web application to the serviced list to show it gets serviced by another component",
            "args": [
              {
                "desc": "Application name",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "isServiced": {
            "ret": "boolean",
            "desc": "Is a web application serviced by another component",
            "args": [
              {
                "desc": "Application name",
                "name": "name",
                "type": "java.lang.String"
              }
            ]
          },
          "manageApp": {
            "ret": "void",
            "desc": "Add a web application managed externally",
            "args": [
              {
                "desc": "Context to add",
                "name": "context",
                "type": "org.apache.catalina.Context"
              }
            ]
          }
        },
        "attr": {
          "deployXML": {
            "desc": "The deploy XML config file flag for this component",
            "type": "boolean",
            "rw": true
          },
          "copyXML": {
            "desc": "The copy XML config file flag for this component",
            "type": "boolean",
            "rw": true
          },
          "configClass": {
            "desc": "The Java class name of the Context configuration class we should use",
            "type": "java.lang.String",
            "rw": true
          },
          "configBaseName": {
            "desc": "The base directory for Context configuration files",
            "type": "java.lang.String",
            "rw": false
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "unpackWARs": {
            "desc": "The unpack WARs flag",
            "type": "boolean",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "contextClass": {
            "desc": "The Java class name of the Context implementation we should use",
            "type": "java.lang.String",
            "rw": true
          }
        }
      },
      "name=HttpRequest2,type=RequestProcessor,worker=\"http-bio-8080\"": {
        "desc": null,
        "attr": {
          "requestProcessingTime": {
            "desc": "Introspected attribute requestProcessingTime",
            "type": "long",
            "rw": false
          },
          "protocol": {
            "desc": "Introspected attribute protocol",
            "type": "java.lang.String",
            "rw": false
          },
          "bytesSent": {
            "desc": "Introspected attribute bytesSent",
            "type": "long",
            "rw": true
          },
          "rpName": {
            "desc": "Introspected attribute rpName",
            "type": "javax.management.ObjectName",
            "rw": true
          },
          "processingTime": {
            "desc": "Introspected attribute processingTime",
            "type": "long",
            "rw": true
          },
          "currentQueryString": {
            "desc": "Introspected attribute currentQueryString",
            "type": "java.lang.String",
            "rw": false
          },
          "requestBytesReceived": {
            "desc": "Introspected attribute requestBytesReceived",
            "type": "long",
            "rw": false
          },
          "errorCount": {
            "desc": "Introspected attribute errorCount",
            "type": "int",
            "rw": true
          },
          "maxTime": {
            "desc": "Introspected attribute maxTime",
            "type": "long",
            "rw": true
          },
          "maxRequestUri": {
            "desc": "Introspected attribute maxRequestUri",
            "type": "java.lang.String",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          },
          "stage": {
            "desc": "Introspected attribute stage",
            "type": "int",
            "rw": true
          },
          "lastRequestProcessingTime": {
            "desc": "Introspected attribute lastRequestProcessingTime",
            "type": "long",
            "rw": true
          },
          "globalProcessor": {
            "desc": "Introspected attribute globalProcessor",
            "type": "org.apache.coyote.RequestGroupInfo",
            "rw": true
          },
          "virtualHost": {
            "desc": "Introspected attribute virtualHost",
            "type": "java.lang.String",
            "rw": false
          },
          "serverPort": {
            "desc": "Introspected attribute serverPort",
            "type": "int",
            "rw": false
          },
          "bytesReceived": {
            "desc": "Introspected attribute bytesReceived",
            "type": "long",
            "rw": true
          },
          "currentUri": {
            "desc": "Introspected attribute currentUri",
            "type": "java.lang.String",
            "rw": false
          },
          "workerThreadName": {
            "desc": "Introspected attribute workerThreadName",
            "type": "java.lang.String",
            "rw": true
          },
          "remoteAddrForwarded": {
            "desc": "Introspected attribute remoteAddrForwarded",
            "type": "java.lang.String",
            "rw": false
          },
          "method": {
            "desc": "Introspected attribute method",
            "type": "java.lang.String",
            "rw": false
          },
          "requestCount": {
            "desc": "Introspected attribute requestCount",
            "type": "int",
            "rw": true
          },
          "requestBytesSent": {
            "desc": "Introspected attribute requestBytesSent",
            "type": "long",
            "rw": false
          },
          "contentLength": {
            "desc": "Introspected attribute contentLength",
            "type": "int",
            "rw": false
          },
          "remoteAddr": {
            "desc": "Introspected attribute remoteAddr",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "context=/manager,host=localhost,name=StandardContextValve,type=Valve": {
        "desc": "Valve that implements the default basic behavior for the          StandardContext container implementation",
        "attr": {
          "stateName": {
            "desc": "The name of the LifecycleState that this component is currently in",
            "type": "java.lang.String",
            "rw": false
          },
          "className": {
            "desc": "Fully qualified class name of the managed object",
            "type": "java.lang.String",
            "rw": false
          },
          "asyncSupported": {
            "desc": "Does this valve support async reporting?",
            "type": "boolean",
            "rw": true
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "J2EEApplication=none,J2EEServer=none,WebModule=//localhost/manager,j2eeType=Filter,name=SetCharacterEncoding": {
        "desc": "Wrapper that represents an individual servlet-filter definition",
        "attr": {
          "filterClass": {
            "desc": "Fully qualified class name of the filter object",
            "type": "java.lang.String",
            "rw": false
          },
          "filterInitParameterMap": {
            "desc": "Return the initiaization parameters associated with this filter",
            "type": "java.util.Map",
            "rw": false
          },
          "filterName": {
            "desc": "The name used to reference the filter in web.xml",
            "type": "java.lang.String",
            "rw": false
          },
          "modelerType": {
            "desc": "Type of the modeled resource. Can be set only once",
            "type": "java.lang.String",
            "rw": false
          }
        }
      }
    },
    "java.nio": {
      "name=direct,type=BufferPool": {
        "desc": "Information on the management interface of the MBean",
        "attr": {
          "Name": {
            "desc": "Name",
            "type": "java.lang.String",
            "rw": false
          },
          "MemoryUsed": {
            "desc": "MemoryUsed",
            "type": "long",
            "rw": false
          },
          "Count": {
            "desc": "Count",
            "type": "long",
            "rw": false
          },
          "TotalCapacity": {
            "desc": "TotalCapacity",
            "type": "long",
            "rw": false
          },
          "ObjectName": {
            "desc": "ObjectName",
            "type": "javax.management.ObjectName",
            "rw": false
          }
        }
      },
      "name=mapped,type=BufferPool": {
        "desc": "Information on the management interface of the MBean",
        "attr": {
          "Name": {
            "desc": "Name",
            "type": "java.lang.String",
            "rw": false
          },
          "MemoryUsed": {
            "desc": "MemoryUsed",
            "type": "long",
            "rw": false
          },
          "Count": {
            "desc": "Count",
            "type": "long",
            "rw": false
          },
          "TotalCapacity": {
            "desc": "TotalCapacity",
            "type": "long",
            "rw": false
          },
          "ObjectName": {
            "desc": "ObjectName",
            "type": "javax.management.ObjectName",
            "rw": false
          }
        }
      }
    },
    "prom": {
      "name=appMgt": {
        "desc": "应用管理服务",
        "op": {
          "heartbeats": {
            "ret": "java.lang.String",
            "desc": "心跳检测",
            "args": []
          }
        }
      },
      "name=engineMgt": {
        "desc": "引擎控制器",
        "op": {
          "pause": {
            "ret": "void",
            "desc": "暂时服务",
            "args": []
          },
          "stop": {
            "ret": "void",
            "desc": "中止服务",
            "args": []
          },
          "getVersion": {
            "ret": "java.lang.String",
            "desc": "当前版本",
            "args": []
          },
          "resume": {
            "ret": "void",
            "desc": "恢复服务",
            "args": []
          },
          "start": {
            "ret": "void",
            "desc": "启动引擎",
            "args": []
          },
          "reload": {
            "ret": "void",
            "desc": "加载最新规则",
            "args": []
          }
        },
        "attr": {
          "Version": {
            "desc": "当前版本",
            "type": "java.lang.String",
            "rw": false
          }
        }
      }
    },
    "java.lang": {
      "type=Compilation": {
        "desc": "Information on the management interface of the MBean",
        "attr": {
          "Name": {
            "desc": "Name",
            "type": "java.lang.String",
            "rw": false
          },
          "CompilationTimeMonitoringSupported": {
            "desc": "CompilationTimeMonitoringSupported",
            "type": "boolean",
            "rw": false
          },
          "TotalCompilationTime": {
            "desc": "TotalCompilationTime",
            "type": "long",
            "rw": false
          },
          "ObjectName": {
            "desc": "ObjectName",
            "type": "javax.management.ObjectName",
            "rw": false
          }
        }
      },
      "name=PS MarkSweep,type=GarbageCollector": {
        "desc": "Information on the management interface of the MBean",
        "attr": {
          "Name": {
            "desc": "Name",
            "type": "java.lang.String",
            "rw": false
          },
          "LastGcInfo": {
            "desc": "LastGcInfo",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "CollectionCount": {
            "desc": "CollectionCount",
            "type": "long",
            "rw": false
          },
          "MemoryPoolNames": {
            "desc": "MemoryPoolNames",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "Valid": {
            "desc": "Valid",
            "type": "boolean",
            "rw": false
          },
          "ObjectName": {
            "desc": "ObjectName",
            "type": "javax.management.ObjectName",
            "rw": false
          },
          "CollectionTime": {
            "desc": "CollectionTime",
            "type": "long",
            "rw": false
          }
        }
      },
      "type=Runtime": {
        "desc": "Information on the management interface of the MBean",
        "attr": {
          "ManagementSpecVersion": {
            "desc": "ManagementSpecVersion",
            "type": "java.lang.String",
            "rw": false
          },
          "Uptime": {
            "desc": "Uptime",
            "type": "long",
            "rw": false
          },
          "SystemProperties": {
            "desc": "SystemProperties",
            "type": "javax.management.openmbean.TabularData",
            "rw": false
          },
          "VmName": {
            "desc": "VmName",
            "type": "java.lang.String",
            "rw": false
          },
          "BootClassPathSupported": {
            "desc": "BootClassPathSupported",
            "type": "boolean",
            "rw": false
          },
          "Name": {
            "desc": "Name",
            "type": "java.lang.String",
            "rw": false
          },
          "SpecVendor": {
            "desc": "SpecVendor",
            "type": "java.lang.String",
            "rw": false
          },
          "SpecName": {
            "desc": "SpecName",
            "type": "java.lang.String",
            "rw": false
          },
          "BootClassPath": {
            "desc": "BootClassPath",
            "type": "java.lang.String",
            "rw": false
          },
          "SpecVersion": {
            "desc": "SpecVersion",
            "type": "java.lang.String",
            "rw": false
          },
          "InputArguments": {
            "desc": "InputArguments",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "ObjectName": {
            "desc": "ObjectName",
            "type": "javax.management.ObjectName",
            "rw": false
          },
          "StartTime": {
            "desc": "StartTime",
            "type": "long",
            "rw": false
          },
          "VmVersion": {
            "desc": "VmVersion",
            "type": "java.lang.String",
            "rw": false
          },
          "VmVendor": {
            "desc": "VmVendor",
            "type": "java.lang.String",
            "rw": false
          },
          "LibraryPath": {
            "desc": "LibraryPath",
            "type": "java.lang.String",
            "rw": false
          },
          "ClassPath": {
            "desc": "ClassPath",
            "type": "java.lang.String",
            "rw": false
          }
        }
      },
      "name=PS Perm Gen,type=MemoryPool": {
        "desc": "Information on the management interface of the MBean",
        "op": {
          "resetPeakUsage": {
            "ret": "void",
            "desc": "resetPeakUsage",
            "args": []
          }
        },
        "attr": {
          "CollectionUsageThresholdExceeded": {
            "desc": "CollectionUsageThresholdExceeded",
            "type": "boolean",
            "rw": false
          },
          "CollectionUsageThresholdSupported": {
            "desc": "CollectionUsageThresholdSupported",
            "type": "boolean",
            "rw": false
          },
          "CollectionUsageThresholdCount": {
            "desc": "CollectionUsageThresholdCount",
            "type": "long",
            "rw": false
          },
          "PeakUsage": {
            "desc": "PeakUsage",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "UsageThresholdExceeded": {
            "desc": "UsageThresholdExceeded",
            "type": "boolean",
            "rw": false
          },
          "Type": {
            "desc": "Type",
            "type": "java.lang.String",
            "rw": false
          },
          "Usage": {
            "desc": "Usage",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "Name": {
            "desc": "Name",
            "type": "java.lang.String",
            "rw": false
          },
          "UsageThresholdCount": {
            "desc": "UsageThresholdCount",
            "type": "long",
            "rw": false
          },
          "UsageThreshold": {
            "desc": "UsageThreshold",
            "type": "long",
            "rw": true
          },
          "UsageThresholdSupported": {
            "desc": "UsageThresholdSupported",
            "type": "boolean",
            "rw": false
          },
          "MemoryManagerNames": {
            "desc": "MemoryManagerNames",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "CollectionUsage": {
            "desc": "CollectionUsage",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "Valid": {
            "desc": "Valid",
            "type": "boolean",
            "rw": false
          },
          "CollectionUsageThreshold": {
            "desc": "CollectionUsageThreshold",
            "type": "long",
            "rw": true
          },
          "ObjectName": {
            "desc": "ObjectName",
            "type": "javax.management.ObjectName",
            "rw": false
          }
        }
      },
      "type=ClassLoading": {
        "desc": "Information on the management interface of the MBean",
        "attr": {
          "Verbose": {
            "desc": "Verbose",
            "type": "boolean",
            "rw": true
          },
          "LoadedClassCount": {
            "desc": "LoadedClassCount",
            "type": "int",
            "rw": false
          },
          "UnloadedClassCount": {
            "desc": "UnloadedClassCount",
            "type": "long",
            "rw": false
          },
          "ObjectName": {
            "desc": "ObjectName",
            "type": "javax.management.ObjectName",
            "rw": false
          },
          "TotalLoadedClassCount": {
            "desc": "TotalLoadedClassCount",
            "type": "long",
            "rw": false
          }
        }
      },
      "name=PS Old Gen,type=MemoryPool": {
        "desc": "Information on the management interface of the MBean",
        "op": {
          "resetPeakUsage": {
            "ret": "void",
            "desc": "resetPeakUsage",
            "args": []
          }
        },
        "attr": {
          "CollectionUsageThresholdExceeded": {
            "desc": "CollectionUsageThresholdExceeded",
            "type": "boolean",
            "rw": false
          },
          "CollectionUsageThresholdSupported": {
            "desc": "CollectionUsageThresholdSupported",
            "type": "boolean",
            "rw": false
          },
          "CollectionUsageThresholdCount": {
            "desc": "CollectionUsageThresholdCount",
            "type": "long",
            "rw": false
          },
          "PeakUsage": {
            "desc": "PeakUsage",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "UsageThresholdExceeded": {
            "desc": "UsageThresholdExceeded",
            "type": "boolean",
            "rw": false
          },
          "Type": {
            "desc": "Type",
            "type": "java.lang.String",
            "rw": false
          },
          "Usage": {
            "desc": "Usage",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "Name": {
            "desc": "Name",
            "type": "java.lang.String",
            "rw": false
          },
          "UsageThresholdCount": {
            "desc": "UsageThresholdCount",
            "type": "long",
            "rw": false
          },
          "UsageThreshold": {
            "desc": "UsageThreshold",
            "type": "long",
            "rw": true
          },
          "UsageThresholdSupported": {
            "desc": "UsageThresholdSupported",
            "type": "boolean",
            "rw": false
          },
          "MemoryManagerNames": {
            "desc": "MemoryManagerNames",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "CollectionUsage": {
            "desc": "CollectionUsage",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "Valid": {
            "desc": "Valid",
            "type": "boolean",
            "rw": false
          },
          "CollectionUsageThreshold": {
            "desc": "CollectionUsageThreshold",
            "type": "long",
            "rw": true
          },
          "ObjectName": {
            "desc": "ObjectName",
            "type": "javax.management.ObjectName",
            "rw": false
          }
        }
      },
      "type=Threading": {
        "desc": "Information on the management interface of the MBean",
        "op": {
          "findMonitorDeadlockedThreads": {
            "ret": "[J",
            "desc": "findMonitorDeadlockedThreads",
            "args": []
          },
          "findDeadlockedThreads": {
            "ret": "[J",
            "desc": "findDeadlockedThreads",
            "args": []
          },
          "resetPeakThreadCount": {
            "ret": "void",
            "desc": "resetPeakThreadCount",
            "args": []
          },
          "getThreadUserTime": [
            {
              "ret": "[J",
              "desc": "getThreadUserTime",
              "args": [
                {
                  "desc": "p0",
                  "name": "p0",
                  "type": "[J"
                }
              ]
            },
            {
              "ret": "long",
              "desc": "getThreadUserTime",
              "args": [
                {
                  "desc": "p0",
                  "name": "p0",
                  "type": "long"
                }
              ]
            }
          ],
          "getThreadInfo": [
            {
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "getThreadInfo",
              "args": [
                {
                  "desc": "p0",
                  "name": "p0",
                  "type": "[J"
                }
              ]
            },
            {
              "ret": "javax.management.openmbean.CompositeData",
              "desc": "getThreadInfo",
              "args": [
                {
                  "desc": "p0",
                  "name": "p0",
                  "type": "long"
                },
                {
                  "desc": "p1",
                  "name": "p1",
                  "type": "int"
                }
              ]
            },
            {
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "getThreadInfo",
              "args": [
                {
                  "desc": "p0",
                  "name": "p0",
                  "type": "[J"
                },
                {
                  "desc": "p1",
                  "name": "p1",
                  "type": "int"
                }
              ]
            },
            {
              "ret": "[Ljavax.management.openmbean.CompositeData;",
              "desc": "getThreadInfo",
              "args": [
                {
                  "desc": "p0",
                  "name": "p0",
                  "type": "[J"
                },
                {
                  "desc": "p1",
                  "name": "p1",
                  "type": "boolean"
                },
                {
                  "desc": "p2",
                  "name": "p2",
                  "type": "boolean"
                }
              ]
            },
            {
              "ret": "javax.management.openmbean.CompositeData",
              "desc": "getThreadInfo",
              "args": [
                {
                  "desc": "p0",
                  "name": "p0",
                  "type": "long"
                }
              ]
            }
          ],
          "dumpAllThreads": {
            "ret": "[Ljavax.management.openmbean.CompositeData;",
            "desc": "dumpAllThreads",
            "args": [
              {
                "desc": "p0",
                "name": "p0",
                "type": "boolean"
              },
              {
                "desc": "p1",
                "name": "p1",
                "type": "boolean"
              }
            ]
          },
          "getThreadCpuTime": [
            {
              "ret": "[J",
              "desc": "getThreadCpuTime",
              "args": [
                {
                  "desc": "p0",
                  "name": "p0",
                  "type": "[J"
                }
              ]
            },
            {
              "ret": "long",
              "desc": "getThreadCpuTime",
              "args": [
                {
                  "desc": "p0",
                  "name": "p0",
                  "type": "long"
                }
              ]
            }
          ],
          "getThreadAllocatedBytes": [
            {
              "ret": "[J",
              "desc": "getThreadAllocatedBytes",
              "args": [
                {
                  "desc": "p0",
                  "name": "p0",
                  "type": "[J"
                }
              ]
            },
            {
              "ret": "long",
              "desc": "getThreadAllocatedBytes",
              "args": [
                {
                  "desc": "p0",
                  "name": "p0",
                  "type": "long"
                }
              ]
            }
          ]
        },
        "attr": {
          "ThreadContentionMonitoringSupported": {
            "desc": "ThreadContentionMonitoringSupported",
            "type": "boolean",
            "rw": false
          },
          "SynchronizerUsageSupported": {
            "desc": "SynchronizerUsageSupported",
            "type": "boolean",
            "rw": false
          },
          "ThreadAllocatedMemoryEnabled": {
            "desc": "ThreadAllocatedMemoryEnabled",
            "type": "boolean",
            "rw": true
          },
          "ThreadCpuTimeEnabled": {
            "desc": "ThreadCpuTimeEnabled",
            "type": "boolean",
            "rw": true
          },
          "PeakThreadCount": {
            "desc": "PeakThreadCount",
            "type": "int",
            "rw": false
          },
          "CurrentThreadCpuTime": {
            "desc": "CurrentThreadCpuTime",
            "type": "long",
            "rw": false
          },
          "DaemonThreadCount": {
            "desc": "DaemonThreadCount",
            "type": "int",
            "rw": false
          },
          "CurrentThreadCpuTimeSupported": {
            "desc": "CurrentThreadCpuTimeSupported",
            "type": "boolean",
            "rw": false
          },
          "TotalStartedThreadCount": {
            "desc": "TotalStartedThreadCount",
            "type": "long",
            "rw": false
          },
          "AllThreadIds": {
            "desc": "AllThreadIds",
            "type": "[J",
            "rw": false
          },
          "ThreadContentionMonitoringEnabled": {
            "desc": "ThreadContentionMonitoringEnabled",
            "type": "boolean",
            "rw": true
          },
          "ObjectMonitorUsageSupported": {
            "desc": "ObjectMonitorUsageSupported",
            "type": "boolean",
            "rw": false
          },
          "ObjectName": {
            "desc": "ObjectName",
            "type": "javax.management.ObjectName",
            "rw": false
          },
          "ThreadAllocatedMemorySupported": {
            "desc": "ThreadAllocatedMemorySupported",
            "type": "boolean",
            "rw": false
          },
          "CurrentThreadUserTime": {
            "desc": "CurrentThreadUserTime",
            "type": "long",
            "rw": false
          },
          "ThreadCount": {
            "desc": "ThreadCount",
            "type": "int",
            "rw": false
          },
          "ThreadCpuTimeSupported": {
            "desc": "ThreadCpuTimeSupported",
            "type": "boolean",
            "rw": false
          }
        }
      },
      "name=CodeCacheManager,type=MemoryManager": {
        "desc": "Information on the management interface of the MBean",
        "attr": {
          "Name": {
            "desc": "Name",
            "type": "java.lang.String",
            "rw": false
          },
          "MemoryPoolNames": {
            "desc": "MemoryPoolNames",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "Valid": {
            "desc": "Valid",
            "type": "boolean",
            "rw": false
          },
          "ObjectName": {
            "desc": "ObjectName",
            "type": "javax.management.ObjectName",
            "rw": false
          }
        }
      },
      "type=OperatingSystem": {
        "desc": "Information on the management interface of the MBean",
        "attr": {
          "FreePhysicalMemorySize": {
            "desc": "FreePhysicalMemorySize",
            "type": "long",
            "rw": false
          },
          "AvailableProcessors": {
            "desc": "AvailableProcessors",
            "type": "int",
            "rw": false
          },
          "FreeSwapSpaceSize": {
            "desc": "FreeSwapSpaceSize",
            "type": "long",
            "rw": false
          },
          "ProcessCpuLoad": {
            "desc": "ProcessCpuLoad",
            "type": "double",
            "rw": false
          },
          "TotalSwapSpaceSize": {
            "desc": "TotalSwapSpaceSize",
            "type": "long",
            "rw": false
          },
          "ProcessCpuTime": {
            "desc": "ProcessCpuTime",
            "type": "long",
            "rw": false
          },
          "Name": {
            "desc": "Name",
            "type": "java.lang.String",
            "rw": false
          },
          "Arch": {
            "desc": "Arch",
            "type": "java.lang.String",
            "rw": false
          },
          "SystemLoadAverage": {
            "desc": "SystemLoadAverage",
            "type": "double",
            "rw": false
          },
          "OpenFileDescriptorCount": {
            "desc": "OpenFileDescriptorCount",
            "type": "long",
            "rw": false
          },
          "MaxFileDescriptorCount": {
            "desc": "MaxFileDescriptorCount",
            "type": "long",
            "rw": false
          },
          "TotalPhysicalMemorySize": {
            "desc": "TotalPhysicalMemorySize",
            "type": "long",
            "rw": false
          },
          "CommittedVirtualMemorySize": {
            "desc": "CommittedVirtualMemorySize",
            "type": "long",
            "rw": false
          },
          "ObjectName": {
            "desc": "ObjectName",
            "type": "javax.management.ObjectName",
            "rw": false
          },
          "Version": {
            "desc": "Version",
            "type": "java.lang.String",
            "rw": false
          },
          "SystemCpuLoad": {
            "desc": "SystemCpuLoad",
            "type": "double",
            "rw": false
          }
        }
      },
      "name=Code Cache,type=MemoryPool": {
        "desc": "Information on the management interface of the MBean",
        "op": {
          "resetPeakUsage": {
            "ret": "void",
            "desc": "resetPeakUsage",
            "args": []
          }
        },
        "attr": {
          "CollectionUsageThresholdExceeded": {
            "desc": "CollectionUsageThresholdExceeded",
            "type": "boolean",
            "rw": false
          },
          "CollectionUsageThresholdSupported": {
            "desc": "CollectionUsageThresholdSupported",
            "type": "boolean",
            "rw": false
          },
          "CollectionUsageThresholdCount": {
            "desc": "CollectionUsageThresholdCount",
            "type": "long",
            "rw": false
          },
          "PeakUsage": {
            "desc": "PeakUsage",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "UsageThresholdExceeded": {
            "desc": "UsageThresholdExceeded",
            "type": "boolean",
            "rw": false
          },
          "Type": {
            "desc": "Type",
            "type": "java.lang.String",
            "rw": false
          },
          "Usage": {
            "desc": "Usage",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "Name": {
            "desc": "Name",
            "type": "java.lang.String",
            "rw": false
          },
          "UsageThresholdCount": {
            "desc": "UsageThresholdCount",
            "type": "long",
            "rw": false
          },
          "UsageThreshold": {
            "desc": "UsageThreshold",
            "type": "long",
            "rw": true
          },
          "UsageThresholdSupported": {
            "desc": "UsageThresholdSupported",
            "type": "boolean",
            "rw": false
          },
          "MemoryManagerNames": {
            "desc": "MemoryManagerNames",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "CollectionUsage": {
            "desc": "CollectionUsage",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "Valid": {
            "desc": "Valid",
            "type": "boolean",
            "rw": false
          },
          "CollectionUsageThreshold": {
            "desc": "CollectionUsageThreshold",
            "type": "long",
            "rw": true
          },
          "ObjectName": {
            "desc": "ObjectName",
            "type": "javax.management.ObjectName",
            "rw": false
          }
        }
      },
      "name=PS Scavenge,type=GarbageCollector": {
        "desc": "Information on the management interface of the MBean",
        "attr": {
          "Name": {
            "desc": "Name",
            "type": "java.lang.String",
            "rw": false
          },
          "LastGcInfo": {
            "desc": "LastGcInfo",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "CollectionCount": {
            "desc": "CollectionCount",
            "type": "long",
            "rw": false
          },
          "MemoryPoolNames": {
            "desc": "MemoryPoolNames",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "Valid": {
            "desc": "Valid",
            "type": "boolean",
            "rw": false
          },
          "ObjectName": {
            "desc": "ObjectName",
            "type": "javax.management.ObjectName",
            "rw": false
          },
          "CollectionTime": {
            "desc": "CollectionTime",
            "type": "long",
            "rw": false
          }
        }
      },
      "type=Memory": {
        "desc": "Information on the management interface of the MBean",
        "op": {
          "gc": {
            "ret": "void",
            "desc": "gc",
            "args": []
          }
        },
        "attr": {
          "Verbose": {
            "desc": "Verbose",
            "type": "boolean",
            "rw": true
          },
          "ObjectPendingFinalizationCount": {
            "desc": "ObjectPendingFinalizationCount",
            "type": "int",
            "rw": false
          },
          "NonHeapMemoryUsage": {
            "desc": "NonHeapMemoryUsage",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "HeapMemoryUsage": {
            "desc": "HeapMemoryUsage",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "ObjectName": {
            "desc": "ObjectName",
            "type": "javax.management.ObjectName",
            "rw": false
          }
        }
      },
      "name=PS Survivor Space,type=MemoryPool": {
        "desc": "Information on the management interface of the MBean",
        "op": {
          "resetPeakUsage": {
            "ret": "void",
            "desc": "resetPeakUsage",
            "args": []
          }
        },
        "attr": {
          "CollectionUsageThresholdExceeded": {
            "desc": "CollectionUsageThresholdExceeded",
            "type": "boolean",
            "rw": false
          },
          "CollectionUsageThresholdSupported": {
            "desc": "CollectionUsageThresholdSupported",
            "type": "boolean",
            "rw": false
          },
          "CollectionUsageThresholdCount": {
            "desc": "CollectionUsageThresholdCount",
            "type": "long",
            "rw": false
          },
          "PeakUsage": {
            "desc": "PeakUsage",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "UsageThresholdExceeded": {
            "desc": "UsageThresholdExceeded",
            "type": "boolean",
            "rw": false
          },
          "Type": {
            "desc": "Type",
            "type": "java.lang.String",
            "rw": false
          },
          "Usage": {
            "desc": "Usage",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "Name": {
            "desc": "Name",
            "type": "java.lang.String",
            "rw": false
          },
          "UsageThresholdCount": {
            "desc": "UsageThresholdCount",
            "type": "long",
            "rw": false
          },
          "UsageThreshold": {
            "desc": "UsageThreshold",
            "type": "long",
            "rw": true
          },
          "UsageThresholdSupported": {
            "desc": "UsageThresholdSupported",
            "type": "boolean",
            "rw": false
          },
          "MemoryManagerNames": {
            "desc": "MemoryManagerNames",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "CollectionUsage": {
            "desc": "CollectionUsage",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "Valid": {
            "desc": "Valid",
            "type": "boolean",
            "rw": false
          },
          "CollectionUsageThreshold": {
            "desc": "CollectionUsageThreshold",
            "type": "long",
            "rw": true
          },
          "ObjectName": {
            "desc": "ObjectName",
            "type": "javax.management.ObjectName",
            "rw": false
          }
        }
      },
      "name=PS Eden Space,type=MemoryPool": {
        "desc": "Information on the management interface of the MBean",
        "op": {
          "resetPeakUsage": {
            "ret": "void",
            "desc": "resetPeakUsage",
            "args": []
          }
        },
        "attr": {
          "CollectionUsageThresholdExceeded": {
            "desc": "CollectionUsageThresholdExceeded",
            "type": "boolean",
            "rw": false
          },
          "CollectionUsageThresholdSupported": {
            "desc": "CollectionUsageThresholdSupported",
            "type": "boolean",
            "rw": false
          },
          "CollectionUsageThresholdCount": {
            "desc": "CollectionUsageThresholdCount",
            "type": "long",
            "rw": false
          },
          "PeakUsage": {
            "desc": "PeakUsage",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "UsageThresholdExceeded": {
            "desc": "UsageThresholdExceeded",
            "type": "boolean",
            "rw": false
          },
          "Type": {
            "desc": "Type",
            "type": "java.lang.String",
            "rw": false
          },
          "Usage": {
            "desc": "Usage",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "Name": {
            "desc": "Name",
            "type": "java.lang.String",
            "rw": false
          },
          "UsageThresholdCount": {
            "desc": "UsageThresholdCount",
            "type": "long",
            "rw": false
          },
          "UsageThreshold": {
            "desc": "UsageThreshold",
            "type": "long",
            "rw": true
          },
          "UsageThresholdSupported": {
            "desc": "UsageThresholdSupported",
            "type": "boolean",
            "rw": false
          },
          "MemoryManagerNames": {
            "desc": "MemoryManagerNames",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "CollectionUsage": {
            "desc": "CollectionUsage",
            "type": "javax.management.openmbean.CompositeData",
            "rw": false
          },
          "Valid": {
            "desc": "Valid",
            "type": "boolean",
            "rw": false
          },
          "CollectionUsageThreshold": {
            "desc": "CollectionUsageThreshold",
            "type": "long",
            "rw": true
          },
          "ObjectName": {
            "desc": "ObjectName",
            "type": "javax.management.ObjectName",
            "rw": false
          }
        }
      }
    },
    "jolokia": {
      "type=Config": {
        "desc": "Information on the management interface of the MBean",
        "op": {
          "resetHistoryEntries": {
            "ret": "void",
            "desc": "Operation exposed for management",
            "args": []
          },
          "resetDebugInfo": {
            "ret": "void",
            "desc": "Operation exposed for management",
            "args": []
          },
          "setHistoryEntriesForOperation": {
            "ret": "void",
            "desc": "Operation exposed for management",
            "args": [
              {
                "desc": "",
                "name": "p1",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p2",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p3",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p4",
                "type": "int"
              }
            ]
          },
          "debugInfo": {
            "ret": "java.lang.String",
            "desc": "Operation exposed for management",
            "args": []
          },
          "setHistoryEntriesForAttribute": {
            "ret": "void",
            "desc": "Operation exposed for management",
            "args": [
              {
                "desc": "",
                "name": "p1",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p2",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p3",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p4",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p5",
                "type": "int"
              }
            ]
          },
          "setHistoryLimitForOperation": {
            "ret": "void",
            "desc": "Operation exposed for management",
            "args": [
              {
                "desc": "",
                "name": "p1",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p2",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p3",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p4",
                "type": "int"
              },
              {
                "desc": "",
                "name": "p5",
                "type": "long"
              }
            ]
          },
          "setHistoryLimitForAttribute": {
            "ret": "void",
            "desc": "Operation exposed for management",
            "args": [
              {
                "desc": "",
                "name": "p1",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p2",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p3",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p4",
                "type": "java.lang.String"
              },
              {
                "desc": "",
                "name": "p5",
                "type": "int"
              },
              {
                "desc": "",
                "name": "p6",
                "type": "long"
              }
            ]
          }
        },
        "attr": {
          "HistoryMaxEntries": {
            "desc": "Attribute exposed for management",
            "type": "int",
            "rw": true
          },
          "Debug": {
            "desc": "Attribute exposed for management",
            "type": "boolean",
            "rw": true
          },
          "MaxDebugEntries": {
            "desc": "Attribute exposed for management",
            "type": "int",
            "rw": true
          },
          "HistorySize": {
            "desc": "Attribute exposed for management",
            "type": "int",
            "rw": false
          }
        }
      },
      "type=Discovery": {
        "desc": "Information on the management interface of the MBean",
        "op": {
          "lookupAgents": {
            "ret": "java.util.List",
            "desc": "Operation exposed for management",
            "args": []
          },
          "lookupAgentsWithTimeout": {
            "ret": "java.util.List",
            "desc": "Operation exposed for management",
            "args": [
              {
                "desc": "",
                "name": "p1",
                "type": "int"
              }
            ]
          }
        }
      },
      "type=ServerHandler": {
        "desc": "Information on the management interface of the MBean",
        "op": {
          "mBeanServersInfo": {
            "ret": "java.lang.String",
            "desc": "Operation exposed for management",
            "args": []
          }
        }
      }
    },
    "java.util.logging": {
      "type=Logging": {
        "desc": "Information on the management interface of the MBean",
        "op": {
          "getParentLoggerName": {
            "ret": "java.lang.String",
            "desc": "getParentLoggerName",
            "args": [
              {
                "desc": "p0",
                "name": "p0",
                "type": "java.lang.String"
              }
            ]
          },
          "getLoggerLevel": {
            "ret": "java.lang.String",
            "desc": "getLoggerLevel",
            "args": [
              {
                "desc": "p0",
                "name": "p0",
                "type": "java.lang.String"
              }
            ]
          },
          "setLoggerLevel": {
            "ret": "void",
            "desc": "setLoggerLevel",
            "args": [
              {
                "desc": "p0",
                "name": "p0",
                "type": "java.lang.String"
              },
              {
                "desc": "p1",
                "name": "p1",
                "type": "java.lang.String"
              }
            ]
          }
        },
        "attr": {
          "LoggerNames": {
            "desc": "LoggerNames",
            "type": "[Ljava.lang.String;",
            "rw": false
          },
          "ObjectName": {
            "desc": "ObjectName",
            "type": "javax.management.ObjectName",
            "rw": false
          }
        }
      }
    }
  }
}
